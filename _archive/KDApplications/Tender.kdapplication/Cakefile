option '-p', '--path [PATH]', 'specify the path to place the built js into'

fs          = require 'fs'
cs          = require 'coffee-script'
stylus          = require 'stylus'

FrameworkOrder=
  KD                  : "Framework/KD.coffee"
  KDObject            : "Framework/KDObject.coffee"
  KDData              : "Framework/KDData.coffee"
  KDPartials          : "Framework/KDPartials.coffee"
  KDRouter            : "Framework/KDRouter.coffee"
  KDView              : "Framework/KDView.coffee"
  KDScrollView        : "Framework/KDScrollView.coffee"
  # KDLocalStorageCache : "Framework/KDLocalStorageCache.coffee"

  # controllers            
  KDController          : "Framework/KDController.coffee"
  KDWindowController    : "Framework/KDWindowController.coffee"
  KDViewController      : "Framework/KDViewController.coffee"
  KDTabViewController   : "Framework/KDTabViewController.coffee"
  KDTreeViewController  : "Framework/KDTreeViewController.coffee"
                           
  #plugins                 
  KDInputValidator      : "Framework/KDInputValidator.coffee"
  # views                  
  KDCustomHTMLView      : "Framework/KDCustomHTMLView.coffee"
  KDModalView           : "Framework/KDModalView.coffee"
  KDNotificationView    : "Framework/KDNotificationView.coffee"
  KDSplitView           : "Framework/KDSplitView.coffee"
  KDListView            : "Framework/KDListView.coffee"
  KDListItemView        : "Framework/KDListItemView.coffee"
  KDHeaderView          : "Framework/KDHeaderView.coffee"
  KDTabView             : "Framework/KDTabView.coffee"
  KDTabPaneView         : "Framework/KDTabPaneView.coffee"
  KDTreeView            : "Framework/KDTreeView.coffee"
  KDTreeItemView        : "Framework/KDTreeItemView.coffee"
  KDContextMenu         : "Framework/KDContextMenu.coffee"
  KDToolTipMenu         : "Framework/KDToolTipMenu.coffee"
  KDDialogView          : "Framework/KDDialogView.coffee"
  KDFormView            : "Framework/KDFormView.coffee"
  KDInputView           : "Framework/KDInputView.coffee"
  KDFileUploadView      : "Framework/KDFileUploadView.coffee"
  KDAutoCompleteController    : "Framework/KDAutoCompleteController.coffee"
  KDLabelView           : "Framework/KDLabelView.coffee"
  KDButtonView          : "Framework/KDButtonView.coffee"

StylusFiles=
  kdfn           : "Framework/stylus/kdfn.styl"
  kd             : "Framework/stylus/kd.styl"
  kdInput        : "Framework/stylus/kd.input.styl"
  kdTreeView     : "Framework/stylus/kd.treeview.styl"
  kdContextMenu  : "Framework/stylus/kd.contextmenu.styl"
  kdDialog       : "Framework/stylus/kd.dialog.styl"
  kdButtons      : "Framework/stylus/kd.buttons.styl"
  kdScrollView   : "Framework/stylus/kd.scrollview.styl"
  kdModalView    : "Framework/stylus/kd.modal.styl"
  kdTipTip       : "Framework/stylus/kd.tiptip.styl"
  
wrapWithJSClosure = (js)-> "(function(){#{js}}).call(this);"

concatenateAndCompileFilePath=(pathArray)->
  contents = ""
  for filePath in pathArray
    contents += "#{fs.readFileSync filePath, 'utf-8'}\n"
  fs.writeFile 'debug.coffee',contents
  try
    contents = cs.compile contents,bare:yes
    return contents
  catch error
    console.log "#{(error.stack.split "\n")[0]} at: "
    
compileFilePath=(path)->
  contents = fs.readFileSync path, 'utf-8'
  try
    contents = cs.compile contents,bare:yes
    return contents
  catch error
    console.log "#{(error.stack.split "\n")[0]} at: #{path}"

compileStylusFilePath=(path, callback)->
  contents = fs.readFileSync path, 'utf-8'
  stylus.render contents,(err,css)=>
    unless err
      callback css
    else
      console.log "#{err} error with styl file at #{path}"

build = (options)->
  {path} = options
  
  concatenatedFiles = concatenateAndCompileFilePath ['AppRequirements.coffee', 'AppController.coffee']
  concatenatedFiles = wrapWithJSClosure concatenatedFiles
  
  fs.writeFile "#{path}/AppController.js",concatenatedFiles,(err) ->if err then console.log err
  compileStylusFilePath 'app.styl', (css)->
    fs.writeFile "#{path}/app.css", css, (err)->if err then console.log err
                           
task 'build', 'build your application', (options)->
  options.path or= ""
  build options



task 'preview', 'preview your application', (options)->
  spawn = require('child_process').spawn
  compile = ->
      concatenatedFrameworkFiles = ""
      moduleDefinition = ""
      styleFiles = ""
    
      i = 0
      j = 0
      for own name, path of StylusFiles
        j++
        compileStylusFilePath path, (css)->
          styleFiles += css
          i++
          if i is j then fs.writeFile 'css/kd.css', styleFiles, (err) ->err

    
      for own name, path of FrameworkOrder
        concatenatedFrameworkFiles += compileFilePath path
        moduleDefinition += "#{name} : #{name},"
      
      concatenatedFrameworkFiles += "define('Framework', [], function() {return {#{moduleDefinition} KDContextMenuTreeViewController:KDContextMenuTreeViewController,KDButtonViewWithMenu:KDButtonViewWithMenu,KDSplitViewPanel:KDSplitViewPanel,KDInputSwitch:KDInputSwitch,KDRySwitch:KDRySwitch,KDButtonMenu:KDButtonMenu,KDSelectBox:KDSelectBox};});"
      concatenatedFrameworkFiles = wrapWithJSClosure concatenatedFrameworkFiles

      concatenatedFiles = concatenateAndCompileFilePath ['AppRequirements.coffee', 'AppController.coffee']
      concatenatedFiles = wrapWithJSClosure concatenatedFiles
    
      mainFile = compileFilePath 'utils.coffee'
      mainFile += compileFilePath 'main.coffee'

      fs.writeFile 'Framework.js',concatenatedFrameworkFiles,(err)->if err then console.log err
      fs.writeFile 'AppController.js',concatenatedFiles,(err) ->if err then console.log err
      compileStylusFilePath 'app.styl', (css)->
        fs.writeFile 'app.css', css, (err)->if err then console.log err
      
      fs.writeFile 'main.js', new Buffer(mainFile, 'utf-8'), (err)-> if err then console.log err
      
      console.log 'compiled at ' + new Date()

    compile()
    
    watchOptions = {
      interval: 400
    }
    
    checker = (curr, prev) ->
      if curr.mtime.getTime() isnt prev.mtime.getTime()
        compile()
    
    for own name, path of FrameworkOrder
      fs.watchFile path, watchOptions, checker
      
    fs.watchFile 'pageEditor.coffee', watchOptions, checker
    fs.watchFile 'editor.coffee', watchOptions, checker
    fs.watchFile 'AppController.coffee', watchOptions, checker
    fs.watchFile 'utils.coffee', watchOptions, checker
    fs.watchFile 'main.coffee', watchOptions, checker
  
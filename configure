#!/usr/bin/env coffee

argv       = require('minimist')(process.argv.slice(2))
log        = console.log
fs         = require 'fs'
inquirer   = require "inquirer"

log "-------------------------"
log ""
log "# ./configure assumes development environment - comes bundled with options below."
log "# override them as you see fit with command line arguments like --config --branch etc."
log ""

options = o =
  projectRoot      : argv.projectRoot    or __dirname
  config           : argv.config         or "dev"
  region           : argv.region         or "dev"
  branch           : argv.branch         or "cake-rewrite"
  build            : argv.build          or 1
  version          : argv.version        or "1.0"
  environment      : argv.environment    or "dev"
  hostname         : argv.hostname       or "lvh.me:8090"
  publicHostname   : argv.publichostname or process.env.USER
  target           : argv.target         or "localhost"
  onlyconfigure    : argv.onlyconfigure  or no
  supervisor       : argv.supervisor     or no
  deploy           : argv.deploy         or no

log "Configuring with options:"
log "-------------------------"
log o
log "-------------------------"
log ""

KONFIG = require("./config/main.#{o.config}.coffee")(options)


createRunFile = (KONFIG)->

  fs.writeFileSync "run",KONFIG.runFile
  fs.chmodSync "./run", 0o755

  # write supervisor config
  if o.supervisor
    fs.writeFileSync "/etc/supervisor/conf.d/koding.conf",KONFIG.supervisorConf

  log "Configuration done"
  log "1) install Docker"
  log "2) do './run install' "
  log "3) do './run services' for backend services after installing docker."
  log "4) you can then type './run' to run Koding and see it on #{o.hostname}"




  # log KONFIG.supervisorConf
  # log "echo '#{new Buffer(KONFIG.supervisorConf).toString('base64')}' | base64 --decode > /etc/supervisor/conf.d/koding.conf"


createRunFile KONFIG


###
"use strict"

console.log "Hi, welcome to Node Pizza"
questions = [
  {
    type: "confirm"
    name: "toBeDelivered"
    message: "Is it for a delivery"
    default: false
  }
  {
    type: "input"
    name: "phone"
    message: "What's your phone number"
    validate: (value) ->
      pass = value.match(/^([01]{1})?[\-\.\s]?\(?(\d{3})\)?[\-\.\s]?(\d{3})[\-\.\s]?(\d{4})\s?((?:#|ext\.?\s?|x\.?\s?){1}(?:\d+)?)?$/i)
      if pass
        true
      else
        "Please enter a valid phone number"
  }
  {
    type: "list"
    name: "size"
    message: "What size do you need"
    choices: [
      "Large"
      "Medium"
      "Small"
    ]
    filter: (val) ->
      val.toLowerCase()
  }
  {
    type: "input"
    name: "quantity"
    message: "How many do you need"
    validate: (value) ->
      valid = not isNaN(parseFloat(value))
      valid or "Please enter a number"

    filter: Number
  }
  {
    type: "expand"
    name: "toppings"
    message: "What about the toping"
    choices: [
      {
        key: "p"
        name: "Peperonni and chesse"
        value: "PeperonniChesse"
      }
      {
        key: "a"
        name: "All dressed"
        value: "alldressed"
      }
      {
        key: "w"
        name: "HawaÃ¯an"
        value: "hawaian"
      }
    ]
  }
  {
    type: "rawlist"
    name: "beverage"
    message: "You also get a free 2L beverage"
    choices: [
      "Pepsi"
      "7up"
      "Coke"
    ]
  }
  {
    type: "input"
    name: "comments"
    message: "Any comments on your purchase experience"
    default: "Nope, all good!"
  }
  {
    type: "list"
    name: "prize"
    message: "For leaving a comments, you get a freebie"
    choices: [
      "cake"
      "fries"
    ]
    when: (answers) ->
      answers.comments isnt "Nope, all good!"
  }
]

inquirer.prompt questions, (answers) ->
  console.log "\nOrder receipt:"
  console.log JSON.stringify(answers, null, "  ")
  return


###











upstream backend  {
    ip_hash;
    #least_conn;
    <% @node['nginx']['backend_ports'].each do |port| -%>
    server localhost:<%= port %>;
    <% end -%>
}

server {
   # redirect http:// to https://elb

   listen 8080;
   server_name <%= node['nginx']['server_name'] %>;
   # redirect to AWS ELB https
   return 301 https://<%= node['nginx']['server_name'] %>$request_uri;
}


server {
   # redirect http://www.* to https://elb

   listen 8080;
   server_name www.<%= node['nginx']['server_name'] %>;
   return 301 https://<%= node['nginx']['server_name'] %>$request_uri;
}

server {
    # requesrs from AWS ELB (browser -> https://elb -> http://)

    listen       80;
    server_name  <%= node['nginx']['server_name'] %> <%= node['nginx']['rc_server_name'] %>;

    set_real_ip_from  0.0.0.0/0;
    real_ip_header    X-Forwarded-For;
    real_ip_recursive on;

    #access_log off;

    access_log  <%= node['nginx']['log_dir'] %>/<%= node['nginx']['server_name'] %>.access.log;
    error_log  <%= node['nginx']['log_dir'] %>/<%= node['nginx']['server_name'] %>.error.log;
    autoindex off;
    server_tokens off;
 
    error_page   500 502 503 504  /<%= node['nginx']['maintenance_page'] %>;
    location = /<%= node['nginx']['maintenance_page'] %> {
        root  <%= node['nginx']['static_files'] %>; 
    }
   

    location / {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header Connection "";

      proxy_next_upstream error timeout invalid_header;

      proxy_pass http://backend;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;

    }


}



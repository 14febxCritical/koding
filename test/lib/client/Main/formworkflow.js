// Generated by CoffeeScript 1.6.3
(function() {
  var assert, make, results, tests;

  assert = require('assert');

  results = null;

  make = function() {
    var fw;
    fw = new FormWorkflow;
    fw.on('DataCollected', function(data) {
      return results.push(data);
    });
    return fw;
  };

  module.exports = [
    function() {
      var test, _i, _len;
      results = [];
      for (_i = 0, _len = tests.length; _i < _len; _i++) {
        test = tests[_i];
        test.call(make());
      }
      results = null;
      console.log("FormWorkflow tests passed");
      return true;
    }
  ];

  tests = [
    function() {
      this.requireData(['foo', 'bar']);
      this.collectData({
        foo: 42
      });
      assert(!this.isSatisfied());
      this.collectData({
        bar: 0
      });
      assert(this.isSatisfied());
      return assert(results.length === 1);
    }, function() {
      this.requireData(this.all('foo', 'bar'));
      this.collectData({
        foo: 42
      });
      assert(!this.isSatisfied());
      this.collectData({
        bar: 0
      });
      assert(this.isSatisfied());
      return assert(results.length === 2);
    }, function() {
      this.requireData(this.any('foo', 'bar'));
      this.collectData({
        foo: 42
      });
      assert(this.isSatisfied());
      assert(results.length === 3);
      this.collectData({
        bar: 0
      });
      assert(this.isSatisfied());
      assert(results.length === 4);
      this.clearData('foo');
      assert(this.isSatisfied());
      assert(results.length === 5);
      this.clearData('bar');
      return assert(!this.isSatisfied());
    }, function() {
      this.requireData(this.all('foo', 'bar', this.any('baz', 'qux')));
      this.collectData({
        foo: 42
      });
      assert(!this.isSatisfied());
      this.collectData({
        bar: 0
      });
      assert(!this.isSatisfied());
      this.collectData({
        baz: 16
      });
      assert(this.isSatisfied());
      assert(results.length === 6);
      this.clearData('baz');
      assert(!this.isSatisfied());
      this.collectData({
        qux: -88
      });
      assert(this.isSatisfied());
      assert(results.length === 7);
      this.clearData('bar');
      return assert(!this.isSatisfied());
    }
  ];

}).call(this);

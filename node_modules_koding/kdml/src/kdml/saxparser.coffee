{EventEmitter} = require 'microemitter'

module.exports = class KDSaxParser extends EventEmitter

  constructor:(options)->
    {@api, @prefix} = options  if options.api?
    @api        ?= options
    @prefix     ?= 'KD'

    @parser = createSaxParser

      onStartDocument   : @bound 'emit', 'start'
      onEndDocument     : @bound 'emit', 'end'

      onStartElementNS  : @bound 'emit', 'elementstart'
      onEndElementNS    : @bound 'emit', 'elementend'

      onCharacters      : @bound 'emit', 'characters'
      onCdata           : @bound 'emit', 'cdata'
      onComment         : @bound 'emit', 'comment'

      onWarning         : @bound 'warn'
      onError           : @bound 'error'

  createSaxParser =(handlers)->
    {SaxParser} = require 'node-xml'
    return new SaxParser (cb)->
      cb[ev] handler  for own ev, handler of handlers

  createErr =(message)->
    return new Error message  if 'string' is typeof message
    return message

  bound: require 'koding-bound'

  warn:(message)->
    @emit 'warning', createErr message

  error:(message)->
    @emit 'error', createErr message

  emit:->
    super
    console.log arguments

  pause:-> @parser.pause()

  resume:-> @parser.resume()

  parse:(xmlStr)->
    {parser} = this
    @parser.parseString xmlStr
var EventEmitter, KDSaxParser,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('microemitter').EventEmitter;

module.exports = KDSaxParser = (function(_super) {
  var createErr, createSaxParser;

  __extends(KDSaxParser, _super);

  function KDSaxParser(options) {
    var _ref, _ref1;
    if (options.api != null) {
      this.api = options.api, this.prefix = options.prefix;
    }
    if ((_ref = this.api) == null) {
      this.api = options;
    }
    if ((_ref1 = this.prefix) == null) {
      this.prefix = 'KD';
    }
    this.parser = createSaxParser({
      onStartDocument: this.bound('emit', 'start'),
      onEndDocument: this.bound('emit', 'end'),
      onStartElementNS: this.bound('emit', 'elementstart'),
      onEndElementNS: this.bound('emit', 'elementend'),
      onCharacters: this.bound('emit', 'characters'),
      onCdata: this.bound('emit', 'cdata'),
      onComment: this.bound('emit', 'comment'),
      onWarning: this.bound('warn'),
      onError: this.bound('error')
    });
  }

  createSaxParser = function(handlers) {
    var SaxParser,
      _this = this;
    SaxParser = require('node-xml').SaxParser;
    return new SaxParser(function(cb) {
      var ev, handler, _results;
      _results = [];
      for (ev in handlers) {
        if (!__hasProp.call(handlers, ev)) continue;
        handler = handlers[ev];
        _results.push(cb[ev](handler));
      }
      return _results;
    });
  };

  createErr = function(message) {
    if ('string' === typeof message) {
      return new Error(message);
    }
    return message;
  };

  KDSaxParser.prototype.warn = function(message) {
    return this.emit('warning', createErr(message));
  };

  KDSaxParser.prototype.error = function(message) {
    return this.emit('error', createErr(message));
  };

  KDSaxParser.prototype.emit = function() {
    KDSaxParser.__super__.emit.apply(this, arguments);
    return console.log(arguments);
  };

  KDSaxParser.prototype.pause = function() {
    return this.parser.pause();
  };

  KDSaxParser.prototype.resume = function() {
    return this.parser.resume();
  };

  KDSaxParser.prototype.bound = require('koding-bound');

  KDSaxParser.prototype.parse = function(xmlStr) {
    var parser;
    parser = this.parser;
    return this.parser.parseString(xmlStr);
  };

  return KDSaxParser;

})(EventEmitter);

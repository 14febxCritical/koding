ServiceManager = require './ServiceManager.coffee'
{race}         = require 'bongo'

splitDomain = (domainName) ->
  splitted  = domainName.split "."
  return {
    domain    : splitted[0]
    extension : if splitted.length > 1 then splitted[1..].join "." else ""
  }

module.exports = class DomainService extends ServiceManager

  request = require 'request'

  # Move these to config ~ GG
  nameservers = ["ns1.domain.com"]
  # nameservers = [
  #   "sina482303.mercury.orderbox-dns.com",
  #   "sina482303.venus.orderbox-dns.com",
  #   "sina482303.earth.orderbox-dns.com",
  #   "sina482303.mars.orderbox-dns.com"
  # ]

  @prices       = {} # Prices will be updated with first request
  availableTLDs = [
    "com","net","org","co","me"
    "info","in","ca","us","ru"
    "ws","eu","cn","cc","biz"
  ]

  getAvailableTlds: (callback=->)-> callback availableTLDs

  getDomainInfo: (domainName, callback)->

    {domain, extension} = splitDomain domainName

    if extension not in availableTLDs
      return callback "Tld is blank or not supported", null

    options =
      service         : "domains"
      action          : "available"
      parameters      :
        tlds          : extension
        "domain-name" : domain

    @makeRequestToResellerApi options, (err, res)=>
      return callback err if err
      available = res[domainName]?.status is 'available'
      if not available then callback err, {available}
      else
        @getTldPrice extension, (err, price)->
          return callback err, {available}  if err
          callback err, {available, price}

  # Poor-mans guess mechanism ~ GG
  guessDomain: (domain)->
    suggestions = []
    for tld in availableTLDs
      suggestions.push "#{domain}.#{tld}"
      if domain.indexOf(tld) > 0
        suggestions.push domain.replace tld, ".#{tld}/"
    suggestions

  getDomainSuggestions: (domainName, callback) ->
    suggestions = []

    attachPrice = race (i, {domain, extension}, fin) =>
      @getTldPrice extension, (err, price) ->
        return callback err, null  if err
        suggestions.push {domain, price}
        fin()
    , ->
      return callback null, suggestions

    {domain, extension} = splitDomain domainName

    # Not using it yet ~ GG
    # suggestions = @guessDomain domainName

    options =
      service           : "domains"
      action            : "available"
      parameters        :
        "domain-name"   : domain
        tlds            : availableTLDs

    @makeRequestToResellerApi options, (err, response)->
      return callback err, suggestions  if err

      for own domain, current of response
        {prefix, extension} = splitDomain domain
        if current.status is 'available'
          attachPrice {domain, extension}
          foundASuggestion = yes

      unless foundASuggestion
        callback null, suggestions

  getTldPrice: (tld, callback) ->
    if DomainService.prices[tld]?
      callback null, DomainService.prices[tld]
    else @getTldPrices (err, prices) ->
      return callback err, null  if err
      callback null, prices[tld]

  getTldPrices: (callback) ->

    options =
      service    : "products"
      action     : "customer-price"

    @makeRequestToResellerApi options, (err, apiResponseBody) =>
      return callback err, null  if err
      priceList = {}
      for key, value of apiResponseBody
        # TODO (1) tld parsing is not so easy :(
        # This logic needs to be extended when new domains are added to
        # the support list
        currentTld = key.match(/^do[mt]([a-z]+)$/)?[1]
        if key is "domcno" # com is named domcno
          priceList["com"] = value.addnewdomain[1]
        else if currentTld and (currentTld in availableTLDs)
          priceList[currentTld] = value.addnewdomain[1]

      # TODO: Invalidate this prices information after sometime.
      DomainService.prices = priceList
      return callback null, priceList

  registerDomain: (domainInfo, callback)->

    # invoice option may change, but for now NoInvoice parameter is given,
    params =
      "ns"                 : nameservers
      "years"              : domainInfo.years
      "domain-name"        : domainInfo.domainName
      "customer-id"        : domainInfo.customerId
      "reg-contact-id"     : domainInfo.regContactId
      "invoice-option"     : domainInfo.invoiceOption
      "tech-contact-id"    : domainInfo.techContactId
      "protect-privacy"    : domainInfo.protectPrivacy
      "admin-contact-id"   : domainInfo.adminContactId
      "billing-contact-id" : domainInfo.billingContactId

    options =
      service              : "domains"
      action               : "register"
      parameters           : params

    @makeRequestToResellerApi options, callback

  getDomainDetails:(domain, callback)->
    params =
      "domain-name"        : domain.address
      "options"            : "All"

    options =
      service              : "domains"
      action               : "details-by-name"
      parameters           : params

    data = @makeRequestToResellerApi options, callback

  updateDomainContactDetails:(domain, callback)->
    params =
      "domain-name"        : domain.address
      "options"            : "All"
      "order-id"           : domain.orderId
      "reg-contact-id"     : domain.registrantContactId
      "admin-contact-id"   : domain.adminContactId
      "tech-contact-id"    : domain.techContactId
      "billing-contact-id" : domain.billingContactId

    options =
      service              : "domains"
      action               : "modify-contact"
      parameters           : params

    data = @makeRequestToResellerApi options, callback

  updateDomainCName:(params, callback)->

    updateOptions =
      service              : "dns"
      action               : "activate"
      parameters           :
        "order-id"         : params.orderId

    @makeRequestToResellerApi updateOptions, (err, response)=>

      unless err

        options =
          service          : "dns/manage"
          action           : "add-cname-record"
          parameters       :
            "domain-name"  : params.domainName
            value          : "kontrol.in.koding.com"

        @makeRequestToResellerApi options, callback

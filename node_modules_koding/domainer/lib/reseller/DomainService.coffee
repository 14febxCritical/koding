ServiceManager = require './ServiceManager.coffee'

module.exports = class DomainService extends ServiceManager

  request = require 'request'
  
  # TODO : nameservers should change according to koding.com NS
  nameservers = ["ns29.domaincontrol.in","ns30.domaincontrol.in"]
  avaibleTLDs = ["com","net","org"]
  
  isDomainAvailable:(domainName, tld, callback)->
    params =
      "domain-name"        : domainName
      "tlds"               : tld
    
    options = 
      service              : "domains"
      action               : "available"
      parameters           : params 

    @makeRequestToResellerApi options, (err, apiResponseBody) ->
      domainKey = "#{domainName}.#{tld}"
      callback err, apiResponseBody?[domainKey]?.status

  registerDomain:(domainInfo, callback)->
    #invoice option may change, but for now NoInvoice parameter is given, 
    params =
      "domain-name"        : domainInfo.domainName
      "years"              : domainInfo.years
      "ns"                 : nameservers
      "customer-id"        : domainInfo.customerId
      "reg-contact-id"     : domainInfo.regContactId
      "admin-contact-id"   : domainInfo.adminContactId
      "tech-contact-id"    : domainInfo.techContactId
      "billing-contact-id" : domainInfo.billingContactId
      "invoice-option"     : domainInfo.invoiceOption
      "protect-privacy"    : domainInfo.protectPrivacy
      
    options = 
      service              : "domains"
      action               : "register"
      parameters           : params

    @makeRequestToResellerApi options, callback

  createProxyRule:(params, callback)->
    options =
      method  : 'POST'
      uri     : "http://kontrol.in.koding.com/rules/#{params.domainName}"
      body    : JSON.stringify params.ruleInfo

      headers : {'content-type': 'application/json'}

    request.post options, (error, response, body) =>
      console.log body
      if error
        console.log "ERROR", error
      else if response.statusCode is 200
        callback JSON.parse body
  
  getDomainDetails:(domain, callback)->
    params =
      "domain-name"        : domain.address
      "options"            : "All"
             
    options = 
      service              : "domains"
      action               : "details-by-name"
      parameters           : params 

    data = @makeRequestToResellerApi options, callback
    
    
  updateDomainContactDetails:(domain, callback)->
    params =
      "domain-name"        : domain.address
      "options"            : "All"
      "order-id"           : domain.orderId
      "reg-contact-id"     : domain.registrantContactId
      "admin-contact-id"   : domain.adminContactId
      "tech-contact-id"    : domain.techContactId
      "billing-contact-id" : domain.billingContactId
      
    options = 
      service              : "domains"
      action               : "modify-contact"
      parameters           : params 

    data = @makeRequestToResellerApi options, callback
    
exports.bash = do ->

  glueEsc =(userInput)-> userInput.replace /'/g, "'\"'\"'"

  quotate =(userInput)-> "'#{glueEsc userInput}'"

  bash =(command, options=[])->
  	#
  	# we're ATTEMPTING to ensure that, no matter what, arbitrary bash
  	# commands can't be executed as root.  we are making sure that all user
  	# input is encased inside single quotes, regardless of its context, and
  	# that any single-quotes interior to the user input are "escaped" in a
  	# bash-specific syntax (i.e. string gluing).  The idea is, no matter
  	# what the user input, treat every character literally.
  	#
  	# This is MEANT as a general-purpose failsafe.
  	#
  	# BUT IT MAY NOT WORK!
  	#
  	# Use of other, better, more appropriate and/or specific filters is
  	# strongly encouraged!
  	#
  	# Better yet, never do an insane thing like running commands as root,
  	# which are interpolated with raw user input, if it can be avoided.
  	# This is meant as a safety net for victims of some obivious exploits.
  	#
  	# AGAIN: IT MAY NOT WORK!
  	#
    i = 0; command.replace /%s/g, -> quotate "#{options[i++] ? ''}"
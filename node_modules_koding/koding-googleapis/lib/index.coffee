google = require 'googleapis'

{argv} = require 'optimist'
KONFIG = require('koding-config-manager').load("main.#{argv.c}")


account = KONFIG.googleapiServiceAccount
email   = account.serviceAccountEmail
key     = account.serviceAccountKeyFile

{
  clientId
  clientSecret
} = account


authorize = (options, callback) ->

  {scope, subject} = options

  scope ?= null

  return callback 'Subject is not specified'  unless subject

  subject = [subject]  if typeof subject is 'string'

  new google.auth.JWT email, key, scope, subject
    .authorize callback


authenticate = (options, callback) ->

  {access_token, refresh_token} = options

  return callback 'access_token is not specified'  unless access_token
  return callback 'refresh_token is not specified'  unless refresh_token

  oauth2Client = new google.auth.OAuth2 clientId, clientSecret, null
  oauth2Client.setCredentials options

  callback null, oauth2Client


authenticated = (options, method) ->

  {
    authorization_options
    authorization_handler
    authentication_handler
  } = options

  return do (oauth2Client = null, timestamp = null) ->

    return ->

      method_arguments = arguments

      invoke_method = -> method.apply null, method_arguments

      authenticate_method = (callback) ->

        authorize authorization_options, (err, token) ->
          return console.error err  if err

          authorization_handler? token

          authenticate token, (err, client) ->
            return console.error err  if err

            oauth2Client = client
            timestamp = Date.now()

            authentication_handler? client
            callback()

      age     = Date.now() - timestamp
      expired = age > 30 * 60 * 1000

      if oauth2Client
        if expired
        then authenticate_method invoke_method
        else invoke_method()
      else
        authenticate_method invoke_method



module.exports = {
  authorize
  authenticate
  authenticated
}

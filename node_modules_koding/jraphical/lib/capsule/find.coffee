# contrib
{
  Base: {constructors}
  util: {castAll, convertComplexSelector}

} = require 'bongo'

###
@mixin: bongo "find" methods.
@description: Methods for selecting against the model's
  MongoDB collection.  You can mix this into constructors
  that have static methods with all of the following:
  @requiredSignature: SkinCollection obj.getCollection()
  @requiredSignature: obj.castValue(selector, constructor)
###
module.exports =

  one:(uniqueSelector, callback)->
    constructor = @
    collection = constructor.getCollection()
    collection.findOne castAll(uniqueSelector, constructor), (err, doc)->
      model = if not err and doc then new constructors[doc.type] doc
      callback err, model

  all:(selector, callback)->
    [callback, selector] = [selector, callback] unless callback
    selector or= {}
    constructor = @
    collection = constructor.getCollection()
    collection.find castAll(selector, constructor), (err, cursor)->
      if err
        callback err
      else
        cursor.toArray (err, docs)->
          callback null, docs?.map (doc)->
            new constructors[doc.type] doc

  some:(selector, options, callback)->
    constructor = @
    collection = constructor.getCollection()
    collection.find castAll(selector, constructor), null, options, (err, cursor)->
      if err
        callback err
      else
        cursor.toArray (err, docs)->
          callback null, docs?.map (doc)->
            new constructors[doc.type] doc
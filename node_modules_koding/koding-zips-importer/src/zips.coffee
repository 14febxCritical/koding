fs            = require 'fs'
csv           = require 'csv'
nodePath      = require 'path'
{Stream}      = require 'stream'
{MongoClient} = require 'mongodb'
{daisy}       = require 'sinkrow'

###
COLUMNS = [
  'RecordNumber'
  'Zipcode'
  'ZipCodeType'
  'City'
  'State'
  'LocationType'
  'Lat'
  'Long'
  'Xaxis'
  'Yaxis'
  'Zaxis'
  'WorldRegion'
  'Country'
  'LocationText'
  'Location'
  'Decommisioned'
  'TaxReturnsFiled'
  'EstimatedPopulation'
  'TotalWages'
  'Notes'
]
###

fetchDb = (mongo, callback) ->
  throw new Error 'need a mongo connection'  unless mongo

  if 'string' is typeof mongo
    MongoClient.connect 'mongodb://localhost/test', callback
  else
    process.nextTick -> callback null, mongo


module.exports = (options) ->
  { path, mongo, collectionName, encoding, dropFirst } = options

  path      ?= nodePath.join __dirname, '../db/zips.csv'
  encoding  ?= 'utf-8'
  dropFirst ?= yes

  stream = new Stream

  stream.end = -> stream.emit 'end'

  fetchDb mongo, (err, db) ->
    return stream.emit 'error', err  if err

    collection = db.collection collectionName

    queue = []

    if dropFirst
      queue.push -> collection.drop -> queue.next()

    queue.push ->
      csv()
        .from.path(nodePath.join(__dirname, path), encoding)
        .to.stream(stream)
        .on 'record', ([_num, zip, _zcType, city, state], i) ->
          collection.insert { zip, city, state }, (err) ->
            return stream.emit 'error', err  if err
        .on 'close', -> queue.next()

    queue.push ->
      collection.createIndex 'zip'

    daisy queue

  return stream
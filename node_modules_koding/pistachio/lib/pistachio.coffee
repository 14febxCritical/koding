class Pistachio

  @MODE = PISTACHIO_MODE ? 'development'

  @createId = do ->
    counter = 0
    (prefix)-> "#{prefix}el-#{counter++}"
  
  @getAt =(ref, path)->
    if 'function' is typeof path.split # ^1
      path = path.split '.'
    else
      path = path.slice()
    while ref? and prop = path.shift()
     ref = ref[prop]
    ref
  
  coffee = window?.CoffeeScript
  if @MODE is 'development' and not coffee?
    if define?.amd
      require ['coffee-script'], (CoffeeScript)=>
        coffee = CoffeeScript
        @coffeeIsReady = yes
    else if require
      coffee = require 'coffee-script'

  ###
  example pistachios:
  
  header:
  {h3{#(title)}}
  
  date:
  {time.timeago{#(meta.createdAt)}}
  
  id:
  {h1#siteTitle{#(title)}}
  
  subview / partial:
  {{> @subView }}
  
  wrapped subview / partial:
  {div.fixed.widget{> @clock }}
  
  attribute:
  {a[href="#profile"]{ '@'+#(profile.nickname) }}
  
  kitchen sink:
  {div#id.class1.class2[title="Example Attribute"]{> @subView }}
  
  it's important to note that there is a priority.  That is to make the symbol easier for the CPU to parse.
  
  1 tagName
  2 id, #-prefixed
  3 classNames, .-prefixed
  4 custom attributes, bracketed squarely, each ([key=val]) # weird stuff is OK for "val"
  
  #sth is short for [id=sth]
  .sth is short for [class=sth]
  .sth.els is short for [class="sth els"]
  
  we optimize both.
  ###
  pistachios =
    ///             
    \{              # first { (begins symbol)
      (\w*)?        # optional custom html tag name
      (\#\w*)?      # optional id - #-prefixed
      ((?:\.\w*)*)  # optional class names - .-prefixed
      (\[           # optional [ begins the attributes
        (?:\b\w*\b) # the name of the attribute
        (?:\=       # optional assignment operator =
                    # TODO: this will tolerate fuzzy quotes for now. "e.g.'
          [\"|\']?  # optional quotes 
          .*        # optional value
          [\"|\']?  # optional quotes
        )           
      \])*          # optional ] closes the attribute tag(s). there can be many attributes.
      \{            # second { (begins expression)
        ([^{}]*)    # practically anything can go between the braces, except {}
      \}\s*         # closing } (ends expression)
    \}              # closing } (ends symbol)
    ///g

  constructor:(@view, @template, @options={})->
    {@prefix} = @options
    @symbols = {}
    @dataPaths = {}
    @subViewNames = {}
    @prefix or= ''
    @html = @init()

  createId: @createId

  toString:-> @template

  init:do ->
    
    dataGetter = (prop)->
      data = @getData?()
      if data
        return data.getAt?(prop) or Pistachio.getAt data, prop
    
    getEmbedderFn =(pistachio, view, id, symbol)->
      (childView)->
        view.embedChild id, childView, symbol.isCustom
        unless symbol.isCustom
          symbol.id = childView.id
          symbol.tagName = childView.getTagName?()
          delete pistachio.symbols[id]
          pistachio.symbols[childView.id] = symbol
    
    ->
      {prefix, view, createId} = @
      @template.replace pistachios, (_, tagName, id, classes, attrs, expression)=>
        
        id = id?.split('#')[1]
        classNames = classes?.split('.').slice(1) or []
        attrs = attrs?.replace(/\]\[/g, ' ').replace(/\[|\]/g, '') or ''
        
        isCustom = tagName or id or classes.length or attrs.length

        tagName or= 'span'

        dataPaths = []
        subViewNames = []

        expression = expression
          .replace /#\(([^)]*)\)/g, (_, dataPath)->
            dataPaths.push dataPath
            "data('#{dataPath}')"
          .replace /^(?:> ?|embedChild )(.+)/, (_, subViewName)->
            subViewNames.push subViewName.replace /\@\.?|this\./, ''
            "embedChild(#{subViewName})"

        @registerDataPaths dataPaths
        @registerSubViewNames subViewNames

        js = 'return ' +
          if Pistachio.MODE is 'development'
            if Pistachio.coffeeIsReady
              coffee.compile(expression, bare: yes).replace /\n/g, ''
            else throw new Error 'Developer mode needs coffee; coffee-script not found.'
          else
            expression

        try code = Function('data', 'embedChild', js)

        catch e then throw new Error \
          """
          Pistachio encountered an error: #{e}
          Source: #{js}
          """

        id or= createId prefix
        
        render = ->
          code.call(
            view
            dataGetter.bind view
            embedChild
          )

        symbol = @symbols[id] = {
          tagName, id, isCustom, js, code, render
        }

        embedChild = getEmbedderFn @, view, id, symbol

        dataPathsAttr = 
          if dataPaths.length
            classNames.push "#{prefix}data"
            " data-#{prefix}paths='#{dataPaths.join ' '}'"
          else ""

        subViewNamesAttr =
          if subViewNames.length
            classNames.push "#{prefix}subview"
            " data-#{prefix}subviews='#{cleanSubviewNames(subViewNames.join ' ')}'"
          else ""

        classAttr = 
          if classNames.length then " class='#{classNames.join ' '}'"
          else ""
        
        "<#{tagName}#{classAttr}#{dataPathsAttr}#{subViewNamesAttr} #{attrs} id='#{id}'></#{tagName}>"
  
  addSymbol:(childView)->
    @symbols[childView.id] = {
      id      : childView.id
      tagName : childView.getTagName?()
    }

  appendChild:(childView)->
    @addSymbol childView

  prependChild:(childView)->
    @addSymbol childView

  registerDataPaths:(paths)->
    @dataPaths[path] = yes for path in paths
  
  registerSubViewNames:(subViewNames)->
    @subViewNames[subViewName] = yes for subViewName in subViewNames
  
  getDataPaths:-> Object.keys @dataPaths
    
  getSubViewNames:-> Object.keys @subViewNames

  cleanSubviewNames =(name)-> name.replace /(this\["|\"])/g, ''

  refreshChildren:(childType, items, forEach)->
    {symbols} = @
    $els = @view.$ ("[data-#{childType}s~=\"#{cleanSubviewNames(item)}\"]" for item in items).join ','
    $els.each ->
      out = symbols[@id]?.render()
      forEach?.call @, out if out?

  embedSubViews:(subviews=@getSubViewNames())->
    @refreshChildren 'subview', subviews

  update:(paths=@getDataPaths())->
    @refreshChildren 'path', paths, (html)-> @innerHTML = html

if module?
  module.exports = Pistachio
if window?
  window['Pistachio'] = Pistachio

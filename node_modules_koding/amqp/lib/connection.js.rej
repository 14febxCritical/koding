***************
*** 337,342 ****
    return this._defaultExchange.publish(routingKey, body, options, callback);
  };
  
  Connection.prototype._bodyToBuffer = function (body) {
    // Handles 3 cases
    // - body is utf8 string
--- 337,355 ----
    return this._defaultExchange.publish(routingKey, body, options, callback);
  };
  
+ Connection.prototype.end = function() {
+   if (this.socket) {
+     // According to AMQP spec, send connectionClose to server.
+     // Socket will be closed when server responds connectionCloseOk.
+     this._sendMethod(0, methods.connectionClose, {
+       replyCode: 200,
+       replyText: 'ok',
+       classId: 0,
+       methodId: 0
+     });
+   }
+ }
+ 
  Connection.prototype._bodyToBuffer = function (body) {
    // Handles 3 cases
    // - body is utf8 string
***************
*** 473,478 ****
        this.socket.destroy(e);
        break;
  
      default:
        throw new Error("Uncaught method '" + method.name + "' with args " +
            JSON.stringify(args));
--- 486,497 ----
        this.socket.destroy(e);
        break;
  
+     case methods.connectionCloseOk:
+       if (this.socket) {
+         this.socket.end();
+       }
+       break;
+ 
      default:
        throw new Error("Uncaught method '" + method.name + "' with args " +
            JSON.stringify(args));
***************
*** 556,562 ****
    });
  
    // Proxy a few methods that we use / previously used.
-   var methods = ['end', 'destroy', 'write', 'pause', 'resume', 'setEncoding', 'ref', 'unref', 'address'];
    _.each(methods, function(method){
      self[method] = function(){
        self.socket[method].apply(self.socket, arguments);
--- 575,581 ----
    });
  
    // Proxy a few methods that we use / previously used.
+   var methods = ['destroy', 'write', 'pause', 'resume', 'setEncoding', 'ref', 'unref', 'address'];
    _.each(methods, function(method){
      self[method] = function(){
        self.socket[method].apply(self.socket, arguments);

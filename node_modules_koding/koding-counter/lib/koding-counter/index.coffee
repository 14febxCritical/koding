
module.exports = class KodingCounter

  {extend} = require 'underscore'

  constructor: (options) ->
    return new KodingCounter options  unless this instanceof KodingCounter
    {@counterName, @db, collectionName, offset} = options
    @collectionName = collectionName ? 'counters'
    @offset         = offset ? 0

  wrap = (callback) -> (err, doc)-> callback err, (doc?.seq - 1) or 0

  getCollection: -> @db.collection @collectionName

  update:->
    switch arguments.length
      when 1
        [update] = arguments
      when 2
        [update, callback] = arguments
      when 3
        [query, update, callback] = arguments

    callback  ?= ->
    options   = { new: yes, upsert: yes }
    query     ?= {}
    query     = extend { _id: @counterName }, query
    sort      = [['_id', 'desc']]

    @getCollection().findAndModify query, sort, update, options, callback

  next: (callback) -> @update { $inc: seq: 1 }, wrap callback

  count: (callback) ->
    @getCollection().findOne { _id: @counterName }, { seq:1 }, (err, counter)->
      return callback err  if err
      callback null, counter?.seq ? 0

  reset: (isHard, callback) ->
    [isHard, callback] = [callback, isHard]  unless callback
    return @update { $set: seq: @offset }  if isHard

    selector    = { seq: $gt: @offset }

    @getCollection().count selector, (err, count)=>
      console.log { err, count }
      if err then callback err
      else if count is 0
        @update selector, { $set: seq: @offset }, wrap callback
      else callback null
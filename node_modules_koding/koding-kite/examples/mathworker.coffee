# kite worker example
{kite} = require 'koding-kite'

main = ()->
  options = new kite.Options {
              Kitename:    "mathworker"
              Version:     "0.0.1"
              Port:        "9999"
              Region:      "localhost"
              Environment: "development"
              PublicIP:    "127.0.0.1"
              Username:    "devrim"
          }

  mathWorker = kite.New options
  # lets attach our handlers...
  mathWorker.HandleFunc "square", square
  mathWorker.HandleFunc "squareSync", squareSync
  mathWorker.HandleFunc "doubleSquare", doubleSquare
  mathWorker.HandleFunc "squareWithError", squareWithError
  mathWorker.start ->

# you can write handlers in async/nodejs way
square = (request, callback)->
  request.RemoteKite.Go "log", "received args"
  callback null, request.Args * request.Args

# or you can also do it in sync fashion
# as in Go kites.
squareSync = (request)->
  return request.Args * request.Args

# more sync style, you can use fibers, so you can
# wait a callback from db etc. and continue and return result in future
doubleSquare = (request)->
  double = 0
  fiber = kite.Fiber.current
  setTimeout ()->
    console.log "1 second later"
    double = 2  # we set double 1 second later, after db callback perhaps
    fiber.run() # then continue execution
  , 1000
  kite.Fiber.yield() # stop here
  return request.Args * request.Args * double # then return our result

# want to return an error, just throw it as usual
squareWithError = (request)->
  if request.Args is 12
    throw new kite.KiteError "We dont like 12" # throwing error will not kill your process
  return request.Args * request.Args

main()
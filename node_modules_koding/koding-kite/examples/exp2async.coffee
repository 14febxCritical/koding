# this is just an example for a client
{kite, KiteEventListener} = require 'koding-kite'

eventListener = new KiteEventListener
eventListener.on "REGISTER", (kite)->
  console.log "received kite event register", kite

eventListener.on "DEREGISTER", (kite)->
  console.log "received kite event deregister", kite

options = new kite.Options {
                Kitename:    "application",
                Version:     "0.0.1",
                Port:        9998,
                Region:      "localhost",
                Environment: "development",
                Username:    "devrim",
        }

k = kite.New options
k.start ()->

  query = new kite.KontrolQuery {
    Username:    "devrim",
    Environment: "development",
    Name:        "mathworker",
  }

  k.Kontrol.getKites query, eventListener, (err, kites)->
      throw "Error while getting kite list #{err}" if err
      throw "no available kite worker" if not Array.isArray(kites) or kites.length is 0
      # connecting to first avail kite
      mathWorker = kites[0]
      mathWorker.dial ()->

        # you can call a remote function in async fashion
        value = 345
        mathWorker.tell "square", value, (r)->
          [err, data] = r.Args
          if err
            console.log "received error from kite ", err
            return
          console.log "square of #{value} is #{data}"

        # you can use sync style as in Go kites, just wrap your block
        # with kite.sync helper
        kite.sync ()->
          squareOf = (i)->
            [r, err] = mathWorker.tell "square", i
            if err
              console.error "we received an error from mathWorker #{err}"
            else
              console.log "square of #{i} is #{r.Args[1]}"
          squareOf(1234)

        # for sake of completeness, we will call sync style functions in kite
        mathWorker.tell "doubleSquare", 12, (r)-> console.log "double square returned ", r.Args

        # throwing error in sync style
        mathWorker.tell "squareWithError", 12, (r)-> console.log "squareWithError returned ", r.Args

        # simple sync style
        mathWorker.tell "squareSync", 12, (r)-> console.log "squareSync returned ", r.Args


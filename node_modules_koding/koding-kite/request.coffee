class Request
  constructor: (@options)->
    @method = @options.method
    @args = @options.args
    @localKite = @options.localKite
    @remoteKite = @options.remoteKite
    @username = @options.userName
    @authentication = @options.authentication
    @remoteAddr = @options.remoteAddr

class RequestFilter
  constructor: (@worker)->
  run: (request, next)->
    next null, request

class AuthenticateFilter extends RequestFilter
  run: (request, callback)->
    authenticator = @worker.authenticators[request.authentication?.type]
    if not authenticator
      return callback "wrong/unsupported authentication type request", request

    authenticated = authenticator.authenticate(request.authentication.key, @worker.environment.kodingKey())
    if not authenticated or authenticated.kiteId is not @worker.uuid
      return callback "couldnt authenticate request", request

    validUntil = new Date(authenticated.validUntil)
    now = new Date
    if validUntil < now
      return callback "couldnt authenticate request - token expired", request

    request.username = authenticated.username

    callback null, request

class RequestFilters
  # this is a simple filter chain,
  # we pass every request to filters,
  # so filters can decide if the request is authenticated,
  # or should be cancelled, and they can modify the request.
  #
  # example:
  #
  # class AuthenticateFilter
  #   run: (request, next)->
  #     request.user = {id:1, name:"foo"}
  #     next(null, request)
  #
  # f = new RequestFilters [new SomeFilter, new AnotherFilter, new AuthenticateFilter]
  # f.runFilters {}, (err, request)->
  #    console.log "#{err} - #{request}"
  #
  constructor: (filters)->
    @filters = []
    if filters
      @addFilters filters

  addFilters: (filters)->
    @filters.push filters...

  addFilter: (filter)->
    @filters.push filter

  runFilters: (request, callback)->
    cnt = 0
    self = this
    next = (err, request)->
      if err
        return callback err, request
      cnt++
      if self.filters[cnt]?
        self.filters[cnt].run request, next
      else
        callback null, request
    @filters[0].run request, next

module.exports.Request            = Request
module.exports.RequestFilter      = RequestFilter
module.exports.RequestFilters     = RequestFilters
module.exports.AuthenticateFilter = AuthenticateFilter
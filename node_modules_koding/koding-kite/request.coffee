{KiteError} = require './errors'

class Request
  constructor: (@options)->
    @method         = @options.method
    @args           = @options.args
    @localKite      = @options.localKite
    @remoteKite     = @options.remoteKite
    @username       = @options.userName
    @authentication = @options.authentication
    @remoteAddr     = @options.remoteAddr

    # go returns an error struct as the first argument for an error
    # > { type: 'serverError',
    # >   message: 'Timeout',
    # >   error: { [Function] id: 2 } }
    # we wrap this into a KiteError and send it to our callback
    if @args[0]? and typeof(@args[0]) is "object" and @args[0].type?
      if @args[0].type.indexOf("Error")
        # we replace error struct with a KiteError
        @args[0] = new KiteError @args[0]

class RequestFilter
  constructor: (@worker)->
  run: (request, next)->
    next null, request

class AuthenticateFilter extends RequestFilter
  run: (request, callback)->
    session = {}
    authenticator = @worker.authenticators[request.Authentication?.type]
    if not authenticator
      return callback new KiteError("wrong/unsupported authentication type request"), request

    authenticated = authenticator.authenticate(request.Authentication.key, @worker.environment.kodingKey(), session)
    if not authenticated
      return callback new KiteError("couldnt authenticate request"), request

    if session.token.kiteId is not @worker.uuid
      return callback new KiteError("couldnt authenticate request, wrong kite id"), request

    validUntil = new Date(session.token.validUntil)
    now = new Date
    if validUntil < now
      return callback new KiteError("couldnt authenticate request - token expired"), request

    request.username = session.token.username
    callback null, request

class RequestFilters
  # this is a simple filter chain,
  # we pass every request to filters,
  # so filters can decide if the request is authenticated,
  # or should be cancelled, and they can modify the request.
  #
  # example:
  #
  # class AuthenticateFilter
  #   run: (request, next)->
  #     request.user = {id:1, name:"foo"}
  #     next(null, request)
  #
  # f = new RequestFilters [new SomeFilter, new AnotherFilter, new AuthenticateFilter]
  # f.runFilters {}, (err, request)->
  #    console.log "#{err} - #{request}"
  #
  constructor: (filters)->
    @filters = []
    if filters
      @addFilters filters

  addFilters: (filters)->
    @filters.push filters...

  addFilter: (filter)->
    @filters.push filter

  runFilters: (request, callback)->
    cnt = 0
    self = this
    next = (err, request)->
      if err
        return callback err, request
      cnt++
      if self.filters[cnt]?
        self.filters[cnt].run request, next
      else
        callback null, request
    @filters[0].run request, next

module.exports.Request            = Request
module.exports.RequestFilter      = RequestFilter
module.exports.RequestFilters     = RequestFilters
module.exports.AuthenticateFilter = AuthenticateFilter

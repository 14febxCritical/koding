fs                = require 'fs'
os                = require 'os'
path              = require 'path'
uuid              = require 'node-uuid'
crypto            = require "crypto"
WebSocket         = require 'ws'
WebSocketServer   = require('ws').Server
{env}             = process
{EventEmitter}    = require 'events'
{Scrubber, Store} = require 'koding-dnode-protocol'
Environment       = require './environment'
{Client, Kontrol} = require './client'
uuid              = require 'node-uuid'
{Request, RequestFilter, RequestFilters, AuthenticateFilter} = require './request'
{KiteError} = require './errors'
{decrypt} = require './utils'

log4js = require 'log4js'
logger = log4js.getLogger()

noop = ()->

class Authenticator
  constructor: ()->
  authenticate: (token, kodingKey, session)->
    return false

class KodingKeyAuthenticator extends Authenticator
  authenticate: (token, kodingKey, session)->
    return token is kodingKey

class TokenAuthenticator extends Authenticator
  authenticate: (token, kodingKey, session)->
    decryptedToken = decrypt(token, kodingKey)
    if not decryptedToken
      return false
    session.token = JSON.parse decryptedToken
    return true

class KiteConnectionWrapper extends EventEmitter
  constructor: (@client, @worker)->
  callRemote: (method, args, callback=noop)=>
    scrubber = new Scrubber @worker.localStore
    # adding required stuff
    payload = {}
    payload.kite =
      name: @worker.kitename
      username: @worker.environment.userName()
      id: @worker.uuid
      environment: @worker.environment.environment()
      region: @worker.environment.region()
      version: @worker.environment.version()
      hostname: @worker.environment.hostname()
      publicIP: ""
      port: @worker.port.toString()
    payload.withArgs = args
    payload.authentication =
      type: "kodingKey",
      key: @worker.environment.kodingKey()

    scrubber.scrub [payload, callback], =>
      scrubbed = scrubber.toDnodeProtocol()
      scrubbed.method = method
      logger.debug "sending to connected client: #{JSON.stringify scrubbed}"
      @client.send JSON.stringify scrubbed

class Kite extends EventEmitter
  constructor: (@options={})->
    @kiteName       = @options.name
    @username       = @options.username
    @localStore     = new Store
    @remoteStore    = new Store
    @environment    = options.environment or new Environment username: @username
    @authenticators =
      'kodingKey': new KodingKeyAuthenticator
      'token'    : new TokenAuthenticator
    @requestFilters = new RequestFilters [new AuthenticateFilter(this)]
    @uuid           = uuid.v4()
    @api            = {}
    @host           = @options.publicIP or "127.0.0.1"
    @port           = @options.port     or "9999"


  callRemote: (client, method, args, callback=noop)=>
    scrubber = new Scrubber @localStore
    # adding required stuff
    options = {}
    options.kite =
      id: @uuid
      name: @options.name
      username: @environment.userName()
      environment: @environment.environment()
      region: @environment.region()
      version: @environment.version()
      hostname: @environment.hostname()
      publicIP: @host
      port: @port.toString()
    options.withArgs = args
    options.authentication = @authentication
    scrubber.scrub [options, callback], =>
      scrubbed = scrubber.toDnodeProtocol()
      scrubbed.method = method
      logger.debug "sending #{JSON.stringify scrubbed}"
      client.send JSON.stringify(scrubbed), (err)->
        if err
          logger.debug "error while sending data", err

  handleFunc: (name, func)->
    @api[name] = func

  run: (callback=noop)->
    worker = this

    @Kontrol = new Kontrol name: @kiteName, port: @port, environment: @environment
    @Kontrol.on 'connected', ()=>
      @Kontrol.callRemote "register", null, (request)->
        [err, data] = request.args
        logger.error "Cannot register to Kontrol", err
      callback.apply this

    @ws = new WebSocketServer host: @host, port: @port
    @ws.on 'connection', (client)=>
      client.remoteStore = new Store
      do (client)->
        client.on 'message', (data)=>
          scrubbed = JSON.parse data
          scrubber = new Scrubber worker.localStore
          unscrubbed = scrubber.unscrub scrubbed, (callbackId)->
            unless client.remoteStore.has(callbackId)
              client.remoteStore.add callbackId, (args...)->
                worker.callRemote client, callbackId, args
            return client.remoteStore.get callbackId

          if worker.api.propertyIsEnumerable(scrubbed.method) and 'function' is typeof worker.api[scrubbed.method]
            callback = worker.api[scrubbed.method]
          else
            # this is a client tell callback
            callback = worker.localStore.get(scrubbed.method)
            callback.apply unscrubbed
            # we dont have anything else to do here
            return

          clientCallback = unscrubbed[1]

          options =
            localKite: worker,
            remoteKite: new KiteConnectionWrapper(client, worker),
            method: scrubbed.method,
            args: unscrubbed[0].withArgs,
            username: null, # <-- this will be added by authentication filter
            authentication: unscrubbed[0].authentication
          request = new Request options

          worker.requestFilters.runFilters request, (err, request)->
            return clientCallback err, null if err

            if callback
              callback request, clientCallback

module.exports.RequestFilter  = RequestFilter
module.exports.RequestFilters = RequestFilters
module.exports.Kite           = Kite

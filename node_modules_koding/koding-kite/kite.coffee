fs = require 'fs'
os = require 'os'
path = require 'path'
uuid = require 'node-uuid'
WebSocket = require 'ws'
WebSocketServer = require('ws').Server
{env} = process
{EventEmitter} = require 'events'
{Scrubber, Store} = require 'koding-dnode-protocol'


noop = ->

generateUUID = ()->
  uuid.v4()

runWithTimeout = (scope, timeout, fn)->
  # if fn is not called within spesified time,
  # calls fn with err
  # timeout is in seconds
  isFnCalled = false
  setTimeout ()->
    if not isFnCalled
      fn "Kite worker didnt return in time", null
  , timeout * 1000
  return (args...)->
    isFnCalled = true
    fn.apply scope, args

class Environment
  constructor: (@options={})->
    @basePath = path.join env.HOME || env.HOMEPATH || env.USERPROFILE, ".kd"
    @options.username     or= env.USER
    @options.version      or= "1"
    @options.environment  or= "development"
    @options.region       or= "localhost"
    @options.kontrolAddress or= 'ws://localhost:4000/dnode'

  readKeyFile: ()->
    kodingKey = fs.readFileSync path.join @basePath, "koding.key"
    kodingKey.toString().replace(/\n$/, '')

  userName: ->@options.username
  hostname: -> os.hostname()
  version: -> @options.versions
  environment: -> @options.environment
  region: -> @options.region
  kontrolAddress: -> @options.kontrolAddress

class Client extends EventEmitter
  constructor: (@options={})->
    @localStore = new Store
    @remoteStore = new Store

    @options.name        or= "application"
    @options.port        or= "1234"
    @options.environment or= new Environment
    @options.api         or= {}

    @environment  = @options.environment
    @kodingKey    = @environment.readKeyFile()
    @uuid         = @options.uuid or generateUUID()

    if @options.host? and @options.port?
      @remoteAddr = "ws://#{@options.host}:#{@options.port}/dnode"
    else
      @remoteAddr = @options.url or @environment.kontrolAddress()

    @api =
      heartbeat: (k)->
        remoteFn = k.withArgs[1]
        setInterval ()->
          remoteFn()
        , 1000

    for k, fn of @options.api
      @api[k] = fn

    for k, fn of @constructor.prototype
      if @constructor.prototype.propertyIsEnumerable(k) and 'function' is typeof this.api[k]
        @api[k] = fn
    delete @api['constructor']

  connect: (callback=noop)->
    @ws = new WebSocket @remoteAddr
    self = this
    @ws.on 'open', ()->
      console.log "connected to ", self.remoteAddr
      self.emit 'connected'
      callback(self)

    @ws.on 'message', (data, flags)->
      # now we descrub message and call our callback function
      scrubbed = JSON.parse data
      scrubber = new Scrubber self.localStore
      unscrubbed = scrubber.unscrub scrubbed, (callbackId)->
        unless self.remoteStore.has(callbackId)
          self.remoteStore.add callbackId, (args...)->
            self.callRemote callbackId, args

        self.remoteStore.get callbackId

      if self.api.propertyIsEnumerable(scrubbed.method) and 'function' is typeof self.api[scrubbed.method]
        callback = self.api[scrubbed.method]
      else
        callback = self.localStore.get(scrubbed.method)

      if callback
          callback.apply self, unscrubbed

  callRemote: (method, args, authentication, callback=noop)=>
    scrubber = new Scrubber @localStore
    # adding required stuff
    payload = {}
    payload.kite =
      name: @options.name
      username: @environment.userName()
      id: @uuid
      environment: @environment.environment()
      region: @environment.region()
      version: @environment.version() # <--- this should always be a string, dont ask me why, its not an integer
      hostname: @environment.hostname()
      publicIP: "" # <-- we dont have a listening ip/port for a client
      port: @options.port.toString() # <-- port should be string, we dont need a listening ip and port for a client
    payload.withArgs = args
    payload.links = []

    if authentication
      payload.authentication = authentication
    else
      payload.authentication =
        type: "kodingKey",
        key: @kodingKey

    scrubber.scrub [payload, callback], =>
      scrubbed = scrubber.toDnodeProtocol()
      scrubbed.method = method
      message = JSON.stringify scrubbed
      console.log "sending:", message
      @ws.send message

  getKites: (options={}, callback=noop)->
    # these are query options for getKites, not to be confused with
    # environment options
    # we ask, getKites({name: "mathworker", version: "1"}) so it returns all 
    # mathworkers in version 1
    options.environment or= ""
    options.hostname    or= ""
    options.id          or= ""
    options.name        or= ""
    options.region      or= ""
    options.username    or= @environment.userName()
    options.version     or= ""

    @callRemote "getKites",
      options,
      null,
      (err, kites)->
          callback err, kites

class Authenticator
  constructor: ()->
  authenticate: ()->
    return false

class KodingKeyAuthenticator extends Authenticator
  authenticate: (kodingKey)->
    return true

class TokenAuthenticator extends Authenticator
  authenticate: (token)->
    return true

authenticators =
  'kodingKey': new KodingKeyAuthenticator
  'token': new TokenAuthenticator

class Request
  constructor: (@options)->
    @method = @options.method
    @args = @options.args
    @localKite = @options.localKite
    @remoteKite = @options.remoteKite
    @username = @options.userName
    @authentication = @options.authentication
    @remoteAddr = @options.remoteAddr

class RequestFilter
  run: (request, next)->
    next null, request

class AuthenticateFilter extends RequestFilter
  run: (request, callback)->
    authenticator = authenticators[request[0].authentication?.type]
    if not authenticator
      return callback "wrong/unsupported authentication type request", request

    if not authenticator.authenticate(request[0].authentication.key)
      return callback "couldnt authenticate request", request

    callback null, request

class RequestFilters
  # this is a simple filter chain,
  # we pass every request to filters,
  # so filters can decide if the request is authenticated,
  # should log the request and can modify the request.
  # example:
  #
  # f = new RequestFilters [new DummyFilter, new DummyFilter2, new AuthenticateFilter]
  # f.runFilters {}, ()->
  #    console.log "hello - "
  #
  constructor: (filters)->
    @filters = []
    if filters
      @addFilters filters

  addFilters: (filters)->
    @filters.push filters...

  addFilter: (filter)->
    @filters.push filter

  runFilters: (request, callback)->
    cnt = 0
    self = this
    next = (err, request)->
      if err
        return callback err, request
      cnt++
      console.log ">>> #{cnt}"
      if self.filters[cnt]?
        self.filters[cnt].run request, next
      else
        console.log "calling callback - #{cnt}"
        callback null, request
    @filters[0].run request, next

class Worker extends EventEmitter
  constructor: ()->
    @kiteName = @constructor.kiteName
    @username = @constructor.username
    throw "every worker needs a name" if not @kiteName? and not @kiteName
    @localStore = new Store
    @remoteStore = new Store
    @requestFilters = new RequestFilters [new AuthenticateFilter]

  callRemote: (client, method, args)=>
    scrubber = new Scrubber @localStore
    # adding required stuff
    payload = args
    scrubber.scrub payload, =>
      scrubbed = scrubber.toDnodeProtocol()
      scrubbed.method = method
      message = JSON.stringify scrubbed
      client.send message

  runServer: (@host="localhost", @port=9999)->
    worker = this
    @wss = new WebSocketServer host:@host, port: @port
    @environment = new Environment username: @username
    @kontrolClient = new Client name:@kiteName, port: @port, environment: @environment
    @kontrolClient.on 'connected', ()=>
      console.log "connecting to kontrol"
      @kontrolClient.callRemote "register", null, null, (err, data)->
        console.log "received data", data
    @kontrolClient.connect()

    @wss.on 'connection', (client)->
      client.on 'message', (data)->
        console.log('received: %s', data)
        scrubbed = JSON.parse data
        scrubber = new Scrubber worker.localStore
        unscrubbed = scrubber.unscrub scrubbed, (callbackId)->
          unless worker.remoteStore.has(callbackId)
            worker.remoteStore.add callbackId, (args...)->
              worker.callRemote client, callbackId, args
          worker.remoteStore.get callbackId

        if worker.constructor.prototype.propertyIsEnumerable(scrubbed.method) and 'function' is typeof worker[scrubbed.method]
          callback = worker[scrubbed.method]
        else
          callback = worker.localStore.get(scrubbed.method)

        clientCallback = unscrubbed[1]

        worker.requestFilters.runFilters unscrubbed, (err, unscrubbed)->
          if err
            return clientCallback err, null
          if callback
            options =
              localKite: worker,
              remoteKite: client, # <-- this is subject to change
              method: scrubbed.method,
              args: unscrubbed[0].withArgs,
              username: "nobody",
              authentication: "null"

            request = new Request options
            callback request, runWithTimeout(worker, 2, clientCallback)

module.exports.Worker = Worker
module.exports.Client = Client
{KiteError} = require './errors'

runWithTimeout = (scope, timeout, fn)->
  # if fn is not called within spesified time,
  # calls fn with err
  # timeout is in seconds
  isFnCalled = false
  t = setTimeout ()->
    if not isFnCalled
      fn new KiteError("Kite worker didnt return in time"), null
      isFnCalled = true
  , timeout * 1000
  return (args...)->
    clearTimeout t
    isFnCalled = true
    fn.apply scope, args

getArgNames = (fn)->
  # give a function, it will return its argument list as array
  # f = (foo, bar)->
  # getArgNames(f) # returns ["foo", "bar"]
  r = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg
  s = fn.toString().replace(r, '')
  result = s.slice(s.indexOf('(')+1, s.indexOf(')')).match(/([^\s,]+)/g)
  return if not result?
  result

module.exports.getArgNames = getArgNames
module.exports.runWithTimeout = runWithTimeout

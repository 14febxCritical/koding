uuid              = require 'node-uuid'
WebSocket         = require 'ws'
{env}             = process
{EventEmitter}    = require 'events'
{Scrubber, Store} = require 'koding-dnode-protocol'
Environment       = require './environment'
{Request, RequestFilter, RequestFilters, AuthenticateFilter} =require './request'

noop = ->

module.exports = class Client extends EventEmitter
  constructor: (@options={})->
    @localStore = new Store
    @remoteStore = new Store

    @options.name        or= "application"
    @options.port        or= ""
    @options.environment or= new Environment
    @options.api         or= {}

    @environment    = @options.environment
    @kodingKey      = @environment.readKeyFile()
    @uuid           = @options.uuid or uuid.v4()
    @authentication = @options.authentication or type: "kodingKey", key: @kodingKey

    if @options.host? and @options.port?
      @remoteAddr = "ws://#{@options.host}:#{@options.port}/dnode"
    else
      @remoteAddr = @options.url or @environment.kontrolAddress()

    @api =
      heartbeat: (k)->
        remoteFn = k.withArgs[1]
        setInterval ()->
          remoteFn()
        , 1000

    for k, fn of @options.api
      @api[k] = fn

  handleFunc: (name, func)->
    @api[name] = func

  connect: (callback=noop)->
    @ws = new WebSocket @remoteAddr
    client = this
    @ws.on 'open', ()->
      console.log "connected to ", client.remoteAddr
      client.emit 'connected'
      callback(client)

    @ws.on 'message', (data, flags)->
      # now we descrub message and call our callback function
      scrubbed = JSON.parse data

      scrubber = new Scrubber client.localStore
      unscrubbed = scrubber.unscrub scrubbed, (callbackId)->
        unless client.remoteStore.has(callbackId)
          client.remoteStore.add callbackId, (args...)->
            client.callRemote callbackId, args

        client.remoteStore.get callbackId

      if client.api.propertyIsEnumerable(scrubbed.method) and 'function' is typeof client.api[scrubbed.method]
        callback = client.api[scrubbed.method]
      else
        callback = client.localStore.get(scrubbed.method)

      if callback
          console.log ">>>>> f:", scrubbed.method, unscrubbed
          console.log "--------------------------"
          console.log unscrubbed
          console.log "--------------------------"
          options =
            localKite: null,
            remoteKite: client,
            method: scrubbed.method,
            args: unscrubbed,
            username: null, # <-- this will be added by authentication filter
            authentication: null # <-- this doesnt work right now, waiting for change on go side
          request = new Request options
          console.log ">>>> request.args #{request.args}"
          callback.apply request, [request]
          #callback.apply client, {}

  callRemote: (method, args, callback=noop)=>
    scrubber = new Scrubber @localStore
    # adding required stuff
    options = {}
    options.kite =
      name: @options.name
      username: @environment.userName()
      id: @uuid
      environment: @environment.environment()
      region: @environment.region()
      version: @environment.version() # <--- this should always be a string, dont ask me why, its not an integer
      hostname: @environment.hostname()
      publicIP: "" # <-- we dont have a listening ip/port for a client
      port: @options.port.toString() # <-- port should be string, we dont need a listening ip and port for a client
    options.withArgs = args
    options.authentication = @authentication

    scrubber.scrub [options, callback], =>
      scrubbed = scrubber.toDnodeProtocol()
      scrubbed.method = method
      message = JSON.stringify scrubbed
      console.log "sending:", message
      @ws.send message

  getKites: (query={}, callback=noop)->
    # these are query options for getKites, not to be confused with
    # environment options
    # we ask, getKites({name: "mathworker", version: "1"}) so it returns all 
    # mathworkers in version 1
    query.environment or= @environment.environment()
    query.hostname    or= ""
    query.id          or= ""
    query.name        or= ""
    query.region      or= ""
    query.username    or= @environment.userName()
    query.version     or= ""

    @callRemote "getKites",
      [query, ()->],
      (request)->
        [err, kites] = request.args
        throw "getKites error: #{err}" if err
        clients = []
        for kite in request.args[1]
          kiteOptions =
            environment: @environment
            host: kite.kite.publicIP
            port: kite.kite.port
            authentication:
              type: 'token'
              key: kite.token
          clients.push new Client kiteOptions
          callback err, clients
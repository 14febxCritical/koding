# author: devrim@koding
# 1/7/2013

fs              = require 'fs'
traverse        = require 'traverse'
{EventEmitter}  = require 'events'
nodePath        = require 'path'

class Config extends EventEmitter

  @load: (name)->
    return new Config name

  constructor : (@path)->
    @emit "start"
    
    #
    # assumption is this module is inside ./node_modules on project root
    # there is a folder called ./config at the same level
    # which can be easily agreed upon on any project hence no config for this manager.
    #
    # in the interest of time i didn't do error checks and other nice stuff
    # please go ahead and do it if you like.
    #

    return @check()

  check: ->
    normalizePathForSchema = (path, p=[])->
      (if n - n is 0 then p.push 0 else p.push n) for n, i in path
      return p
    a = @path.split "."
    configType = a.pop()

    @configSchemaPath = nodePath.join __dirname + "/../../config/config.schema.coffee"
    configSchema = require @configSchemaPath
    if configType in ["",undefined,"undefined"]
      @path = a.join(".")+"."+configSchema._selfConfig?.defaultConfig
      console.log "[KONFIG-MANAGER] Default config is set to: '#{configSchema._selfConfig?.defaultConfig}' at config/config.schema.coffee" if @verbose

    @configFilePath   = nodePath.join __dirname + "/../../config/" + @path + ".coffee"

    paths = {}

    configFile = require @configFilePath

    file   = traverse(configFile)
    schema = traverse(configSchema)


    configSchema = schema.get a
    schema = traverse(configSchema)
    # console.log configSchema
    # process.exit()
    
    file.paths().forEach (path)->  
      a = path.join "."
      b = paths[a] ?= {}
      b.schema = schema.has normalizePathForSchema path
      b.file   = yes


    schema.paths().forEach (path)->
      c = path.join "."
      d = paths[c] ?= {}
      d.schema = yes
      try
        d.file   = file.has path
      catch e
        console.log path, e
    
    
    (delete paths[i] if paths[i].schema is yes and paths[i].file is yes) for i, p of paths
    
    info = []
    for i,p of paths
      info.push [{path: i, inConfigSchema: p.schema, inConfigFile: p.file}]
      where = unless p.schema 
         "schema at #{@configSchemaPath} but it's there on #{@configFilePath}" 
        else 
          "file at #{@configFilePath} but it's required in schema."
      console.log "[KONFIG-MANAGER][ERROR] This property:#{i} is not found in #{where}"
    
    err = if info.length > 0 then yes else no    
    process.nextTick => @emit "result", err, info    
    process.exit() if err
    return configFile    

module.exports = Config

# config = new Config "kite.databases.config-prod-new"
# config = new Config "main.prod-new"
# config.on "result",(err,info)->
  #console.log err,info

















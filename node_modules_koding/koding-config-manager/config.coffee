# author: devrim@koding
# 1/7/2013

fs              = require 'fs'
traverse        = require 'traverse'
nodePath        = require 'path'
{extend}        = require 'underscore'
JsPath          = require 'jspath'

class Config
  #
  # assumption is this module is inside ./node_modules on project root
  # there is a folder called ./config at the same level
  # which can be easily agreed upon on any project hence no config for this manager.
  #
  # in the interest of time i didn't do error checks and other nice stuff
  # please go ahead and do it if you like.
  #
  @load: (name)->
    config = @check name
    config.__proto__ = @prototype
    return config

  @printJson:(name)->
    console.log JSON.stringify @load name

  @check =(path)->
    normalizePathForSchema = (aPath, p=[])->
      (if n - n is 0 then p.push 0 else p.push n) for n, i in aPath
      return p
    a = path.split "."
    configType = a.pop()

    configSchemaPath = nodePath.join __dirname + "/../../config/config.schema.coffee"
    configSchema = require configSchemaPath
    if configType in ["",undefined,"undefined"]
      path = a.join(".")+"."+configSchema._selfConfig?.defaultConfig
      console.log "[KONFIG-MANAGER] Default config is set to: '#{configSchema._selfConfig?.defaultConfig}' at config/config.schema.coffee" if @verbose

    configFilePath   = nodePath.join __dirname + "/../../config/" + path + ".coffee"

    paths = {}

    configFile = require configFilePath

    file   = traverse(configFile)
    schema = traverse(configSchema)


    configSchema = schema.get a
    schema = traverse(configSchema)
    # console.log configSchema
    # process.exit()
    
    file.paths().forEach (aPath)->  
      a = aPath.join "."
      b = paths[a] ?= {}
      b.schema = schema.has normalizePathForSchema aPath
      b.file   = yes


    schema.paths().forEach (aPath)->
      c = aPath.join "."
      d = paths[c] ?= {}
      d.schema = yes
      try
        d.file   = file.has aPath
      catch e
        console.log aPath, e
    
    
    (delete paths[i] if paths[i].schema is yes and paths[i].file is yes) for i, p of paths
    
    info = []
    for i,p of paths
      info.push [{path: i, inConfigSchema: p.schema, inConfigFile: p.file}]
      where = unless p.schema 
         "schema but it exists on file, please add it to schema." 
        else 
          "file but it's required in schema, please define before proceeding. "
      console.log "[KONFIG][ERROR] [ Property Mismatch : #{i} ] Not found in #{where} [paths: [config/#{@path}.coffee] [./config.schema.coffee]]"
    
    err = if info.length > 0 then yes else no    
    # process.nextTick => @emit "result", err, info    
    process.exit() if err
    return configFile

  getConfigScriptTag:(mixin={})->
    config = extend {}, @client.runtimeOptions, mixin
    """
    <script>var KD = #{JSON.stringify {config}};</script>
    """

module.exports = Config

# config = new Config "kite.databases.config-prod-new"
# config = new Config "main.prod-new"
# config.on "result",(err,info)->
  #console.log err,info

















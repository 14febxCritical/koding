'use strict'

module.exports = class EventBus

  ListenerTree = require './listenertree'

  constructor:(@mq)->
    @tree = new ListenerTree
    @channels = {}
    @counts = {}

  bound: require 'koding-bound'

  dispatch:(routingKey, payload)->
    @tree.emit routingKey, payload

  getRoutingKey =(oid, event)-> "oid.#{oid}.event.#{event}"

  getGenericRoutingKey =(oid)-> "oid.#{oid}.event"

  on:(inst, event, listener)->
    oid = inst.getId()
    unless @channels[oid]?
      @counts[oid] = 0
      genericRoutingKey = getGenericRoutingKey oid
      channel = @channels[oid] = @mq.subscribe genericRoutingKey, isReadOnly: yes
      channel.on event, @dispatch.bind this, getRoutingKey oid, event
      channel.on 'message', console.log.bind(console, 'channel got a message')
    @counts[oid]++
    @tree.on getRoutingKey(oid, event), listener

  off:(inst, event, listener)->
    oid = inst.getId()
    if 0 is --@counts[oid]
      channel = @channels[oid]
      channel.close()
      delete @channels[oid]
    @tree.off getRoutingKey(oid, event), listener
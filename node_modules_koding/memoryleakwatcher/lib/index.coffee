AWS        = require 'aws-sdk'
memwatch   = require 'memwatch'
v8profiler = require 'v8-profiler'

state              = off
bucket             = 'koding-nodejs-runtime-heapsnapshots'
snapshotInterval   = null
latestHeapSnapshot = {}

log = (string) -> console.log "[MemoryLeakWatcher] #{string}"


handleSnapshots = (info) ->

  leakedHeapSnapshot = { content: v8profiler.takeSnapshot() }
  log 'Memory leakage detected ', info
  log 'Snapshot headers: Leaked snapshot:', leakedHeapSnapshot.content.getHeader(), 'Latest snapshot before the leak:', latestHeapSnapshot.content.getHeader()

  date                   = Date.now()
  leakedHeapSnapshot.key = "leakedHeapSnapshot.#{date}.heapsnapshot"
  latestHeapSnapshot.key = "latestHeapSnapshot.#{date}.heapsnapshot"

  s3Upload [leakedHeapSnapshot, latestHeapSnapshot]


s3Upload = (snapshots) ->

  s3Bucket = new AWS.S3 { params: { Bucket: bucket } }
  s3Bucket.createBucket ->

    snapshots.forEach (snapshot) ->
      { key, content } = snapshot

      content.export (err, result) ->
        return log err  if err
        params = { Key: key, Body: result }

        log "Started uploading #{key} to s3 bucket #{bucket}"
        s3Bucket.upload params, (err) ->
          return log err  if err
          log "Successfully uploaded #{key}to s3 bucket #{bucket}"

start = ->

  state = on

  # take an initial snapshot
  latestHeapSnapshot = { content: v8profiler.takeSnapshot() }

  # then take a heap snapshot every minute
  snapshotInterval = setInterval ->
    latestHeapSnapshot = { content: v8profiler.takeSnapshot() }
  , 60000

  memwatch.on 'leak', handleSnapshots
  log "Started watching possible memory leakage for the process with id #{process.pid}"


stop = ->

  state = off

  if snapshotInterval
    clearInterval snapshotInterval

  memwatch.removeListener 'leak', handleSnapshots
  log "Stopped watching possible memory leakage for the process with id #{process.pid}"


setup = (options = {}) ->

  log "To start/stop watching memory profiling send SIGUSR2 to PID #{process.pid}"

  { AWS_KEY, AWS_SECRET } = options

  unless AWS_KEY or AWS_SECRET
    return log 'Missing S3 credentials'

  AWS.config.update { accessKeyId: AWS_KEY, secretAccessKey: AWS_SECRET }

  process.on 'SIGUSR2', ->
    if state is off
    then start()
    else stop()


module.exports = {
  setup
}

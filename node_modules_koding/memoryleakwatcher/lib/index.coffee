memwatch   = require 'memwatch'
v8profiler = require 'v8-profiler'

state              = off
snapshotInterval   = null
latestHeapSnapshot = null


#TODO upload snapshots to s3
handleSnapshots = (info) ->

  leakedHeapSnapshot = v8profiler.takeSnapshot()
  console.log 'Memory leakage detected ', info
  console.log 'Snapshot headers: Leaked snapshot:', leakedHeapSnapshot.getHeader(), 'Latest snapshot before the leak:', latestHeapSnapshot.getHeader()
  console.log 'Leaked snapshot compared to the latest snapshot: ', latestHeapSnapshot.compare leakedHeapSnapshot


start = ->

  state = on

  # take heap snapshot every second
  snapshotInterval = setInterval ->
    latestHeapSnapshot = v8profiler.takeSnapshot()
  , 1000

  memwatch.on 'leak', handleSnapshots
  console.log "Started watching possible memory leakage for the process with id #{process.pid}"


stop = ->

  state = off

  if snapshotInterval
    clearInterval snapshotInterval

  memwatch.removeListener 'leak', handleSnapshots
  console.log "Stopped watching possible memory leakage for the process with id #{process.pid}"


setup = ->
  console.log "To start/stop watching memory profiling send SIGUSR2 to PID #{process.pid}"

  process.on 'SIGUSR2', ->

    if state is off
    then start()
    else stop()


module.exports = {
  setup
}

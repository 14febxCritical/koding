{EventEmitter} = require 'microemitter'

module.exports = class Broker extends EventEmitter
  
  constructor:(@ws)->
    @ws.addEventListener 'message', @bound 'handleMessageEvent'

  handleMessageEvent:(event)->
    {data} = event
    message =\
      try JSON.parse data
      catch e then data
    @emit 'message', message
    @emit 'subscribed', message.routingKeyPrefix  if message.event is 'subscribed'

  bound: require 'koding-bound'

  send:(data) ->
    throw new Error("INVALID_STATE_ERR")  if @ws.readyState is SockJS.CONNECTING
    @ws._transport.doSend JSON.stringify(data)  if @ws.readyState is SockJS.OPEN
    true

  publish:(exchange, routingKey, payload)->
    payload = JSON.stringify payload  unless 'string' is typeof payload
    @send {
      action: 'publish'
      exchange
      routingKey
      payload
    }

  subscribe:(routingKeyPrefix, callback)->
    @send {
      action: 'subscribe'
      routingKeyPrefix
    }

    handler = (prefix)=>
      @off 'subscribed', handler  if prefix is routingKeyPrefix
      callback()

    @on 'subscribed', handler  if callback?

  unsubscribe:(routingKeyPrefix)->
    @send {
      action: 'unsubscribe'
      routingKeyPrefix
    }

window['Broker'] = Broker  if window?
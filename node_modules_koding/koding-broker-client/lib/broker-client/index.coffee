{EventEmitter} = require 'microemitter'

module.exports = class Broker extends EventEmitter
  
  bound: require 'koding-bound'

  constructor:(@ws)->
    @ws.addEventListener 'message', @bound 'handleMessage'

  handleMessage:(event)-> console.log event

  send:(data) ->
    throw new Error("INVALID_STATE_ERR")  if @ws.readyState is SockJS.CONNECTING
    @ws._transport.doSend JSON.stringify(data)  if @ws.readyState is SockJS.OPEN
    true

  publish:(exchange, routingKey, payload)->
    payload = JSON.stringify payload  unless 'string' is typeof payload
    @send {
      action: 'publish'
      exchange
      routingKey
      payload
    }

  subscribe:(exchange, routingKeyPrefix, callback)->

  unsubscribe:->



window['Broker'] = Broker  if window?
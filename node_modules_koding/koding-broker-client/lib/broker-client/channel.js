var Channel, EventEmitter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

EventEmitter = require('./microemitter').EventEmitter;

module.exports = Channel = (function(_super) {

  __extends(Channel, _super);

  function Channel(name, routingKeyPrefix) {
    this.name = name;
    this.routingKeyPrefix = routingKeyPrefix;
  }

  Channel.prototype.publish = function() {
    var rest;
    rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.emit.apply(this, ['publish'].concat(__slice.call(rest)));
  };

  Channel.prototype.bound = require('koding-bound');

  return Channel;

})(EventEmitter);

# lib
ObjectId = require './objectid'
# contrib
Traverse = require 'traverse'


convertComplexSelector = (selector, constructor, type, parents)->
  casted = {}

  for own key, val of selector

    node = selector[key]
    
    casted[key] = switch key
      when '$in', '$nin', '$all'
        ((constructor.castValue i, type) for i in node)
      when '$gt', '$gte', '$lt', '$lte', '$ne'
        constructor.castValue node, type
      when '$or', '$nor', '$and', '$elemMatch', '$not'
        castAll node, constructor, parents
      else
        node # leaving it untouched; moving on.

  return casted

castAll = (selector, constructor, parents = []) ->
  
  casted = {}

  for own key, node of selector
  
    path      = parents.concat key
    pathName  = path.join '.'
    nodeType  = constructor.types?[pathName]
    nodeType ?= ObjectId  if pathName is '_id'

    if nodeType? and node? and 'object' is typeof node
      stop = no

      for op in Object.keys node when /^\$/.test op
        casted[key] = convertComplexSelector node, constructor, nodeType, path
      
        stop = yes
        break

      continue  if stop

    casted[key] = switch

      when key is '_id'                 \
          and 'string' is typeof node   \
          and not nodeType?             \
          and not constructor.dontAutoCastId

        new ObjectId node
      
      when nodeType is String and node instanceof RegExp

        node
      
      when not parents.length and constructor.castValue? and nodeType?

        constructor.castValue node, nodeType
      
      else node

  return casted


module.exports = util =
  asynchronizeOwnMethods:(ofObject)->
    result = {}
    Object.keys(ofObject).forEach (key)->
      if 'function' is typeof fn = ofObject[key]
        result[key] = (rest..., callback)->
          callback fn rest...
    result

  getUnusedKey: do ->
    getCandidate =(key, tryCount)-> key + tryCount
    (keys, key)->
      candidate = key
      tryCount = 0
      while candidate in keys
        candidate = getCandidate key, tryCount++
      candidate

  convertComplexSelector: convertComplexSelector
  castAll: castAll
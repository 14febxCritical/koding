onceReady = (bongo, callback) ->
  return callback null  if bongo.dbClientReady
  bongo.once 'dbClientReady', callback

module.exports = ->
  async       = require 'async'
  { argv }    = require 'optimist'
  KONFIG      = require('koding-config-manager').load("main.#{argv.c}")
  { dash }    = require 'bongo'
  RateLimit   = require('ratelimit.js').RateLimit

  redisClient = require('redis').createClient(
    KONFIG.monitoringRedis.split(':')[1]
    KONFIG.monitoringRedis.split(':')[0]
    {}
  )

  userRules   = KONFIG.nodejsRateLimiter.userRules
  rateLimiter = new RateLimit(redisClient, rules)

  bongo = this

  sendMetrics = (start, message) ->

    duration   = new Date() - start
    { method } = message
    bongo.metrics.sendMethodMetrics { method, duration }


  rateLimit = (id, callback) ->

    return callback no  unless KONFIG.nodejsRateLimiter.enabled

    if /^guest-/.test id
      guestRules = KONFIG.nodejsRateLimiter.guestRules
      rateLimiter.rules = rateLimiter.convertRules guestRules

    rateLimiter.incr id, (err, isRateLimited) ->
      console.log "Rate limit error occurred: #{err}"  if err
      callback isRateLimited


  process = (req, client, callback) ->

    [client, callback] = [null, client]  unless callback

    { channelName, queue } = req.body

    responses = new Array queue.length

    workQueue = queue.map (message, i) -> ->

      start = new Date()
      bongo.handleRequest channelName, { message, client }, (secretName, callbackId, args) ->

        sendMetrics start, message  if bongo.metrics

        bongo.scrubResponse callbackId, args, (message) ->
          responses[i] = message
          workQueue.fin()

    dash workQueue, -> callback responses

  (req, res, next) ->

    { sessionToken, userArea, queue } = req.body

    unless queue?.length
      return res.status(400).end()

    sendResponse = (payload) -> res.send payload

    if sessionToken and userArea
      onceReady bongo, ->
        bongo.fetchClient sessionToken, userArea, (client) ->
          unless client
            console.log "bongo.fetchClient: #{sessionToken} not found in #{userArea}"
            return res.status(500).send 'An error occcurred'

          rateLimit client.username, (isRateLimited) ->
            return res.status(403).send 'Rate limit exceeded'  if isRateLimited
            process req, client, sendResponse

    else
      rateLimit sessionToken, (isRateLimited) ->
        return res.status(403).send 'Rate limit exceeded'  if isRateLimited
        process req, sendResponse



###
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@class: bongo
@description: the main klass of the library.
@author: Christopher Thorn <chris@koding.com>
###

{EventEmitter} = require 'events'

module.exports = class Bongo extends EventEmitter
  [READY, NOTREADY] = [0,1]
  # core
  url = require 'url'
  fs = require 'fs'
  nodePath = require 'path'
  # bongo = new EventEmitter
  # client-side boilerplate
  #@client = bongoClient = require 'bongo-client'
  # dnode           = require 'koding-dnode'
  # contrib
  @mongo          = require 'mongoskin'
  {extend}        = require 'underscore'
  @JsPath = JsPath = require 'jspath'
  @Inflector      = require 'inflector'
  # lib
  # the base klass of the library:
  @Base = Base    = require './base'
  # the model klass of the library:
  @Model = Model  = require './model'
  ModelRegistry   = require './modelregistry'
  @ModelCursor    = require './modelcursor'
  # the rest of the basics:
  @Subcollection  = require './subcollection'
  @ObjectId       = require './objectid'
  @ObjectRef      = require './objectref'
  @Validator      = require './validator'
  @Plugin         = require './plugin'
  @Register       = require './register'
  @util           = require './util'

  {daisy, @daisy, @dash, @sequence, @race, @future} = require 'sinkrow'

  {Scrubber, Store} = require 'koding-dnode-protocol'

  @secure =(fn)->
    fn.isSecurityEnabled = yes
    fn
  
  {@asynchronizeOwnMethods} = require './util'
  
  {BongoError}    = require './errortypes'

  Client = require './client'
  
  @throwIt =(it)-> throw it if it?

  constructor:(options)->
    {@mq, @mongo, @queueName, @root, @fetchClient, models} = options
    @setClient @mongo
    @localStore = new Store
    @remoteStore = new Store
    @clients = {}
    @models = {}
    @stack = []
    #@initBlacklist options.blacklist
    @loadModels models
    @on 'error', Bongo.throwIt
    @setMaxListeners 0

  initBlacklist:do ->
    blacklister = (k, v)->
      return  if k in @blacklist
      return v
    (@blacklist=[])->
      if blacklist.length
        @blacklisting = yes
        @replacer = blacklister.bind @

  defineModel:(name, model)->
    @models[name] = model
    model.addBongo @
    @emit 'newModel', name, model
    model.on 'needsPopulated', (def, path)=>
      path = if Array.isArray path then path else path.split '.'
      names = JsPath.getAt def, path
      unless Array.isArray names
        names = [names]
        JsPath.setAt def, path, names
      names.forEach (name, i)=>
        if target = @models[name]
          JsPath.setAt def, path.concat(i), target
      @on 'newModel', (newName, newModel)->
        if newName in names
          JsPath.setAt def, path.concat(names.indexOf newName), newModel

  listModels=(root, modelPath, acc={})->
    path = nodePath.join(root, modelPath)
    stat = fs.statSync path
    if stat.isDirectory()
      names = fs.readdirSync path
      for name in names
        listModels root, nodePath.join(modelPath, name), acc
    else if /(\.coffee|\.js)$/.test path
      acc[path] = NOTREADY
    return acc

  createModelRegistry:(modelPath)->
    acc = {}
    if Array.isArray(modelPath)
      listModels(@root, item, acc)  for item in modelPath
    else
      listModels(@root, modelPath, acc)
    new ModelRegistry acc

  loadModels:(modelPath)->
    @registry = @createModelRegistry(modelPath)
    @registry.forEach (path)=>
      try model = require path
      catch e then return @emit 'error', e
      if model.name? and ('function' is typeof model)
        @defineModel model.name, model
      else
        @defineModel name, konstructor  for own name, konstructor of model
      @registry.setState path, READY
    @emit 'ready'

  getRoutingKey =(inst, event)-> "oid.#{inst.getId()}.event.#{event}"

  handleEvent:(type, ctx, event, rest)->
    switch type
      when 'instance'
        @mq.emit 'updateInstances', getRoutingKey(ctx, event), rest[0], {autoDelete:no}
      when 'static'
        if event is 'global-listener-added'
          [actualEvent, listener] = rest
          @mq.on 'event-'+ctx.name, actualEvent, listener
        else
          [data] = rest
          @mq.emit 'event-'+ctx.name, event, data

  connect:(callback)->
    @mq.ready =>
      @mq.connection.queue @queueName, {autoDelete:no}, (@queue)=>
        queue
          .subscribe((message, headers, deliveryInfo)=>
            {exchange, routingKey} = deliveryInfo
            msg = ''+message?.data
            switch routingKey
              when 'client-message'
                @handleRequest exchange, msg
              when 'client-join'
                @describeApi (api)=>
                  message =
                    method    : 'defineApi'
                    arguments : [api]
                    callbacks : {}
                  @mq.emit exchange, 'server-message', message
                  @handleAuth exchange, msg
          ).addCallback (ok)=> @consumerTag = ok.consumerTag

  disconnect:(callback)->
    {queue} = this
    return callback new BongoError 'You are not connected!'  unless queue?
    queue.unsubscribe(@consumerTag).addCallback -> queue.close()
    delete @consumerTag
    delete @readyState = 0
    delete @queue
    callback null

  handleAuth:(secretName, sessionToken)->
    @emit 'auth', secretName, sessionToken

  handleRequest:(secretName, message)->
    message = JSON.parse(message)
    {method, sessionToken, userArea} = message
    scrubber = new Scrubber @localStore
    unscrubbed = scrubber.unscrub message, (callbackId)=>
      unless @remoteStore.has(secretName+callbackId)
          @remoteStore.add secretName+callbackId, (args...)=>
            @handleResponse secretName, callbackId, args
        @remoteStore.get secretName+callbackId
    # if method is 'fetchApi'
    #   @fetchApi.apply @, unscrubbed
    # else
    @invokeMethod method, unscrubbed, secretName, sessionToken, userArea

  invokeMethod:do->
    ###
    @helper apply()
    @private
    @description - apply the method, conditionally currying the "client" object
    ###
    apply =(bongo, ctx, method, args, sessionToken, userArea)->
      return unless ctx?
      fn = ctx[method]
      if fn.isSecurityEnabled
        bongo.fetchClient sessionToken, userArea, (client)->
          args = [client].concat args
          fn.apply ctx, args
      else
        fn.apply ctx, args
    ###
    @implementation
    ###
    (method, args, secretName, sessionToken, userArea)->
      unless method?
        @handleError 'No such method'
      else if method?.method
        konstructor = Base.constructors[method.constructorName]
        switch method.type
          when 'static'
            if konstructor.hasSharedMethod method.method
              apply @, konstructor, method.method, args, sessionToken, userArea
            else
              @handleError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          when 'instance'
            if konstructor::hasSharedMethod method.method
              if method.id
                konstructor.one? _id: method.id, (err, instance)=>
                  if err
                    @handleError err
                  else
                    apply @, instance, method.method, args, sessionToken, userArea
              else if method.data
                instance = new konstructor data
                apply @, instance, method.method, args, sessionToken, userArea
            else
              @handleError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          else
            @handleError 'Unknown method type!'
      else
        @handleError 'Unknown method type!'

  handleError:(message)->
    @emit 'error',
      if message?.message then {message: message.message}
      else {message}

  handleResponse:(secretName, callbackId, args)->
    scrubber = new Scrubber @localStore
    scrubber.scrub args, =>
      message = scrubber.toDnodeProtocol()
      message.method = callbackId
      @mq.emit secretName, 'server-message', JSON.stringify(message, @replacer)

  getMethodDescription:(name, konstructor)->
    description = konstructor.getSharedMethods()
    description.options =
      broadcastable   : konstructor.getBroadcastable?()
      slugTemplate    : konstructor.slugTemplate
    description

  describeApi:(callback)->
    api = {}
    # share the global constructors
    for own name, konstructor of Base.globalSharedConstructors
      api[name] = @getMethodDescription name, konstructor
    # share the constructors which are specific to this bongo instance
    for own name, konstructor of @models when konstructor.isShared
      api[name] = @getMethodDescription name, konstructor

    @callMiddleware api, -> callback api

  callMiddleware:(api, callback)->
    if @stack.length
      queue = @stack.map (fn)=>=>
        switch fn.length
          when 2 then fn.call @, api, -> queue.next()   # async style
          when 1 then fn.call @, api; queue.next()      # sync style
          else callback new Error "Arity error! (got #{fn.length}; expected 1 or 2)"
      daisy queue, callback
    else
      callback api

  dispatchMethod:(contructorName, method, context, args)->
    # implement dispatch method

  setClient:(rest...)-> Model.setClient rest...
  
  use:(fn...)-> @stack.push fn...

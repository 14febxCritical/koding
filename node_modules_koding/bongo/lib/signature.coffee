class Signature

  { partition } = require './util'

  constructor: (@paramTypes) ->
    for type, i in @paramTypes when type instanceof Rest
      @restParamType    = type
      @restParamIndex   = i
      @paramTypesBefore = @paramTypes[0...i]
      @paramTypesAfter  = @paramTypes[i...@paramTypes.length]
      break

  assert: (params) ->
    return no  unless @assertLength params

    if @restParamType?
      i             = @restParamIndex
      restParamEnd  = params.length - @paramTypesAfter.length
      paramsBefore  = params[0...i]
      restParam     = params[i...restParamEnd]
      paramsAfter   = params[restParamIndex...@paramTypes.length]

      return no  unless @assertEach paramsBefore, @paramTypesBefore
      return no  unless @assertEach restParam,    @restParamType
      return no  unless @assertEach paramsAfter,  @paramTypesAfter
      return yes # by process of elimination...

    else @assertEach params

  assertEach: (params, types = @paramTypes) ->
    for param, i in params when not @assertType param, types[i] ? types
      return no
    return yes

  assertLength: (params) ->
    if    @restParam?
          # rest params can be zero or more in number:
    then  @paramTypes.length - 1 <= params.length
          # otherwise, the length must match exactly:
    else  @paramTypes.length is params.length

  assertType: (param, type) -> switch type
    when Number
      return 'number' is typeof param
    when String
      return 'string' is typeof param
    # NOTE: I don't care about boxed numbers and strings (don't use them).
    # In practice, these will only be called by our own RPC system, which
    # will never use boxed primitives.
    when Function
      return 'function' is typeof param
    # NOTE: I don't care about old safari/chrome RegExp bug.  This is node.js
    # those bugs do not exist here.
    when Object
      return (Object param) is param
    # NOTE: this is, so far as I know, the most specific check we can do.
    else
      if Array.isArray type
        return no  unless Array.isArray param
        return no  for p in param when not @assertType p, type[0]
        # by process of elimination, we know that all elements match the tag:
        return yes
      return no

  @Rest = class Rest
    constructor: (tag) ->
      return new Rest tag  unless this instanceof Rest
      @tag = tag

module.exports = (paramTypes...) -> new Signature paramTypes

exports.Signature = Signature
exports.Rest      = Signature.Rest
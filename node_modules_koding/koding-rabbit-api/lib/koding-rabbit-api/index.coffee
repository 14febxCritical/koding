http = require 'http'
crypto = require 'crypto'
{argv} = require 'optimist'
Object.defineProperty global, 'KONFIG', {
  value: require('koding-config-manager').load("main.#{argv.c}")
}
{kontrold} = KONFIG

mqConfig =
  host     : ''
  login    : ''
  password : ''
  vhost    : ''

apiGet = (method, args, callback) ->
  options =
    host: mqConfig.host
    port: mqConfig.apiPort
    auth: mqConfig.login + ':' + mqConfig.password
    path: '/api/' + method
    method: 'GET'

  req = http.request options, (res) ->
    res.setEncoding 'utf8'
    res.on 'data', (chunk) ->
      callback null, chunk

  req.on 'error', (e) ->
    callback e, null

  req.end()

apiSet = (method, args, callback) ->
  options =
    host: mqConfig.host
    port: mqConfig.apiPort
    auth: mqConfig.login + ':' + mqConfig.password
    path: '/api/' + method
    method: 'PUT'
    headers: {'content-type': 'application/json'}

  req = http.request options, (res) ->
    res.setEncoding 'utf8'

    # rabbit api sends a 204 for succesfull put and delete requests
    if res.statusCode is 204
      callback null, JSON.stringify {ok: "request successful"}
    else
      res.on "data", (chunk) ->
        body = JSON.parse chunk
        if body.error?
          callback body, null

apiSetKontrol = (method, args, callback) ->
  options =
    host: kontrold.rabbitmq.host
    port: "15672"
    auth: kontrold.rabbitmq.login + ':' + kontrold.rabbitmq.password
    path: '/api/' + method
    method: 'PUT'
    headers: {'content-type': 'application/json'}

  # console.log kontrold
  # console.log options.host
  # console.log options.port
  # console.log options.auth

  req = http.request options, (res) ->
    res.setEncoding 'utf8'

    # rabbit api sends a 204 for succesfull put and delete requests
    if res.statusCode is 204
      callback null, JSON.stringify {ok: "request successful"}
    else
      res.on "data", (chunk) ->
        body = JSON.parse chunk
        if body.error?
          callback body, null


  req.on 'error', (e) ->
    console.log e
    callback e, null

  req.write JSON.stringify args
  req.end()

setMQ = (mq) ->
  mqConfig = mq

# Todo combine with function below
newProxyUser = (key, kiteName, callback) ->
  crypto.randomBytes 12, (ex, buf) ->
    username = "kontrolProxy-" + kiteName + "-" + key
    password = buf.toString 'hex'
    vhost    = encodeURIComponent kontrold.rabbitmq.vhost

    args =
      password : password
      tags     : ''

    apiSetKontrol "users/#{username}", args, (err, data) ->
      if err
        callback err, {}
      else
        # console.log "User #{username} is created"
        args2 =
          configure : "^(amq\.gen.*|amq\.default)$" # needed to create amq.gen queue by the client
          write     : "^(amq\.gen.*|amq\.default|kontrol-rabbitproxy)$" #needed to publish to the exchange kontrol-rabbitproxy by the client
          read      : "^(amq\.gen.*|amq\.default|kontrol-rabbitproxy)$" #needed to consume from amq.gen queues by the client
        apiSetKontrol "permissions/#{vhost}/#{username}", args2, (err2, data2) ->
          if err2
            callback err2, {}
          else
            # console.log "Permissions are created"
            callback null, {username: username, password: password}


newUser = (key, kiteName, callback) ->
  crypto.randomBytes 12, (ex, buf) ->
    username = "kite-api-" + kiteName + "-" + key
    password = buf.toString 'hex'
    vhost    = encodeURIComponent mqConfig.vhost

    args =
      password : password
      tags     : ''

    apiSet "users/#{username}", args, (err, data) ->
      if err
        callback err, {}
      else
        args2 =
          configure : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
          write     : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
          read      : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
        apiSet "permissions/#{vhost}/#{username}", args2, (err2, data2) ->
          if err2
            callback err2, {}
          else
            callback null, {username: username, password: password}

rabbitAPI =
  setMQ: setMQ
  newUser: newUser
  newProxyUser: newProxyUser

module.exports = rabbitAPI

http = require 'http'
crypto = require 'crypto'

mqConfig =
  host     : ''
  login    : ''
  password : ''
  vhost    : ''

apiGet = (method, args, callback) ->
  options =
    host: mqConfig.host
    port: mqConfig.apiPort
    auth: mqConfig.login + ':' + mqConfig.password
    path: '/api/' + method
    method: 'GET'

  req = http.request options, (res) ->
    res.setEncoding 'utf8'
    res.on 'data', (chunk) ->
      callback null, chunk

  req.on 'error', (e) ->
    callback e, null

  req.end()

apiSet = (method, args, callback) ->
  options =
    host: mqConfig.host
    port: mqConfig.apiPort
    auth: mqConfig.login + ':' + mqConfig.password
    path: '/api/' + method
    method: 'PUT'
    headers: {'content-type': 'application/json'}

  req = http.request options, (res) ->
    res.setEncoding 'utf8'
    callback null, {}

  req.on 'error', (e) ->
    console.log e
    callback e, null

  req.write JSON.stringify args
  req.end()

setMQ = (mq) ->
  mqConfig = mq

newUser = (key, kiteName, callback) ->
  crypto.randomBytes 12, (ex, buf) ->
    username = "kite-api-" + kiteName + "-" + key
    password = buf.toString 'hex'
    vhost    = encodeURIComponent mqConfig.vhost

    args =
      password : password
      tags     : ''

    apiSet "users/#{username}", args, (err, data) ->
      if err
        callback err, {}
      else
        args2 =
          configure : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
          write     : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
          read      : "^(amq\.gen.*|amq\.default|services-presence|accounting|broker|kite-intra-comm|kite-#{kiteName}-.*)$"
        apiSet "permissions/#{vhost}/#{username}", args2, (err2, data2) ->
          if err2
            callback err2, {}
          else
            callback null, {username: username, password: password}

rabbitAPI =
  setMQ: setMQ
  newUser: newUser

module.exports = rabbitAPI

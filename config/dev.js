// Generated by CoffeeScript 1.3.3
(function() {
  var deepFreeze, fs, mongo, nodePath, projectRoot, rabbitVhost, version;

  fs = require('fs');

  nodePath = require('path');

  deepFreeze = require('koding-deep-freeze');

  version = "0.0.1";

  mongo = 'dev:GnDqQWt7iUQK4M@rose.mongohq.com:10084/koding_dev2';

  projectRoot = nodePath.join(__dirname, '..');

  rabbitVhost = (function() {
    try {
      return fs.readFileSync(nodePath.join(projectRoot, '.rabbitvhost'), 'utf8');
    } catch (e) {
      return "/";
    }
  })();

  module.exports = deepFreeze({
    uri: {
      address: "http://localhost:3000"
    },
    projectRoot: projectRoot,
    version: version,
    webserver: {
      port: 3000,
      clusterSize: 4
    },
    mongo: mongo,
    runBroker: false,
    configureBroker: false,
    buildClient: false,
    misc: {
      claimGlobalNamesForUsers: false,
      updateAllSlugs: false
    },
    uploads: {
      enableStreamingUploads: false,
      distribution: 'https://d2mehr5c6bceom.cloudfront.net',
      s3: {
        awsAccountId: '616271189586',
        awsAccessKeyId: 'AKIAJO74E23N33AFRGAQ',
        awsSecretAccessKey: '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',
        bucket: 'koding-uploads'
      }
    },
    bitly: {
      username: "kodingen",
      apiKey: "R_677549f555489f455f7ff77496446ffa"
    },
    social: {
      numberOfWorkers: 1,
      watch: true
    },
    feeder: {
      queueName: "koding-feeder",
      exchangePrefix: "followable-",
      numberOfWorkers: 2
    },
    client: {
      pistachios: false,
      version: version,
      minify: false,
      watch: true,
      js: "./website/js/kd." + version + ".js",
      css: "./website/css/kd." + version + ".css",
      indexMaster: "./client/index-master.html",
      index: "./website/index.html",
      includesPath: './client',
      useStaticFileServer: false,
      staticFilesBaseUrl: 'http://localhost:3000',
      runtimeOptions: {
        suppressLogs: false,
        version: version,
        mainUri: 'http://localhost:3000',
        broker: {
          apiKey: 'a19c8bf6d2cad6c7a006',
          sockJS: 'http://zb.koding.com:8008/subscribe',
          auth: 'http://localhost:3000/Auth',
          vhost: rabbitVhost
        },
        apiUri: 'https://dev-api.koding.com',
        appsUri: 'https://dev-app.koding.com'
      }
    },
    mq: {
      host: 'zb.koding.com',
      login: 'guest',
      password: 's486auEkPzvUjYfeFTMQ',
      vhost: rabbitVhost,
      vhosts: [
        {
          rule: '^secret-kite-',
          vhost: 'kite'
        }
      ],
      pidFile: '/var/run/broker.pid'
    },
    kites: {
      disconnectTimeout: 3e3,
      vhost: 'kite'
    },
    email: {
      host: 'localhost',
      protocol: 'http:',
      defaultFromAddress: 'hello@koding.com'
    },
    guests: {
      poolSize: 1e4,
      batchSize: void 0,
      cleanupCron: '*/10 * * * * *'
    },
    logger: {
      mq: {
        host: 'zb.koding.com',
        login: 'guest',
        password: 's486auEkPzvUjYfeFTMQ',
        vhost: rabbitVhost
      }
    },
    vhostConfigurator: {
      explanation: "Important!  because the dev rabbitmq instance is shared, you\nneed to choose a name for your vhost.  You appear not to\nhave a vhost associated with this repository. Generally\nspeaking, your first name is a good choice.".replace(/\n/g, ' '),
      uri: 'http://zb.koding.com:3008/resetVhost',
      webPort: 3008
    },
    pidFile: '/tmp/koding.server.pid',
    mixpanel: {
      key: "bb9dd21f58e3440e048a2c907422deed"
    },
    crypto: {
      encrypt: function(str, key) {
        var a, cipher, crypto;
        if (key == null) {
          key = Math.floor(Date.now() / 1000 / 60);
        }
        crypto = require("crypto");
        str = str + "";
        key = key + "";
        cipher = crypto.createCipher('aes-256-cbc', "" + key);
        cipher.update(str, 'utf-8');
        a = cipher.final('hex');
        return a;
      },
      decrypt: function(str, key) {
        var b, crypto, decipher;
        if (key == null) {
          key = Math.floor(Date.now() / 1000 / 60);
        }
        crypto = require("crypto");
        str = str + "";
        key = key + "";
        decipher = crypto.createDecipher('aes-256-cbc', "" + key);
        decipher.update(str, 'hex');
        b = decipher.final('utf-8');
        return b;
      }
    }
  });

}).call(this);

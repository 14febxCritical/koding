processes = new (require "processes")

option '-c', '--config [NAME]', 'Which config file to use.'
option '-s', '--silent', 'Set this flag to suppress stdout'

# We're not relying on Process.restart option anymore. We're going to
# restart a worker only if a backup worker was not already started.

worker_id_next = 0
workers_recovered = []

start_worker = (config) ->
  id = worker_id_next++
  processes.fork
    name  : "socialWorker-#{id}"
    cmd   : "./index -c #{config} --workerid #{id}"
  id

task 'run', ({config, silent}) ->
  KONFIG = require('koding-config-manager').load("main.#{config}")
  {social} = KONFIG

  {numberOfWorkers} = social
  numberOfWorkers ?= numberOfWorkers ? 1

  for _, i in Array +numberOfWorkers
    # Start a worker
    wid = start_worker config

    # If a worker stops accepting new connections, start a backup worker.
    processes.get("socialWorker-#{wid}").on "message", (msg) ->
      if msg?.exiting?
        # Do not start backup worker more than once
        if msg.pid not in workers_recovered
          workers_recovered.push msg.pid

          console.log "[SOCIAL WORKER] A worker has stopped accepting connections, starting new one."

          # Start a backup worker
          start_worker config

    # Start a new worker if a worker dies, unless it has a backup worker.
    processes.on "exit", (cid, name) ->
      if cid in workers_recovered
        workers_recovered.splice workers_recovered.indexOf(cid), 1
      else
        console.log "[SOCIAL WORKER] A worker has died, starting new one."
        start_worker config
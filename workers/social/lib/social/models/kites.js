// Generated by CoffeeScript 1.6.2
var CActivity, JAccount, JKite, KodingError, jraphical, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

jraphical = require('jraphical');

CActivity = require('./activity');

JAccount = require('./account');

KodingError = require('../error');

module.exports = JKite = (function(_super) {
  var Base, Relationship, race, secure, _ref1;

  __extends(JKite, _super);

  function JKite() {
    _ref = JKite.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Relationship = jraphical.Relationship;

  _ref1 = require('bongo'), Base = _ref1.Base, secure = _ref1.secure, race = _ref1.race;

  JKite.share();

  JKite.set({
    permissions: ['read kites', 'create kites', 'edit kites', 'delete kites', 'delete own kites'],
    sharedMethods: {
      instance: ['delete'],
      "static": ['create', 'get', 'fetchAll', 'control']
    },
    schema: {
      description: {
        type: String,
        required: false
      },
      kiteName: {
        type: String,
        required: true
      },
      isPublic: {
        type: String,
        required: false,
        "default": "T"
      },
      count: {
        type: Number,
        required: false,
        "default": 1
      },
      key: {
        type: String,
        required: false
      }
    },
    relationships: function() {
      JAccount = require('./account');
      return {
        creator: {
          targetType: JAccount,
          as: 'owner'
        }
      };
    }
  });

  JKite.create = secure(function(client, data, callback) {
    var crypto, delegate;

    delegate = client.connection.delegate;
    crypto = require('crypto');
    return crypto.randomBytes(32, function(ex1, key) {
      var apiKey, kite,
        _this = this;

      apiKey = key.toString('hex');
      data.key = apiKey;
      kite = new JKite(data);
      return kite.save(function(err) {
        if (err) {
          return callback(err);
        } else {
          return kite.addCreator(delegate, function(err) {
            if (err) {
              return callback(err);
            } else {
              return callback(null, kite);
            }
          });
        }
      });
    });
  });

  JKite.get = secure(function(_arg, data, callback) {
    var delegate, limit, skip, sort,
      _this = this;

    delegate = _arg.connection.delegate;
    limit = data.limit, skip = data.skip, sort = data.sort;
    return Relationship.one({
      as: 'owner',
      targetId: delegate._id,
      sourceId: data.id
    }, function(err, relation) {
      if (err) {
        return callback(err);
      } else {
        return relation.fetchSource(function(err, result) {
          console.log(result);
          return callback(null, result);
        });
      }
    });
  });

  JKite.control = function(data, callback) {
    var limit, skip, sort,
      _this = this;

    limit = data.limit, skip = data.skip, sort = data.sort;
    return this.one({
      key: data.key,
      kiteName: data.kiteName
    }, function(err, data) {
      if (err) {
        return callback(err);
      } else {
        return callback(null, data);
      }
    });
  };

  JKite.fetchAll = secure(function(_arg, options, callback) {
    var delegate, selector,
      _this = this;

    delegate = _arg.connection.delegate;
    selector = {
      targetId: delegate._id,
      sourceName: 'JKite',
      as: 'owner'
    };
    options || (options = {});
    return Relationship.some(selector, options, function(err, relationships) {
      var collectTeasers, relationship, teasers, _i, _len, _results;

      if (err) {
        return callback(err);
      } else if (relationships.length === 0) {
        return callback(null, []);
      } else {
        teasers = [];
        collectTeasers = race(function(i, root, fin) {
          return root.fetchSource(function(err, kite) {
            if (err) {
              callback(err);
              return fin();
            } else if (!kite) {
              return fin();
            } else {
              teasers.push(kite);
              return fin();
            }
          });
        }, function() {
          return callback(null, teasers);
        });
        _results = [];
        for (_i = 0, _len = relationships.length; _i < _len; _i++) {
          relationship = relationships[_i];
          _results.push(collectTeasers(relationship));
        }
        return _results;
      }
    });
  });

  JKite.prototype["delete"] = secure(function(_arg, callback) {
    var delegate;

    delegate = _arg.connection.delegate;
    return this.remove(callback);
  });

  return JKite;

})(jraphical.Module);

module.exports = do->  
  getPusherEvent =(event)->
    if Array.isArray(event)
      event = event.join ':'
    else event

  {defineProperty} = Object
  # ignoredEvents = [
  #   'update'
  #   'ContentMarkedAsLowQuality'
  #   'ContentUnmarkedAsLowQuality'
  #   'PostIsDeleted'
  #   'TagsChanged'
  # ]

  afterInit:do ->
    channels = {}
    ->
      {broadcastable} = @constructor
      id = @getId?() or @bongo_?.instanceId
      if broadcastable and id?
        name = "object-#{id}"
        defineProperty @, "channel"
          get:=> channels[name] or= @mq.subscribe name
        @mq.updateInstanceChannel.on name, (data)=> 
          @update_(data.update) if data.update
  
  destroy:->
    return unless @channel?
    @mq.unsubscribe @channel
  
  on:(event, listener)->
    {constructor} = @
    event = getPusherEvent(event)
    multiplex = @multiplexer.on event, (data)->
      payload = data?[event]
      if payload?
        constructor.wrapArgs [payload], ([arg])-> listener arg
      else if event is 'update'
        listener()
    id = @getId?() or @bongo_?.instanceId
    if id?
      name = "object-#{id}"
      @mq.updateInstanceChannel.on name, multiplex if multiplex and event isnt 'update'

    # @channel.bind event, multiplex if multiplex and event isnt 'update'

  off:(event, listener)->
    getPusherEvent(event)
    @channel.off event, listener
module.exports = do->  
  getPusherEvent =(event)->
    if Array.isArray(event)
      event = event.join ':'
    else event

  {defineProperty} = Object

  afterInit:do ->
    channels = {}
    ->
      {broadcastable} = @constructor
      id = @getId?() or @bongo_?.instanceId
      if broadcastable and id?
        name = "object-#{id}"
        defineProperty @, "channel"
          get:=> channels[name] or= @mq.subscribe name
        @mq.updateInstanceChannel.on name, (data)=> 
          @update_(data.update) if data.update
  
  destroy:->
    return unless @channel?
    @mq.unsubscribe @channel
  
  on:(event, listener)->
    {constructor} = @
    event = getPusherEvent(event)
    multiplex = @multiplexer.on event, ->
      constructor.wrapArgs [].slice.call(arguments), (args)-> listener args...
    @channel.bind event, multiplex if multiplex and event isnt 'update'

  off:(event, listener)->
    getPusherEvent(event)
    @channel.off event, listener
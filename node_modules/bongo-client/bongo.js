/*
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@module: bongo-client
@author: Christopher Thorn <chris@koding.com>
*/
/*
@snippet.
@description: feature-detect the browser.
@todo: is there an improvement?
@foo
*/
var Bongo, isBrowser;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
isBrowser = 'undefined' != typeof window;
console.log(isBrowser);
/*
@class: bongo (client)
@description: client-side bongo.
*/
Bongo = (function() {
  var EventEmitter, JsPath, Model, ModelLoader, Scrubber, Store, Traverse, createBongoName, createId, createRemoteApiShims, dash, dnode, extend, race, sequence, slice, _ref, _ref2, _ref3;
  EventEmitter = require('events').EventEmitter;
  Traverse = require('traverse');
  createId = Bongo.createId = require('hat');
  dnode = require('koding-dnode');
  Bongo.dnodeProtocol = require('koding-dnode-protocol');
  _ref = Bongo.dnodeProtocol, Store = _ref.Store, Scrubber = _ref.Scrubber;
  Bongo.EventEmitter = EventEmitter;
  Model = Bongo.Model = require('./src/model');
  ModelLoader = require('./src/modelloader');
  JsPath = Bongo.JsPath = require('./src/jspath');
  slice = [].slice;
  extend = require('./src/util').extend;
  _ref2 = require('sinkrow'), race = _ref2.race, sequence = _ref2.sequence, dash = _ref2.dash;
  _ref3 = require('sinkrow'), Bongo.daisy = _ref3.daisy, Bongo.dash = _ref3.dash, Bongo.sequence = _ref3.sequence, Bongo.race = _ref3.race, Bongo.future = _ref3.future;
  createBongoName = function() {
    return 'bongo.' + createId();
  };
  createRemoteApiShims = function(api) {
    return api;
  };
  function Bongo(options) {
    this.mq = options.mq;
    this.bongoName = createBongoName();
    this.channelName = 'private-' + this.bongoName;
    this.localStore = new Store;
    this.remoteStore = new Store;
  }
  Bongo.prototype.handleServerMessage = function(message) {
    var callback;
    if (!isNaN(+message.method)) {
      callback = this.localStore.get(message.method);
      if (callback != null) {
        return typeof callback === "function" ? callback(message) : void 0;
      } else {
        throw new Error("Couldn't find the callback: " + message);
      }
    }
  };
  Bongo.prototype.connect = function(callback) {
    this.channel = this.mq.subscribe(this.channelName);
    return this.channel.on('broker:subscription_succeeded', __bind(function() {
      this.channel.on('server-message', this.handleServerMessage.bind(this));
      return callback(null);
    }, this));
  };
  Bongo.prototype.send = function(message, callback) {
    var callbackId;
    if (!this.channel) {
      throw new Error('No channel!');
    } else {
      callbackId = this.localStore.add(callback);
      message.callbackId = callbackId;
      return this.channel.emit('client-message', message);
    }
  };
  Bongo.prototype.disconnect = function(callback) {};
  Bongo.prototype.fetchApi = function(callback) {
    return this.send({
      method: 'fetchApi',
      arguments: []
    }, __bind(function(api) {
      return this.api = createRemoteApiShims(api);
    }, this));
  };
  Bongo.prototype.dispatchMethod = function(constructorName, method, context, args) {};
  Bongo.prototype.use = function() {};
  return Bongo;
})();
if (!isBrowser && module) {
  module.exports = Bongo;
} else {
  if (typeof window !== "undefined" && window !== null) {
    window['Bongo'] = Bongo;
  }
}
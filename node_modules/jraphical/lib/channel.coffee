{Base,Model,secure} = require 'bongo'

Module = require './module'

Message = require './message'

module.exports = class Channel extends Model
  
  @share()
  
  @set
    sharedMethods :
      instance    : ['subscribe','unsubscribe','publish','on']
  
    schema :
      name : String
      meta : require 'bongo/bundles/meta'
    
    # relationships   :
    #   message       :
    #     targetType  : Message
    #     as          : 'forum'

  @channels = {}
  
  @fetchPrivateChannelById =(id, callback)->
    constructor = @
    name = "#{id}_private"
    channel = constructor.channels[name] or= new constructor name
    callback null, channel
  
  @fetchPrivateChannel = secure (client, autoSubscribe, callback)->
    {connection:{delegate}} = client
    [callback, autoSubscribe] = [autoSubscribe, callback] unless callback
    autoSubscribe or= yes
    constructor = @
    name = "#{delegate.getId()}_private"
    channel = constructor.channels[name] or= new constructor name
    channel.subscribe client if autoSubscribe
    callback null, channel
    return

  constructor:(@name)->
    super
    @subscribers = {}
    @constructor.channels[name] = @

  subscribe: secure ({connection})->
    {delegate} = connection
    @subscribers[delegate.getId()] = delegate
  
  unsubscribe: secure ({connection})->
    delete @subscribers[delegate.getId()]
  
  publish: secure ({connection}, message)->
    channel = @
    channel.emit 'message', message
    for own id, subscriber of channel.subscribers
      subscriber.emit? 'message', message, channel
    @
  
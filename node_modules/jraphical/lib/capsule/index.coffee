{Base} = require 'bongo'
Module = require '../module'

module.exports = class Capsule extends Module
  
  @setSchema =(schema)->
    constructor = @
    schema.type =
      type  : String
      get   : -> constructor.name
    Module.setSchema.call @, schema
  
  @setEncapsulatedBy =(constructor)->
    @setCollectionName constructor.getCollectionName()
    @encapsulatedBy = constructor
    constructor.encapsulatedSubclasses or= []
    constructor.encapsulatedSubclasses.push @
  
  @getExactConstructor =(data={})->
    constructor = @
    {type} = data
    if type? and 
       (encapsulatedConstructor = Base.constructors[type]) and
       (encapsulatedConstructor isnt constructor) and 
         ((encapsulatedConstructor.encapsulatedBy is constructor) or
         constructor in encapsulatedConstructor.inheritanceChain())
      encapsulatedConstructor
    else
      constructor
    
  ###
  Querying
  @description: we're overriding the default find methods with a 
    version that will consider the "type" property.
  ###
  {@all, @one, @some} = require './find'
// Generated by CoffeeScript 1.3.3
(function() {
  var BufferedStream, Stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stream = require("stream").Stream;

  module.exports = BufferedStream = (function(_super) {
    var method, _i, _len, _ref;

    __extends(BufferedStream, _super);

    function BufferedStream(limit) {
      this.limit = limit;
      if (typeof limit === "undefined") {
        limit = Infinity;
      }
      this.size = 0;
      this.chunks = [];
      this.writable = true;
      this.readable = true;
    }

    BufferedStream.prototype.pipe = function(dest, options) {
      var _this = this;
      if (this.resume) {
        this.resume();
      }
      Stream.prototype.pipe.call(this, dest, options);
      if (this.piped) {
        return dest;
      }
      process.nextTick(function() {
        _this.chunks.forEach(function(c) {
          return _this.emit("data", c);
        });
        _this.size = 0;
        delete _this.chunks;
        if (_this.ended) {
          return _this.emit("end");
        }
      });
      this.piped = true;
      return dest;
    };

    BufferedStream.prototype.write = function(chunk) {
      if (!this.chunks) {
        this.emit("data", chunk);
        return;
      }
      this.chunks.push(chunk);
      this.size += chunk.length;
      if (this.limit < this.size) {
        return this.pause();
      }
    };

    BufferedStream.prototype.end = function() {
      if (!this.chunks) {
        return this.emit("end");
      } else {
        return this.ended = true;
      }
    };

    _ref = ['pause', 'resume'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      if (!Stream.prototype[method]) {
        BufferedStream.prototype[method] = function() {
          return this.emit(method);
        };
      }
    }

    return BufferedStream;

  })(Stream);

}).call(this);

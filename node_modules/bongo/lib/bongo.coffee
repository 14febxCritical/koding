###
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@class: bongo
@description: the main klass of the library.
@author: Christopher Thorn <chris@koding.com>
###

{EventEmitter} = require 'events'

module.exports = class Bongo extends EventEmitter
  # core
  url = require 'url'
  fs = require 'fs'
  nodePath = require 'path'
  # bongo = new EventEmitter
  # client-side boilerplate
  @client = bongoClient = require 'bongo-client'
  # dnode           = require 'koding-dnode'
  # contrib
  @mongo          = require 'mongoskin'
  {extend}        = require 'underscore'
  @JsPath = JsPath = require 'jspath'
  @Inflector      = require 'inflector'
  # lib
  # the base klass of the library:
  @Base = Base    = require './base'
  # the model klass of the library:
  @Model = Model  = require './model'
  # the rest of the basics:
  @Subcollection  = require './subcollection'
  @ObjectId       = require './objectid'
  @ObjectRef      = require './objectref'
  @Validator      = require './validator'
  @Plugin         = require './plugin'
  @Register       = require './register'
  # @KiteServer     = require './kiteserver'
  @util           = require './util'

  {@daisy, @dash, @sequence, @race, @future} = require 'sinkrow'

  {Scrubber, Store} = require 'koding-dnode-protocol'

  @secure =(fn)->
    fn.isSecurityEnabled = yes
    fn
  
  {@asynchronizeOwnMethods} = require './util'
  
  {BongoError}    = require './errortypes'

  Client = require './client'
  
  @throwIt =(it)-> throw it if it?

  constructor:(options)->
    {@mq, @mongo, @queueName, @root, models} = options
    @setClient @mongo
    @localStore = new Store
    @remoteStore = new Store
    @clients = {}
    @models = {}
    @loadModels models
    @on 'error', Bongo.throwIt

  defineModel:(name, model)->
    @models[name] = model
    @emit 'newModel', name, model
    model.on 'needsPopulated', (def, path)=>
      path = if Array.isArray path then path else path.split '.'
      names = JsPath.getAt def, path
      unless Array.isArray names
        names = [names]
        JsPath.setAt def, path, names
      names.forEach (name, i)=>
        if target = @models[name]
          JsPath.setAt def, path.concat(i), target
      @on 'newModel', (newName, newModel)->
        if newName in names
          JsPath.setAt def, path.concat(names.indexOf newName), newModel

  loadModels:(modelPath)->
    if Array.isArray(modelPath)
      @loadModels(item) for item in modelPath
    else
      path = nodePath.join(@root, modelPath)
      fs.stat path, (err, stat)=>
        if err
          @emit 'error', err
        else if stat.isDirectory()
          fs.readdir path, (err, names)=>
            if err
              @emit 'error', err
            else
              @loadModels(nodePath.join modelPath, name) for name in names
        else if /(\.coffee|\.js)$/.test path
          try model = require path
          catch e
            return @emit 'error', e
          if model.name? and ('function' is typeof model)
            @defineModel model.name, model
          else
            @defineModel name, konstructor for own name, konstructor of model

      # fs.readdir root, (err, names)=>
      #   @emit 'error', err if err
      #   names.forEach (name)=>
      #     modelPath = nodePath.join(root, name)
      #     fs.stat modelPath, (err, info)=>
      #       @emit 'error', err if err
      #       if info.isDirectory()
      #         @loadModels(modelPath)
      #       else
      #         if /(\.coffee|\.js)$/.test modelPath
      #           try model = require modelPath
      #           catch e
      #             return @emit 'error', e
      #           if model.name? and ('function' is typeof model)
      #             @defineModel model.name, model
      #           else
      #             @defineModel name, konstructor for own name, konstructor of model

  connect:(callback)->
    @mq.ready =>
      @mq.connection.queue @queueName, (queue)=>
        console.log 'queue is connected', process.pid, queue
        queue.subscribe (message, headers, deliveryInfo)=>
          {exchange, routingKey} = deliveryInfo
          console.log exchange, routingKey
          msg = ''+message?.data
          switch routingKey
            when 'client-message'
              @handleRequest exchange, msg
            when 'client-auth'
              @handleAuth exchange, msg
            when 'client-join'
              message =
                method    : 'defineApi'
                arguments : [@describeApi()]
                callbacks : {}
              @mq.emit exchange, 'server-message', message


    # @mq.on 'bongo', 'join', (secretName)=>
    #   setTimeout =>
    #     message =
    #       method    : 'defineApi'
    #       arguments : [@describeApi()]
    #       callbacks : {}
    #     @mq.emit secretName, 'server-message', message
    #   , 500
    #   @mq.on secretName, 'client-message', @handleRequest.bind(@, secretName)
    #   @mq.on secretName, 'client-auth', @handleAuth.bind(@, secretName)

  handleAuth:(secretName, clientToken)->
    client = new Client clientToken, secretName
    @clients[secretName] = client
    @emit 'auth', client

  handleRequest:(secretName, message)->
    message = JSON.parse(message)
    {method} = message
    scrubber = new Scrubber @localStore
    unscrubbed = scrubber.unscrub message, (callbackId)=>
      unless @remoteStore.has(secretName+callbackId)
          @remoteStore.add secretName+callbackId, (args...)=>
            @handleResponse secretName, callbackId, args
        @remoteStore.get secretName+callbackId
    if method is 'fetchApi'
      @fetchApi.apply @, unscrubbed
    else
      @invokeMethod method, unscrubbed, secretName

  invokeMethod:do->
    ###
    @helper apply()
    @private
    @description - apply the method, conditionally currying the "client" object
    ###
    apply =(bongo, ctx, method, args, secretName)->
      fn = ctx[method]
      if fn.isSecurityEnabled
        args = [bongo.clients[secretName]].concat args
      fn.apply ctx, args
    ###
    @implementation
    ###
    (method, args, secretName)->
      unless method?
        @handleError 'No such method'
      else if method?.method
        konstructor = Base.constructors[method.constructorName]
        switch method.type
          when 'static'
            if konstructor.hasSharedMethod method.method
              apply @, konstructor, method.method, args, secretName
            else
              @handleError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          when 'instance'
            if konstructor::hasSharedMethod method.method
              if method.id
                konstructor.one? _id: method.id, (err, instance)=>
                  if err
                    @handleError err
                  else
                    apply @, instance, method.method, args, secretName
              else if method.data
                instance = new konstructor data
                apply @, instance, method.method, args, secretName
            else
              @handleError "No such method! #{JSON.stringify method} #{args} #{secretName}"
          else
            @handleError 'Unknown method type!'
      else
        @handleError 'Unknown method type!'

  handleError:(message)->
    @emit 'error',
      if message?.message then {message: message.message}
      else {message}

  handleResponse:(secretName, callbackId, args)->
    scrubber = new Scrubber @localStore
    scrubber.scrub args, =>
      message = scrubber.toDnodeProtocol()
      message.method = callbackId
      @mq.emit secretName, 'server-message', JSON.stringify(message)

  disconnect:(callback)->
    # implement disconnect
  getMethodDescription:(name, konstructor)->
    description = konstructor.getSharedMethods()
    description.options = {
      broadcastable: konstructor.getBroadcastable?()
    }
    description

  describeApi:(callback)->
    api = {}
    # share the global constructors
    for own name, konstructor of Base.globalSharedConstructors
      api[name] = @getMethodDescription name, konstructor
    # share the constructors which are specific to this bongo instance
    for own name, konstructor of @models when konstructor.isShared
      api[name] = @getMethodDescription name, konstructor
    api

  dispatchMethod:(contructorName, method, context, args)->
    # implement dispatch method

  setClient:(rest...)->
    # throw new Error 'unimplemented'
    Model.setClient rest...
  
  pre:-> console.log 'unimplemented'

  fetchApi:(callback)->
    callback null, @describeApi()

  # middlewares_ = {}
  # @applyMiddleware =(event, rest...)->
  #   listeners = middlewares_[event]
  #   if listeners?
  #     listener rest... for listener in listeners
  #   else
  #     [rest..., callback] = rest
  #     callback? rest...
  
  # @pre =(event, listener)->
  #   middlewares_[event] ?= []
  #   middlewares_[event].push listener
  
  # clientCode_ = null
  # # do ->
  # #   # this is Koding's special implementation of dnode-protocol
  # #   {Scrubber} = require 'koding-dnode-protocol'
  # #   Scrubber.use (cursor)->
  # #     {node} = cursor
  # #     if 'function' is typeof node?.toObjectRef and not node.payload_
  # #       cursor.update node.toObjectRef()

  # @Client = Client = require './client'

  # getDelegatedPrototypeInterface_ =(constructor, methodName, client)->
  #   invokeMethod =(instance, args, client)->
  #     if client
  #       constructor::[methodName].apply instance, [client].concat args
  #     else
  #       constructor::[methodName].apply instance, args
  #   (channelId, _id, data, args...)->
  #     refreshClient client, (client)->
  #       if _id?
  #         constructor.one {_id}, (err, instance)->
  #           if err
  #             console.log 'There was an error', err
  #           else if instance?
  #             invokeMethod instance, args, client
  #           else
  #             console.log 'unknown instance', constructor.name, _id
  #       else
  #         # instance = constructor.sharedInstances[data.bongo_?.instanceId] = new constructor data
  #         instance = new constructor data
  #         invokeMethod instance, args, client

  # getClient =(conn)-> new Client conn
  
  # refreshClient =(client, callback)->
  #   bongo.applyMiddleware 'methodIsInvoked', client, callback
  
  # api =(remote, conn)->
  #   conn.on 'end', ->
  #     Kite.removeById conn.remoteId
  #     bongo.emit 'clientDidDisconnect', conn
    
  #   fetchInstance:(constructorName, _id, callback)->
  #     konstructor = Base.constructors[constructorName]
  #     if konstructor?.isShared
  #       konstructor?.one {_id}, (err, node)->
  #         if err or !node? then callback err
  #         else
  #           node.payload_ = yes
  #           callback null, node
  #     else callback null
    
  #   fetchApi:(callback)->
  #     api = for own name, constructor of Base.sharedConstructors
  #       {static, instance} = constructor.getSharedMethods()
  #       staticMethods = {}
  #       instanceMethods = {}
  #       rawStaticMethods = []
  #       rawInstanceMethods = []
  #       client = getClient conn
  #       for methodName in static
  #         do (methodName, constructor)->
  #           try
  #             method = constructor[methodName]
  #             rawStaticMethods.push methodName if method.useMQ
  #             boundMethod =
  #               if method.isSecurityEnabled
  #                 (channelId, rest...)->
  #                   refreshClient client, (client)->
  #                     method.apply constructor, [client].concat rest
  #               else
  #                 (channelId, rest...)->
  #                   method.apply constructor, rest
  #             staticMethods[methodName] = boundMethod
  #           catch e
  #             throw new BongoError \
  #               """
  #               Shared method #{methodName} could not be bound.
  #               """
  #       for methodName in instance
  #         try
  #           if constructor::[methodName].useMQ
  #             rawInstanceMethods.push methodName
  #           instanceMethods[methodName] =
  #             getDelegatedPrototypeInterface_ constructor, methodName,
  #               (client if constructor::[methodName].isSecurityEnabled)
  #         catch e
  #           throw new BongoError \
  #             """
  #             Shared method #{methodName} could not be bound.
  #             """
  #       {
  #         name
  #         staticMethods, instanceMethods
  #         rawStaticMethods, rawInstanceMethods
  #         options: {
  #           broadcastable: constructor.getBroadcastable()
  #         }
  #       }
  #     callback api
  
  # @useMQ =(fn)->
  #   fn.useMQ = yes
  #   fn
  
  # @setClient =(overload)->
  #   Model.setClient overload
  #   @

  # @listen =(server, options={})->
  #   {client} = options
  #   client or= '/bongo.js'
  #   delete options.client
  #   dnode(api).listen server, options, (remote, conn)->
  #     remote.fetchClientId? (id)-> conn.remoteId = id
  #   if 'function' is typeof server.listeners
  #     listeners = server.listeners 'request'
  #     server.removeAllListeners 'request'
  #     server.on 'request', (req, res)->
  #       {pathname} = url.parse req.url
  #       if pathname is client
  #         if clientCode_
  #           res.writeHead 200, 'Content-Type': 'text/javascript'
  #           res.end clientCode_
  #         else
  #           fs.readFile "#{bongoClient.browserPath}#{client}", (err, source)->
  #             if err
  #               throw err
  #               res.writeHead 500
  #               res.end "500 - browser code could not be loaded."
  #             else
  #               res.writeHead 200, 'Content-Type': 'text/javascript'
  #               res.end clientCode_ = source
  #       else
  #         listener.call @, req, res for listener in listeners
  #   @
  
  # @fetchChannel =(name, callback)->
  #   Channel = require('./channel') bongo.mq
  #   callback new Channel(name)
  #   
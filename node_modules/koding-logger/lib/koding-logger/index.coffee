{EventEmitter} = require 'events'
amqp = require 'amqp'

module.exports = class KodingLogger extends EventEmitter

  constructor:(@component, @hostname, @amqpOptions, @noisy=no)->
    @routingPrefix = hostname.split('.').reverse().join('.')
    @readyState = 0
    @pendingQueue = []
    @connection = amqp.createConnection(amqpOptions)
    console.log 'amqp options', amqpOptions
    @connection.on 'ready', =>
      console.log 'it worked', @component
      @connection.exchange 'logs',
        durable     : no
        autoDelete  : yes
      , (@exchange)=>
        @readyState = 1
        @logData.apply @, args for args in @pendingQueue
        @pendingQueue = []
        @emit 'ready'

  logData:(name, pid, severity, data)->
    console.log data if @noisy
    if @readyState is 0 
      @pendingQueue.push [name, severity, pid, data]
    else
      console.log 'hey', @component
      routingKey = "#{@routingPrefix}.#{@component}.#{pid}.#{name}.#{severity}"
      @exchange.publish routingKey, data

  logAll:(child, name)->
    child.stdout?.on 'data', @logData.bind(@, name, child.pid, 'stdout')
    child.stderr?.on 'data', @logData.bind(@, name, child.pid, 'stderr')
    child.on 'exit', @logData.bind(@, name, child.pid, 'exit')

  tailTo:(topic, stream)->
    tailLogs = require 'koding-log-tailer'
    [stream, topic] = [topic, stream] unless stream
    tailLogs
      topic       : topic ? "#{@routingPrefix}.#{@component}.#"
      connection  : @connection
    , stream
require "rubygems"
require "bundler/setup"
require 'pusher-client'
require 'net/http'

require './parse_options'

$log = Logger.new($options[:logfile])
#$log.level = Logger::DEBUG
$log.debug "LAUNCHING AN INSTANCE OF THE KITE REQUEST HANDLER"

class KiteRequestHandler
  def initialize(config)
    @config = config
    @socket = PusherClient::Socket.new(config[:key], config)
    krh_channel_name = "private-krh-#{$options[:kite_name]}"
    $log.debug "ADDING join/part HANDLERS: #{krh_channel_name}"
    add_listener(krh_channel_name, 'join')
    add_listener(krh_channel_name, 'part')
    join_all()
    @channels = {}
  end
  
  def join_all()
    File.open(@config[:joined_channels_file], 'r') do |file|
      channels = {}
      while channel = file.read
        if channels[channel].nil?
          join(channel, true)
          channels[channel] = true
        end
      end
    end
  end
  
  def add_to_joined_channels_file(channel)
    File.open(@config[:joined_channels_file], 'a') do |file|
      file.write(channel)
    end
  end
  
  def remove_from_joined_channels_file(channel)
    File.open(@config[:joined_channels_file], 'w+') do |file|
      channels = file.readlines.uniq.select {|line| line != channel}
      file.write(channels.join("\n"))
    end
  end
  
  def join(channel, silent=false)
    $log.debug "XXXXX JOIN"
    $log.debug channel.inspect
    $log.debug "JOINING TO CHANNEL: #{channel['channel']}"
    $log.debug @channels.inspect
    $log.debug channel['channel']
    begin
      $log.debug @channels.has_key? channel['channel']
    rescue => err
      $log.error err
    end
    unless @channels.has_key? channel['channel']
      $log.debug "joining channel #{channel['channel']}"
      @channels[channel['channel']] = true
      add_listener(channel['channel'], 'client-message')
    end
    add_to_joined_channels_file(channel) unless silent
  end

  def part(channel, silent=false)
    $log.debug "PART"
    $log.debug channel.inspect
    $log.debug "PARTING FROM CHANNEL: #{channel['channel']}"
    @socket.unsubscribe(channel['channel'])
    @channels.delete @channels[channel['channel']]
    remove_from_joined_channels_file(channel) unless silent
  end
   
  def add_listener(channel, event)
    @socket.subscribe(channel, 'khr')
    @socket[channel].bind(event) do |msg|
      clean_event = event
      clean_event[/^(client-)?/] = ''
      $log.debug "RECEIVED AN EVENT: #{event} => #{clean_event}"
      begin
        msg_data = JSON.parse(msg)
      rescue
        msg_data = msg
      end
      if respond_to? clean_event
        $log.debug "CLASS IMPLEMENTS A HANDLER: #{clean_event}"
        __send__(clean_event, msg_data) 
      else
        $log.debug "CLASS CAN'T HANDLE EVENT; FORWARDING #{channel} #{event} #{msg}"
        send_request(channel, event,  msg_data)
      end
    end
  end

  def send_request(channel, event, msg)
    if msg.is_a? String
      $log.debug "Don't know how to handle String"
    else
      msg[:username] = channel.split('-')[2]
      $log.debug "got a message #{msg.inspect}"
      $log.debug "sending message to endpoint: #{@config[:kite_uri]}"
      begin
        res = Net::HTTP.post_form(URI.parse(@config[:kite_uri]), msg)
      rescue => err
        $log.debug "ERROR: "+err.inspect
      end
      $log.debug "response: #{res}"
      puts res.body
    end
  end

  def connect
    @socket.connect
  end
end

begin 
  PusherClient.logger = $log
  handler = KiteRequestHandler.new($options)
  handler.connect
rescue => err
  $log.fatal("Caught exception; exiting")
  $log.fatal(err)
end

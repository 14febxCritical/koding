require "rubygems"
require "bundler/setup"
require 'optparse'
require 'pusher-client'
require 'open-uri'
require 'net/http'

class KiteRequestHandler
  def initialize(config)
    @config = config
    @socket = PusherClient::Socket.new(config[:key], config)
    add_listener('private-krh', 'join')
    add_listener('private-krh', 'part')
  end
  
  def join(channel)
    add_listener(channel, 'client-message')
  end

  def part(channel)
    @socket.unsubscribe(channel)
  end
   
  def add_listener(channel, event)
    @socket.subscribe(channel, 'khr')
    @socket[channel].bind(event) do |msg|
      clean_event = event
      clean_event[/^(client-)?/] = ''
      if respond_to? clean_event
        __send__(clean_event, msg) 
      else
        send_request(channel, event,  msg)
      end
    end
  end

  def send_request(channel, event, msg)
    msg[:username] = channel.split('-')[1]
    res = Net::HTTP.post_form(URI.parse(@config[:kite_uri]), msg)
    puts res.body
  end

  def connect
    @socket.connect
  end
end


options = {}
OptionParser.new do |opts|
  opts.banner = 'Spawn a listener for a given channel'
  opts.on('-u', '--kite-uri U') {|u| options[:kite_uri] = u}
  opts.on('-k', '--key K') {|k| options[:key] = k}
  opts.on('-s', '--secret S') {|s| options[:secret] = s}
  opts.on('-l', '--logfile L') {|l| options[:logfile] = l}
end.parse!

PusherClient.logger = Logger.new(options[:logfile])
handler = KiteRequestHandler.new(options)
handler.connect


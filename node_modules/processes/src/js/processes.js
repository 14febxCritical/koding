var EventEmitter, exec, processes,
  __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

exec = require("child_process").exec;

EventEmitter = require("events").EventEmitter;

processes = (function(_super) {

  __extends(processes, _super);

  function processes() {
    processes.__super__.constructor.apply(this, arguments);
  }

  processes.prototype.list = [];

  processes.prototype.run = function(options, callback) {
    var cmd, cp, log, onExit, restart,
      _this = this;
    restart = options.restart, cmd = options.cmd, log = options.log, onExit = options.onExit;
    cp = exec(cmd, callback);
    this.list.push({
      cmd: cmd,
      process: cp,
      pid: cp.pid
    });
    if (log) {
      cp.stdout.on('data', function(data) {
        return console.log(("" + data).replace(/\n+$/, ''));
      });
      cp.stderr.on('data', function(data) {
        return console.log(("" + data).replace(/\n+$/, ''));
      });
    }
    return cp.on('exit', function() {
      onExit(cp.pid);
      if (restart === true) {
        setTimeout((function() {
          return _this.run(options, callback);
        }), restart);
        if (log) {
          return console.log("Restarting the process in " + restart + " msecs.");
        }
      }
    });
  };

  return processes;

})(EventEmitter);

module.exports = new processes;

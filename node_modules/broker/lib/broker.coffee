module.exports = class Broker
    amqp = require 'amqp'
    DELIMITER = 'Î»'

    constructor: (options, callback) ->
        @options = options
        @eventMap = {}
        @connection = amqp.createConnection options
        @connection.on 'ready', callback

    emit: (channel, event, payload, options) ->
        options = {durable: true, autoDelete: false}
        @connection.exchange channel, options, (exchange) ->
            if options
                exchange.publish event, payload, options
            else
                exchange.publish event, payload

    on: (channel, event, listener) ->
        eventMap = @eventMap
        key = channel+DELIMITER+event
        return if eventMap[key]

        options = {durable: true, exclusive: true}
        @connection.queue '', options, (queue) ->
            queue.bind channel, event
            queue.subscribe(listener)
            .addCallback (ok) ->
                ctag = ok.consumerTag
                eventMap[key] = [queue, ctag]

    off: (channel, event, listener) ->
        key = channel+DELIMITER+event
        [queue, ctag] = @eventMap[key]
        queue.unsubscribe(ctag)
        queue.destroy()
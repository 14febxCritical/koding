fs = require("fs")
path = require 'path'

walk = (options, callback) ->
  {dir,compilers} = options
  results = []
  fs.readdir dir, (err, list) ->
    return callback(err)  if err
    pending = list.length
    return callback(null, results)  unless pending
    list.forEach (file) ->
      file = dir + "/" + file
      fs.stat file, (err, stat) ->
        if stat and stat.isDirectory()
          walk file, (err, res) ->
            results = results.concat(res)
            callback null, results  unless --pending
        else
          p = path.normalize(file)
          e = path.extname(file)

          f = 
            file    : p
            extension : e
            stat    : stat
            content : fs.readFileSync p,'utf8'

          results.push f
          callback null, results  unless --pending

class Watcher

  constructor:(options)->

    for groupName,val of options.groups
      do (groupName,val) ->
        for folder in val.folders
          # console.log folder
          do (groupName,folder)->
            walk {group:val,folder},(err,res)->
              console.log res


  initialize:(options,callback)->


a = new Watcher
  groups:
    a :
      folders : ['../../client/app/Helpers/']
      onRead  : (file,callback) ->
      onChange : (change) ->
    # b: 
    #   folders
    # onChange: (groupObject)->





  # compilers :
  #   '.coffee' : (content,callback) ->
  #     callback null, cs.compile content,bare:yes

  # fileExtensions :
  #   coffee : 



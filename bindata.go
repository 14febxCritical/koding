// Code generated by go-bindata.
// sources:
// install-alpha.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installAlphaSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x51\x4f\xdb\x4c\x10\x7c\xbf\x5f\xb1\x98\xe8\xcb\x57\x29\xd8\x81\xc7\x40\x68\x2b\x08\x05\x41\x09\x6a\xd2\x4a\x55\x55\xa1\x8b\xbd\xc6\xa7\x38\x77\xd6\xdd\x39\x69\x78\xe8\x6f\xef\xae\xed\x38\x96\x52\xa4\x3e\xe6\x76\xbc\x33\xbb\x33\x9b\xe3\xa3\xa8\x74\x36\x5a\x28\x1d\xa1\x5e\xc3\x42\xba\x4c\x08\x95\xc2\x0f\x38\x79\x85\xa0\x37\x9b\xdd\xde\x4e\x67\xf3\x00\x7e\x9e\x83\xcf\x50\x0b\x80\x58\x7a\xb8\xb8\x80\xc9\xf4\x46\x3c\xe5\x28\x1d\x42\x61\xcd\x5a\x25\xc8\x00\xb8\x37\x89\xd2\x2f\xf0\xed\x73\xdf\x81\x2a\xe8\x89\xd0\x5b\x53\xc2\x46\x6a\x0f\xde\xc0\xca\x94\xda\x87\xf0\x68\x3c\x56\x45\xc1\xc5\x55\xe9\x3c\x64\x72\x8d\x0c\xb5\xe0\x5c\x06\x45\xb9\x58\xe2\x16\x94\xae\xba\xfe\x8e\x42\x7a\x8c\x64\xe9\x33\x63\xd5\x2b\x26\xcf\x54\x74\x90\x1a\xcb\x65\xd1\x08\x48\xa0\x74\x68\x41\xea\x04\x32\xe3\x88\xe5\x7f\xa6\x19\x11\x44\x39\x70\x1e\x0b\xd8\xa8\x3c\x87\x05\x82\xc5\x95\x59\x13\x9e\xda\x9f\x86\xc3\x77\x82\x87\x01\xc0\x5f\xca\xc3\xa9\x48\x95\x10\xe2\x18\xe6\xc4\x9b\xaa\x1c\x61\x83\xad\x7a\xc7\x1a\x59\x10\x6b\xf3\x46\xac\x96\x89\xb2\x70\x52\xb0\xc0\x94\xc8\x97\xb9\x42\xed\x23\x16\x27\xee\x27\xdf\x6f\xee\x1e\x26\xe3\xc3\x52\xb4\xdf\x6b\xb8\x54\x1e\x43\x7a\xac\x28\xef\xd2\xb6\xb9\xcc\x2d\xca\x64\xcb\x9a\x9c\x77\x83\x66\x86\xd8\xaa\xc2\x43\x62\xd0\xe9\xbe\x07\x8d\x34\x02\xa9\x4a\x0c\xcd\xbc\x25\x84\x7e\x09\x1b\xef\x52\xe8\x35\xfc\x1d\xe7\xaa\xf9\x86\xf5\x7c\xcc\x3e\xde\xeb\x10\x3b\xd3\x75\x6d\xfa\xd7\xd9\xe4\x4b\xd7\xf4\x3d\x9c\x2b\x1f\x7a\xf5\x47\xcd\xa6\x1a\xd9\x77\xd7\x93\xc7\x39\xac\xa5\x05\x92\xaa\x0d\xe9\x2b\xf3\x7c\x00\x32\x49\x40\x02\xd9\x43\x2b\x4c\x73\xf9\x52\xed\x31\x2e\x22\x32\xb4\xc3\x59\x7d\xdc\x65\xac\x1e\x9e\x6f\x1e\x3e\x7e\x1a\x07\x27\x0a\x1a\x40\x6b\x0e\x52\x62\x98\x94\xb3\x12\x5b\xe4\xee\x4a\xe6\x4e\x60\x9c\x19\x08\xb8\xcc\x31\x6c\xe3\xd4\x81\x84\x61\x18\x08\x7e\xeb\xed\x29\x48\x40\x1d\xf3\xfa\xf3\x00\xce\x2e\xff\x3b\x85\x4b\x88\x12\x5c\x47\x3c\x86\x40\x6b\xc7\xbd\xf7\xe7\x50\x29\x0e\x7a\xf4\x33\x20\xe1\x08\xc3\xbf\x5f\xc6\xc4\x5a\xca\x26\xc3\x46\x70\x65\xca\x3c\xa9\x16\x12\x1b\xad\x31\xae\x92\xc4\xda\xdb\xd8\x72\x5a\xa1\x5f\x49\xe8\x87\xd0\x5c\x15\x6a\x57\x5a\x14\xed\x05\x65\xbb\xec\xc5\xc6\x5a\xee\xd2\x86\x7d\x07\xb1\xed\xd5\xb8\xfa\x70\x64\x0d\xea\x3b\xf1\xd6\x01\x51\xbe\xc3\x6e\xfa\x59\x71\xbb\xe3\xe9\xf5\x74\x04\x64\x39\x35\x6b\x14\xaf\x64\x4c\x29\x43\xc8\xd0\xe2\x80\x72\xb7\xd1\xb9\x91\x6c\x6f\x4c\x17\x6c\x56\x50\x87\x7c\xc0\xaa\xa8\x81\xd2\xce\x4b\x3a\x38\xe5\xc3\xaa\xe1\xa3\xd9\xb0\xf3\x87\xed\xe8\x67\x6c\x0a\xd2\xed\x1d\xf0\x41\xf0\x05\x08\x46\x1e\x5a\x34\x8a\xd0\xc7\x11\x83\xa2\xdd\xe9\x04\x54\x6a\xc2\x1e\xfc\x93\x4f\xb5\xc9\x5d\x8b\xe6\x3c\x10\x5d\xb9\x23\xe5\x80\x55\x61\x76\xf5\xc4\x09\x6a\x94\xf2\x1f\x86\x6f\x05\x07\x87\xeb\xaa\xf8\x8e\xde\x3a\xbc\x0e\xe1\xd9\x70\x38\x82\x9d\x74\x20\x87\x5a\x3c\xd3\xd7\x29\x29\x14\x85\xa2\xb1\x39\xdf\xb6\x6c\xf4\x29\x93\xfd\x09\x00\x00\xff\xff\x0a\x5e\xa1\x46\xb3\x05\x00\x00")

func installAlphaShBytes() ([]byte, error) {
	return bindataRead(
		_installAlphaSh,
		"install-alpha.sh",
	)
}

func installAlphaSh() (*asset, error) {
	bytes, err := installAlphaShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install-alpha.sh", size: 1459, mode: os.FileMode(493), modTime: time.Unix(1441322155, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"install-alpha.sh": installAlphaSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"install-alpha.sh": &bintree{installAlphaSh, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


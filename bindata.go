// Code generated by go-bindata.
// sources:
// install-alpha.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installAlphaSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x5f\x4f\xdb\x4e\x10\x7c\xbf\x4f\x31\x98\x48\xfc\x7e\x52\xb0\x43\x1f\x03\x51\x5b\x89\x50\x10\x7f\x52\x35\x14\xa9\xaa\x2a\x74\xb1\xd7\xf8\x14\xe7\xce\xba\x3b\x27\x0d\x0f\xfd\xec\xdd\xb3\x1d\x27\x15\xe2\x2d\xf1\xce\xed\xcc\xee\xcc\x1e\x1f\x25\xb5\xb3\xc9\x42\xe9\x84\xf4\x1a\x0b\xe9\x0a\x21\x54\x8e\x9f\x38\x7d\x45\x34\x98\xcf\xaf\xaf\x67\xf3\xc7\x08\xbf\xce\xe1\x0b\xd2\x02\x48\xa5\xc7\xc5\x05\xa6\xb3\x2b\xf1\xb5\x24\xe9\x08\x95\x35\x6b\x95\x51\x00\xe0\xd6\x64\x4a\xbf\xe0\xe9\xfe\xc4\x41\x55\xfc\x89\xd1\x5b\x53\x63\x23\xb5\x87\x37\x58\x99\x5a\xfb\x18\x0f\xc6\x53\x53\x14\xa1\xb8\xaa\x9d\x47\x21\xd7\x14\xa0\x16\xce\x15\xa8\xea\xc5\x92\xb6\x50\xba\xe9\xfa\x27\x89\xf9\x63\x22\x6b\x5f\x18\xab\x5e\x29\x7b\xe6\xa2\x43\x6e\x6c\x28\x8b\x4e\x40\x86\xda\x91\x85\xd4\x19\x0a\xe3\x98\xe5\xbf\x40\x33\x66\x88\x72\x70\x9e\x2a\x6c\x54\x59\x62\x41\xb0\xb4\x32\x6b\xc6\x73\xfb\xb3\x78\xf4\xbf\x08\xc3\x00\xf4\x5b\x79\x9c\x89\x5c\x09\x21\x8e\xf1\xc8\xbc\xb9\x2a\x09\x1b\xea\xd5\xbb\xa0\x31\x08\x0a\xda\xbc\x11\xab\x65\xa6\x2c\x4e\xab\x20\x30\x67\xf2\x65\xa9\x48\xfb\x24\x88\x13\xb7\xd3\x1f\x57\x37\x77\xd3\xc9\xdb\x52\xb2\xdf\x6b\xbc\x54\x9e\x62\xfe\xd8\x50\xde\xe4\x7d\x73\x59\x5a\x92\xd9\x36\x68\x72\xde\x0d\xbb\x19\x52\xab\x2a\x8f\xcc\x90\xd3\x27\x1e\x9a\x78\x04\x56\x95\x19\x9e\x79\xcb\x08\xfd\x12\x77\xde\xe5\x18\x74\xfc\x07\xce\x35\xf3\x8d\xda\xf9\x02\xfb\x64\xaf\x43\xec\x4c\xd7\xad\xe9\xdf\xe7\xd3\x6f\x87\xa6\xef\xe1\xa1\xf2\x69\xd0\x3e\xea\x36\xd5\xc9\xbe\xb9\x9c\x3e\x3c\x62\x2d\x2d\x58\xaa\x36\xac\xaf\x2e\xcb\x21\x64\x96\x41\x82\xed\xe1\x15\xe6\xa5\x7c\x69\xf6\x98\x56\x09\x1b\x7a\xc0\xd9\x3c\x3e\x64\x6c\x3e\x3c\x5f\xdd\x7d\xfe\x32\x89\x4e\x15\x3a\x40\x6f\xce\xec\x72\x36\x06\xcb\x61\x0b\xb9\x5f\xa0\x5f\xc9\x94\x37\x40\x28\xc8\xd2\x90\x77\xb2\xd1\xa5\x91\x81\x3a\xe5\x74\x99\x15\x5a\x03\x86\x21\x1e\xdc\x40\x69\xe7\x25\x87\x41\xf9\xb8\x69\xf8\x60\x36\x41\xd5\xdb\x76\xfc\x37\x35\x15\x27\xd1\x3b\x04\xb3\x82\x3b\x22\x20\xa3\x66\x09\xe3\x84\x7c\x9a\x84\x42\xb2\xb3\x32\xe2\x52\xb7\xfc\x48\x90\xb5\x93\xc1\xc7\x73\x34\x93\x46\x03\xfe\x1b\xf1\xc0\x84\xd1\xa1\x2f\x69\x61\x10\x45\xfd\xaf\xee\xac\x48\xbb\xda\xd2\xfe\x84\x8a\x5d\xf8\x52\x63\x2d\xa5\x7e\x9f\xf6\x1d\xc4\xf6\x67\xe3\xda\xcb\x91\x2d\x88\x6f\xf1\xbd\x0b\x0a\x01\x0f\x2d\xde\x8e\xd1\x45\x2f\x34\x7a\xba\x8f\xa3\x7f\x75\x1e\x5c\x4a\x33\xd9\xd1\x7b\x91\x6b\x9e\x4c\xad\xe5\x4b\xfd\x30\x1a\x8d\xd1\x77\x67\x69\x3d\x7e\x23\xdb\xc0\xf0\xa2\x15\x47\xba\x9b\xaf\xdc\xf6\x54\xfc\x34\x90\xfd\x0d\x00\x00\xff\xff\x4b\x6c\x91\x78\xad\x04\x00\x00")

func installAlphaShBytes() ([]byte, error) {
	return bindataRead(
		_installAlphaSh,
		"install-alpha.sh",
	)
}

func installAlphaSh() (*asset, error) {
	bytes, err := installAlphaShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "install-alpha.sh", size: 1197, mode: os.FileMode(493), modTime: time.Unix(1441354286, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"install-alpha.sh": installAlphaSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"install-alpha.sh": &bintree{installAlphaSh, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


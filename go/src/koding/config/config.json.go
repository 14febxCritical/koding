// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x95\x4b\x6e\x83\x30\x10\x40\xf7\x9c\xc2\xf2\x3a\xe0\x24\x9b\x4a\x5c\xa5\xca\x82\xe0\x11\xb1\x30\x33\x96\x3f\xa8\x52\x95\xbb\x57\x18\xd2\xda\x51\x53\xb5\x5d\x24\x64\x85\x98\x1f\xcf\xcf\x12\xf3\x5e\x30\xc6\x8f\xa1\xed\xc1\x3b\x5e\xb3\xe9\x95\x31\x6e\xc2\x51\xab\x56\x53\x37\xc5\x5e\x63\x8c\x2d\xb9\x98\x07\x1c\x95\x25\x1c\x00\x7d\x52\x30\xb7\x5a\x92\xa1\xf5\x8a\x90\x6f\xd2\xf8\xd0\x60\xd3\x81\xe4\x9f\xb1\xc3\x57\x9a\x63\x33\x00\xaf\x19\xef\x49\x2a\xec\xca\xe4\xf3\x49\x91\x85\x6e\x9a\x5a\x33\x1e\x5c\x09\x8d\xf3\xe5\xee\x32\xed\xbc\xf9\x13\xa3\x84\x11\x34\x99\x98\xda\x5c\x25\x2e\x9c\x59\xdc\x35\x28\x8f\xf4\xf6\x1b\x78\x09\xe3\x3f\xf8\xe3\xf3\x50\x2c\x27\xe1\x80\xd2\x90\xc2\xf4\x4a\x94\xb9\xcf\x55\x04\xab\x27\xc4\x93\xf7\xc6\xd5\x42\x98\x6a\x3e\x56\xd5\xd2\x20\x4a\xa1\xcc\x2a\x94\x5f\x41\x46\xe7\xfb\x9b\xa4\x45\xd2\xce\x95\x69\x4f\xd0\xf6\xeb\x90\x39\xa3\x3c\x8d\xd1\x1c\x37\xd3\xda\x6b\x0a\xf2\x21\x52\x13\xc6\x08\x21\x7a\xe5\x61\x8d\x4e\x97\xda\xea\x67\xe0\xdc\x2a\xa1\xb7\xa4\x1f\xee\x75\xc6\x78\x2a\xb3\xdf\x21\x67\x6e\x7d\x40\x04\xed\xc0\x8e\x60\xef\x2e\xb8\x16\xc2\x67\xb8\x2b\x34\xbb\xfc\x06\x6e\x73\x5e\x2d\x2d\x4b\xc1\x43\xb2\xb1\x24\x8c\x49\xeb\x34\x75\xb7\x7f\xa9\xb6\xd5\xb6\x8a\x7b\xef\x5c\x9c\x8b\x8f\x00\x00\x00\xff\xff\xc9\x36\xba\x72\x7e\x08\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 2174, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


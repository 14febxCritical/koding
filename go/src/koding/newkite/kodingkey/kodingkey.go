// package kodingkey provides functions for generating koding.key
// and heplers for conversions.
package kodingkey

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"strings"
)

// Number of characters in a koding key whebn converted to string.
// Must be multiple of 8.
const StringLength = 64

// Length of the koding key when converted to []byte.
// We are using base64 conversion and it uses 6/8 of the ASCII table,
// that's the reason of this calculation.
const BytesLength = StringLength * 6 / 8

// KodingKey is a byte representation of a koding.key file
// generated by "kd register" command.
type KodingKey []byte

func NewKodingKey() KodingKey {
	key := make(KodingKey, BytesLength, BytesLength)
	rand.Read(key)
	return key
}

func FromString(s string) (KodingKey, error) {
	s = strings.TrimSpace(s)

	if len(s) != 64 {
		return nil, fmt.Errorf("Length of the koding key must be %s", StringLength)
	}

	return base64.URLEncoding.DecodeString(s)
}

func FromFile(path string) (KodingKey, error) {
	data, err := ioutil.ReadFile(path)
	if err != nil {
		return nil, err
	}

	return FromString(string(data))
}

func (k KodingKey) String() string {
	return base64.URLEncoding.EncodeToString(k)
}

// Code generated by go-bindata.
// sources:
// fullchain.pem
// privkey.pem
// DO NOT EDIT!

package pem

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullchainPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x96\xc9\x96\xa3\x3a\x12\x86\xf7\x3c\x45\xef\x7d\xfa\x18\x63\xc0\x78\x71\x17\x12\x88\xc9\x08\x9b\x79\xd8\x31\x99\xd9\xd8\xc6\x66\x7a\xfa\x26\x33\x6f\x55\x65\x57\xf5\xb9\x9d\xab\x24\x24\x59\x11\xa1\x88\xff\x8b\x7f\x7f\xfc\x41\x24\x29\xfa\xbf\x78\x64\xda\x8a\xa8\xf0\xc0\x46\x9f\x56\x02\x2b\x0a\xda\x54\x3c\x0f\x36\xa7\x1c\x8c\x0a\x04\xb9\x62\x01\xb2\xda\xa4\xb6\xc4\xb1\xd0\xdc\x38\x0a\xd3\x95\xef\x33\x3b\xee\x99\x33\x06\xa4\xc4\x5b\x0f\xc9\x52\xe2\xbd\x60\x20\xc8\x8f\x0e\x20\x30\xea\x26\x7e\x01\x2a\xcc\x75\x17\x82\xc0\x06\x8d\x6b\x63\x33\x18\x45\x10\x08\xae\x61\x9c\xd0\xb8\xc3\xa1\x6f\xdc\x92\x19\x8a\x71\xab\xcf\x99\x0f\x49\x6c\xe1\x51\x31\x3e\xd7\x05\x02\x4d\xf7\x3f\x36\x28\x48\xdc\xa5\x52\x31\x24\x6d\x43\x66\x16\x0c\xf0\x02\x32\x71\x24\x27\xbd\x02\x7b\x5c\x39\x33\xb6\x11\x83\x05\x18\x7d\xd8\x08\xbd\x42\x23\xae\xf0\x4f\x23\x86\xc1\x24\x0a\xc0\xfa\xf2\x08\xdb\x3c\x65\x36\x69\xc9\x3c\x63\xca\xbc\x6b\x2d\x73\x5b\x43\x86\x4a\x05\x74\x98\xd7\x8f\xa2\x2e\x25\xe2\x38\x92\x10\x18\x48\x04\xe0\xcc\x03\x83\x03\x1f\x1b\xf8\xfc\xb4\xfe\x8f\xc0\x18\xed\xca\x58\xee\x19\x17\x21\x47\xd8\xe5\xfd\x63\x28\x83\x17\x13\x24\xc0\x97\xee\xcf\x90\x77\x31\x19\x9c\x08\xbe\x07\x61\x99\xcb\x9e\xcc\xa9\xe6\xe3\xad\xe4\x52\x2a\x8f\xaf\x84\x56\x2c\x26\x0d\xfd\x82\x9c\xb6\xfb\x1b\xa2\xd4\x83\xb2\x89\x98\x68\x52\xa3\xf8\x38\xd2\x20\x3c\x3d\xe6\xc8\x6a\xee\xa4\x06\xaf\xc4\x66\x5b\xee\x6c\xc9\x6d\x0d\xe7\xde\x9a\x6d\xe5\xf4\xb4\xf0\x9a\xea\x2e\xbb\x5f\xdb\x17\x15\x93\x87\x5b\x16\x94\xb5\x33\xf3\x66\x71\x21\x1f\xe0\xac\x56\x46\x22\x9f\x2e\x49\x6e\xfa\x66\xb7\x3d\xba\x15\x61\x48\x06\xd2\x29\x0d\xec\x86\xb7\xbf\xb7\xdc\x77\xd9\x0f\x5d\x66\xca\x77\x0d\xda\xdd\xed\x20\xbc\xec\x84\x6b\x94\x98\xa2\xc6\x34\x62\x17\x3e\x68\xd4\x24\xe3\x2f\x87\x33\x1d\x73\xe2\x0b\xd1\xf9\x48\x94\xca\xa4\x25\x9a\xaa\x2b\x96\xf7\xa6\xaf\xac\x7a\x48\x87\x84\x9b\xb8\x73\xc1\xf6\x26\x4b\x69\x9e\xe7\x02\x57\x10\x31\xc9\x5c\xf7\xc5\x46\x28\x8e\x2f\x2b\x6f\x39\x61\xf3\x54\x1f\xd7\x21\xd8\xe4\x3d\xa1\x3c\x92\x06\x80\x46\xca\x10\x64\x68\x2d\xe4\xf3\x23\xda\x71\x9b\x87\x21\xa5\xc6\xe1\xfa\x3a\x66\x78\x3b\x67\xcf\x1c\x9f\x13\xf2\x0e\x29\x5a\x8a\xf8\x51\x11\x80\x01\x60\x47\x2b\xbc\x20\xf0\x3c\x01\xf2\x7c\x14\xf2\xb5\x28\x4c\xf2\x02\x0c\x79\xbb\x3e\x89\x00\x72\x2f\xc7\x90\x94\xc0\xce\x49\x55\xc3\xf0\x30\x34\x24\x9e\xef\x25\x60\x38\x22\x1c\x31\x84\x79\xfe\x84\x39\x12\xa1\x91\x08\x04\xa8\x00\xfe\x78\x73\xd9\xc4\x10\x5c\x39\xb4\x7e\x83\x1f\x87\x85\xdc\xf0\x20\xb4\x77\x4d\xd5\x4a\x6d\xd7\xa6\xfa\xe4\xf6\x7d\x6d\x48\x77\x14\xca\x83\xaf\xca\x99\x0d\xae\xc4\xe7\x61\x0b\x23\x49\x00\x5e\x0e\xad\xce\x6a\xef\x15\x94\xf7\xe9\xfb\x1d\x9b\xe7\x38\x6b\x4d\xcf\x1f\x38\xb6\xea\x3b\x1b\x8e\xdf\x6e\x5e\x1d\x35\x6b\x2c\x29\x23\xa1\x8d\x81\x72\x1a\x03\x08\x0d\x47\xc6\x40\x92\x14\xaa\x20\x53\x19\xb0\xda\x7c\x1c\x82\xbd\x3e\x6a\x6d\xf3\x4e\xf9\x1d\x8d\x67\xa6\x0f\x7d\x73\x09\x3d\xa6\x4a\x6e\xcd\x98\xf2\xcc\x5a\xea\xc9\x40\x60\x9e\xfb\x15\xdf\x02\xf8\xa2\xd4\xbb\x54\x36\xc7\x73\xc9\x0d\x01\xe5\xce\xeb\xc6\x7b\x7c\x33\x5e\x99\x80\xdf\xb1\xe4\x92\x09\xe5\xbe\x83\xbd\xca\x24\xb2\xf1\x8e\xf7\xea\x8d\xd0\x16\xe0\x7d\xe5\x00\x21\x61\x01\x7a\x9e\xbf\xea\xd0\x0f\xde\x11\x75\xac\x23\x8b\x79\x87\x0b\x0f\xb7\x5f\x49\xce\xa1\x22\x53\x58\x91\x17\x0c\x72\x09\xb6\x19\x14\x00\x5a\x5f\xc1\xe6\x21\x93\x07\xda\x67\x18\x40\xe2\xf7\x13\xfe\xe8\x8d\x31\x4f\x83\x51\xcd\x7f\x85\x07\x72\xe4\x49\xed\xcf\xf0\xaa\x44\xfe\xf2\x88\xf8\xdd\x25\xac\x48\xcf\x6f\xc9\xe2\x41\xc5\xc3\x5b\x3e\xc3\x76\x67\x76\x91\x8f\x73\xe3\x23\x2c\xa9\x69\x23\x4f\x2f\x52\xc9\xc9\x89\xd8\x13\x19\x45\x3a\xbe\x63\xb9\xce\x83\xd6\xc9\x93\xd6\xed\x23\xcf\xad\x15\xd9\x1d\x63\x8a\xce\x83\x5b\x9d\x3b\xab\x2d\xf3\x9a\x77\x38\x43\x23\xf0\x55\x72\x5d\x5f\x14\x49\x7c\x87\x3c\x1c\x88\xb8\x9d\xd6\x1f\x68\xde\xab\xa1\x0a\xa8\xe3\x1c\xae\x0b\x01\xe5\xe4\x29\xd5\x90\x11\x0f\xc9\x68\xbd\xe5\xf7\x5b\x1d\xe9\xb8\x5e\xa2\xaf\xe7\xc2\x81\x48\x3d\xa6\x5e\x0f\x93\x8a\xf4\x11\x1f\x5c\x3e\xb2\xff\xbf\xb2\xad\xed\xd5\x26\x91\x8e\x4b\xe4\x9b\x43\x72\xab\x87\x1f\xfa\x48\x7c\x17\x48\x40\xaf\xa2\x6a\x40\x26\x9b\x18\x6e\x30\x18\x75\x32\x41\xfd\x1e\x0a\x91\x3e\xed\xb7\x31\xdf\x3c\x90\x99\x6d\x4e\xfe\xa5\x10\xb6\xcf\xd3\xa1\x8d\xd4\x9d\xd0\x3e\x08\x10\x31\x7e\x74\x16\x87\xe6\x2a\x09\x6d\x73\xba\x2e\x8f\x9e\x1c\x04\xb7\x15\x53\xeb\xe1\x1c\xeb\xcd\xec\x89\xe9\x31\xd8\x3f\xba\xdb\x2b\x12\x68\x50\x5c\x0d\xc7\x8c\xb3\x03\x7e\x78\x25\xee\xb4\x54\x22\xee\x8b\x7c\x91\x90\xf1\x7e\x64\xcd\x70\xa0\x80\x67\x1c\x67\xf5\x7e\x1a\x72\xd2\xd0\x5b\x69\x3f\xb2\xad\xca\x68\xb3\x7f\xb1\xf5\x8e\xeb\xc9\x34\xab\x4d\xed\x66\xd1\xaf\xc7\x95\x64\x43\x7f\xc9\xb7\x7b\xe2\x2a\x0c\xb4\xf4\x8c\xb6\x3a\x90\x28\xca\xe5\xef\x9a\x31\x52\x37\x63\xc3\x9e\xf0\xed\x81\x9c\xdb\x06\x74\x87\x97\x43\x23\x95\xae\x1a\x35\x35\xf4\xd4\x16\x2d\x67\x83\x7a\x3e\x21\x0f\x8d\x8f\xb8\x33\x71\xaf\xd1\x44\x1f\x19\x89\xe5\xcb\x98\xea\xc7\x82\x27\xeb\x07\x55\xe9\x30\x84\x59\x47\x1e\xd9\xa7\xa6\x06\xce\x26\x4e\xe5\xdd\x4b\xbd\x9e\x1c\xc3\x95\x3d\x87\xc7\xdd\x2a\xde\x63\x15\xcd\x4b\x95\x10\xee\xb9\x67\xe2\x93\x2c\xf6\xa5\x57\x32\x2e\x9e\xf3\x8c\x96\x52\xb1\x3b\xdd\x6f\x28\xb3\x3d\xd5\x7e\x5d\xac\xe7\xc1\x2e\x68\xe2\x13\x64\x48\x17\xfe\x84\xdb\xff\x03\x5f\xfd\x01\xbe\xfd\xe3\x07\xf8\x0c\x3e\x5f\x4b\x34\x07\x00\xb8\x67\x31\xa1\x3a\xad\xc8\xe6\x1b\x2f\xfc\x22\xc5\x17\x28\x7a\x11\x08\x60\x4b\x60\xcb\x18\x95\xfc\x6f\xc8\x4d\x2f\x14\x79\xe9\x3d\x95\xc4\x5e\x11\xf5\x7b\x48\x31\x45\x2a\xbb\x73\x68\x41\x27\xb9\xb9\x4b\xca\x43\x21\x9e\xe9\x49\x5c\x80\xfb\x03\x4b\x84\x50\x9b\xb6\xcb\x43\x2b\xa6\x8e\x2b\xf0\x74\xa8\x88\xf9\x82\x21\xed\x0b\x36\xa2\xb0\x80\x27\x7d\x41\x94\x2e\x00\x52\x6f\xba\xd5\xa6\x4c\xbf\xd9\x46\xc2\xaa\x90\x86\x41\xfd\x21\x70\x08\x16\x98\x77\x5d\x3c\x89\x15\x70\xbe\x6e\xe8\x6c\xc1\x99\x9a\x94\x4f\x17\x05\xfd\xac\xdb\x49\x59\x40\xf1\xd3\x03\xa9\xfe\x63\x43\x6e\xf8\xee\xda\x21\xc7\x79\x2d\x6a\xe6\xd3\xa3\xdf\x68\xf9\x1d\x96\xc4\xef\xb4\xbc\xe9\x18\x73\xe2\xb3\xd1\xea\x6c\x9f\x34\xe4\x3e\x3f\xe8\x5d\xb0\x08\x8f\xdd\xe2\xb4\x92\xe5\x17\x43\x4c\xef\x38\x9f\xb7\xb4\x43\x46\x5b\x24\x12\x89\x07\xdb\x66\xba\x51\x04\x07\x0d\x3d\x26\xa9\x94\x79\xf6\x52\xa5\x99\xdd\x72\x6c\x5a\x26\xf1\x9d\xc9\x3d\x70\xdd\x31\x52\x74\xdb\x5e\x8c\x4c\x4a\xa7\x59\xaa\xcf\x4d\x28\x5f\xb6\xef\x28\x64\x3d\xc0\x11\x16\x9e\x36\x73\xbd\xdb\xa3\xd2\x4a\xcd\xe9\x15\xb1\x87\x5b\x2f\x57\x09\x90\xd5\xb9\xcf\xd8\x44\x64\x7b\xe6\xc4\x1e\x76\x90\xb1\xa3\xe0\x9d\x0c\xc7\xd8\x9e\xbd\x48\xe7\xaa\x53\x7d\x32\x04\x25\x24\x89\x90\x2b\xb6\xf7\xf0\x41\x3b\x2d\x72\xd0\x72\x6c\xd8\xe0\x24\xaf\x72\xcd\x0a\x4d\x4c\x15\xdd\x6d\x29\xec\x8d\x5f\x3c\x36\xe3\x1e\x3e\x87\x68\xa4\x5c\xf1\xb6\x47\x27\x16\x36\xfd\x5a\xe0\xfa\xcd\x03\x44\xc4\x4e\x27\x6e\x7a\x1b\x96\x9f\x0f\xdd\x3d\xbc\x9c\x4a\xd0\x9c\x0c\x5b\x4a\xb1\x60\xe0\x84\xba\x60\xbb\x74\xc5\xe7\xa3\xc3\x87\x42\xe0\x62\x74\x1d\x17\xb8\xed\x6e\xf5\x84\x16\xf2\xa5\x0f\x55\x45\x6c\x2f\xca\x12\x3d\x6b\x06\x27\xde\x30\x29\xa4\x2e\x7b\x2b\xe8\xd8\x27\x5b\xf0\x2d\xb5\x03\x03\xa0\xe4\xbd\x50\xff\xa2\x25\xbc\xda\x6b\xd5\xfa\xf5\x88\xbe\x74\xdc\x26\xbe\x68\x99\xaf\x4c\x42\x70\xfb\x51\xca\x02\x38\x7f\x42\xc0\xe0\x3e\x41\xb8\xbe\x35\x0f\x82\x60\xbc\x7e\xc3\xd3\xfa\x5a\x28\x59\xe0\x5a\x54\x8a\x44\x7c\x43\x0e\x2c\xca\xf0\x27\x72\x22\x5f\x9f\xc3\x99\x21\x3f\x4b\x58\x6a\x6a\xad\x5d\x85\x7e\x0f\xde\x91\x67\x36\xf1\xcd\x9c\x53\x5f\x27\xb5\x56\x5f\x25\xd7\x06\x87\x6f\x22\x3f\x82\x2e\x18\x22\xd9\x24\x13\xa1\x1b\x34\x4a\x1c\x3f\xe8\xf0\xfb\xa1\xd8\x3a\xce\x1f\xa5\x9f\xcc\xc7\x9a\x48\xf6\xe6\xe7\x47\x40\x89\x1f\x74\x1c\x75\x0a\x8f\xf2\xf8\x19\x5f\xb5\x52\x7e\x14\x3b\xe0\x4c\xa7\x6c\xba\xcb\x7d\x9f\x5c\x9f\x31\xed\xbc\x8d\xf4\xba\x45\xa2\xc7\x8b\xa5\x09\x46\xc2\x05\x7f\x43\x0d\x91\xa3\xb5\x00\x05\xe6\xe1\x2d\x37\xc6\x35\x2d\x68\xbc\x8c\x7f\xf2\x0c\x0b\xe0\xfd\x1d\x4b\x04\x30\x83\xf2\x97\xcb\xfa\x98\xcc\xcc\xa7\x47\x9a\x9f\x4f\x5a\xbb\xf6\x89\xac\x37\x3f\xc6\xd3\x35\x0f\x73\xb8\x00\xee\x8b\xb4\x1c\xd2\x6d\xb0\x10\x58\x90\x72\x8d\x05\xaf\xa2\x7c\xfd\x62\xf6\x5e\xed\x57\xe8\xd7\x2b\xe8\xbf\x92\xc8\x33\x55\x4c\x91\x83\x29\xea\x8e\x53\x1f\x2f\xee\xda\xf6\x9e\xa0\x0b\x4e\x3d\xbe\x89\x8f\xcd\xff\x3d\xaf\xfc\xd3\x08\xf2\xa7\x2a\x11\x5f\xf3\x2b\x02\x7b\xfb\xe2\xa3\xab\x5e\x79\x42\x95\x4a\xd0\x3f\xf0\xae\xb7\x49\x9b\x88\x49\x50\xd9\x44\xab\x1e\x65\x9c\x52\xf3\xaa\x36\x79\xc5\xf1\x84\xca\x7a\xaf\xca\xa6\x29\x4b\x6a\x47\xbc\x31\xe5\x26\xd2\xb5\x39\xb2\x16\x67\x97\xc5\x3a\xa0\x0c\xdd\xb3\xcb\x52\xf6\x55\xb2\xde\x03\xc1\xf6\xb5\x8c\x7b\xaf\x4b\xa3\x57\xbe\x71\xe7\x73\x76\x2f\x68\x14\xdc\x9f\xdb\xdd\xe8\x9f\x5e\x13\xb7\x25\x46\x70\x57\x06\xd5\x1a\x5f\xad\x5b\xd2\x58\x74\x98\x08\x3f\x9e\x96\x80\xd8\x2c\x3a\xac\x83\x3b\xf5\x4a\xf0\xdc\x31\x15\x4e\xd9\xaa\xcd\x3c\x47\x3e\x71\x7d\xb7\xad\x3a\xcf\xe9\xe4\xb3\x93\xaf\x39\xf0\xe9\x4b\xb7\x33\x82\x65\xb3\x4f\xfb\xa5\x16\x1e\xf8\x4e\x5f\xeb\x66\x82\xa3\x6f\xf6\xde\x8e\x3c\xf9\xcb\xda\x4f\xe1\xa6\x3f\x5f\xc0\x90\xcd\x53\x79\x4b\xdb\xaa\xf6\xb8\x46\x9a\x37\x46\x6f\x36\x12\x71\xb9\x86\x1b\x89\x0d\xd9\xe2\xd0\x56\x59\x4b\x06\x9b\xd2\x6b\xea\x20\x71\xe9\x8b\xe2\x69\xbb\x72\x84\x25\xd7\x47\x7c\x2c\x59\x4c\xa5\x53\x77\x0e\x6f\xfc\x8d\x71\x70\xf4\x13\xaa\xd7\xfc\xee\x75\x96\x38\x9d\x1f\xf5\xa3\x65\x0e\xb6\xbc\xf6\x5d\x26\xa8\xa0\xb6\x6e\x05\xbb\x15\x74\xf1\x4d\x1a\xf9\x5f\x7f\xfd\x03\x6e\xfe\x13\x00\x00\xff\xff\x92\x45\x0b\x38\x68\x0d\x00\x00")

func fullchainPemBytes() ([]byte, error) {
	return bindataRead(
		_fullchainPem,
		"fullchain.pem",
	)
}

func fullchainPem() (*asset, error) {
	bytes, err := fullchainPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullchain.pem", size: 3432, mode: os.FileMode(420), modTime: time.Unix(1469485291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _privkeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x95\xc7\xce\x83\xc8\x16\x84\xf7\x3c\xc5\xec\xd1\x15\x19\xcc\x92\xd0\x26\x1a\x13\x4d\xd8\x91\xb3\xc1\x80\x69\xe0\xe9\xaf\xe7\xdf\x4e\x2f\x5b\x47\x47\x75\x3e\x95\xaa\xfe\xf7\xef\x13\x81\xa2\x59\xff\xd8\xae\xf6\x12\x7c\xf0\x8f\x01\xe2\xbf\x5f\xe4\xa1\x69\x60\xaf\x35\x51\x90\x05\x4b\xac\xfb\x4f\xd3\xb7\x0a\x0f\x71\x51\x70\xc0\x5d\x10\x3c\x49\x34\x6a\x58\xd7\x5e\x2f\xd4\x40\x10\xa6\xdf\x9c\x23\x8b\x4b\xa8\xaf\xe5\x35\x04\x8e\xeb\xd8\x48\x28\x9d\x1f\x54\x6f\xa9\xa1\x81\x62\x9e\x8e\x5b\xaf\x07\x97\x5b\x4f\x06\x14\x47\x43\x28\xe2\x0a\x0e\xca\x87\x6e\x85\x04\xaf\x24\xe2\xaa\x1b\x73\x20\x86\x52\xf5\x55\xac\xcc\xfd\xf8\xbd\x76\x0c\xb2\x0c\x0b\x18\xe6\x9d\x92\x6b\xb1\xff\x2c\xfa\x6c\x84\x6f\x67\xbd\x63\x1c\x6a\xbe\x1e\x49\x98\x88\xde\x98\x28\xa9\xe5\x5d\xf5\x93\x52\xbc\x86\x1d\xd0\x94\x4a\x76\xff\x5b\x30\xad\xe1\xfa\x9a\xae\x20\x00\xf3\x26\x81\x1e\x2d\x11\xe6\x13\x7f\x8a\xf7\x42\xe9\x30\x22\xb4\x84\x44\x70\xa8\x78\x95\x43\x94\xa9\x0a\x3d\x64\x8d\x13\x6d\x18\x50\xf6\xeb\xfd\xd9\x56\xeb\x93\xb0\xae\x33\x68\xf6\x2c\x13\x11\x62\x59\x1e\x7a\x1b\x0c\x07\xad\x61\x2b\xd7\xec\x30\xc4\xfd\x56\x96\xb4\x0e\x6c\x70\xed\xf1\x46\x4f\xb9\x06\x9b\xde\x1b\xc9\x5f\x97\x0a\x59\xf5\x73\xa8\x4b\xbc\x25\x49\x20\x06\x8f\xe0\xf2\x07\x04\x2b\x55\xfa\xa9\x92\x84\x21\x65\xd0\x66\xd7\x71\x46\xf9\x8e\x95\x60\x3b\x9f\x81\x20\x05\x09\xed\xa8\xef\x7a\xeb\x0d\x19\xf7\xa3\x8b\x9d\x85\x84\x90\x37\x94\x22\xe8\x0b\xd3\xd9\xaf\x00\x99\x0b\xf1\x7a\x35\xab\x93\xc9\x14\xea\x87\x28\x08\x40\xaa\x7f\xb4\xd5\xc2\x03\x9f\xfe\xa4\xe3\x0c\xbd\xb9\x7e\x27\x96\xea\x5e\x8c\x59\xff\x96\x8e\x77\x3f\xbc\x03\x90\x94\x85\xf5\x35\xe2\xf9\xb4\x22\x13\xe9\xe1\xb9\xd2\x94\x79\x1b\x17\x82\xd1\xd8\xa2\xd4\xb8\x64\xe0\x88\xec\xc2\xdf\x4f\x81\x12\xdd\x09\x62\x30\x80\x1b\xfb\x1e\x77\x74\x07\xbc\xf6\xdd\x54\xcc\x48\xdf\x75\x75\xd3\x00\x85\x12\xba\x81\xe0\x4c\x69\xf3\xee\x01\x5e\xef\x61\xd7\xab\x7b\xdc\x1f\xbb\xfa\x71\x4b\xd6\xb7\x95\xcc\x0a\xd5\xe6\xb5\x46\x0e\xf8\xb6\x53\xff\xa4\x53\xb3\xcb\x5d\x9a\x94\xe0\x44\x66\x8f\xd4\x68\x50\x3e\x97\x8a\x9f\x0f\xe6\x44\xad\xb0\xfc\xfe\x50\x92\x3b\x81\x53\xed\x26\xa0\x2b\xa4\x13\x5e\x96\x28\x3b\x39\x42\xdf\x0e\xd6\x93\xb8\x69\xf8\x2b\x99\xa3\xaa\x57\xb5\x83\xa4\xfc\x1e\xbc\x66\x72\x82\x12\x63\x9e\x08\x45\x32\x22\xd6\x2a\xaa\xd7\x96\xa9\xa3\x7c\xa7\x38\x18\xe7\xa3\x4d\x4e\xbc\x22\xe5\x51\x72\x63\x95\x7c\x98\x78\x11\x7d\xa7\xf9\xe4\x2b\x2f\x2b\xbc\xc8\x32\x94\x3d\x3b\xeb\x81\xc6\x06\x3f\xdf\x10\xf8\x5a\x76\x9f\xe5\xc3\xf5\x77\x1b\x4e\xb0\x5d\x40\xfa\x61\x34\xe7\x05\x29\xa5\x5b\xf2\x4e\xbf\xf6\x32\xcc\xb6\x24\x34\xd0\x31\xc4\xda\x91\xd7\x68\xca\xa6\xbb\x37\xf2\xb2\x67\xba\x6d\xaa\x1c\x48\x2a\x57\x41\xac\x2c\x52\xe0\x44\x07\x58\xd4\x41\xdb\x43\x0d\x67\x39\xb6\x23\x04\x9e\x2d\xb4\x39\xa6\x18\x93\x16\x65\x5a\x11\x9f\xfc\x15\xa7\x83\x13\x2f\xac\x90\x87\x49\x32\x54\x29\xcb\x85\x21\xe2\x32\xf2\x95\x5c\x39\x27\x3d\x7a\x9b\xcc\x31\xec\x78\x05\x03\xfd\xac\x17\x31\xd5\x82\x42\x49\xc2\x8f\x53\x6c\x7c\xd3\x62\x58\xfc\xe8\xc2\x03\x5e\x56\xa8\x2b\xee\x59\x40\xff\xfe\x3e\x9b\xfe\x96\x21\x65\xb0\xfb\xd1\xa4\x70\xd8\x28\x70\x49\x24\xa6\x80\x02\x64\xf5\x7c\xe2\x23\xfc\x93\xec\xc2\x93\x32\xad\x0f\x36\x1b\x44\x63\x8c\xce\xa9\xdc\xcd\x4e\x91\xcd\x1d\xa0\x79\xca\x95\x17\x96\x23\xb7\xd3\xff\xec\x79\x43\xb7\x5d\x54\xb0\xa3\xc5\x1d\xf6\x40\x4b\x5d\x05\x26\xa9\xcc\x29\xa0\xd3\x9e\xeb\xe2\xbc\x02\x5b\x0f\x63\x87\x22\x54\x23\x4f\x24\xf8\x49\xf3\x53\x4a\xe0\x68\x90\x34\x02\x62\xb7\x09\x96\x10\xc7\x4d\xe6\xaf\x29\xfe\xea\x31\x86\x9b\xea\x31\x9d\x2f\x3d\xb1\x71\x63\x80\x5a\x9e\x00\x8d\x16\xf6\x53\x93\x76\x9c\x76\x41\x31\xad\xe8\x76\x1a\xe4\x7c\x13\xb7\x5c\x00\x73\x8a\xf0\xdf\xfe\xce\xcb\xf9\x1e\xfc\x4b\xf9\x47\xbe\x76\x29\x07\x35\x0b\x16\xae\xfb\x93\x4a\x3f\x4f\xf1\xf2\x88\xb8\x37\xdd\x03\x5f\xab\x54\xf0\xd8\x99\x5b\xa0\xa4\x53\x7b\x15\x53\xbd\xe4\xd8\x00\x39\x45\x35\x4d\x94\x03\x4f\xa4\x34\xbc\x60\xe8\x7f\x04\x7a\x62\x44\x69\xbe\x4d\x4c\x6e\xb0\x69\x35\x13\xee\x8a\x12\xed\x3c\x11\x17\x3d\x11\x9e\x0f\x72\x2c\xb8\xa5\x2d\xdd\xe1\xc0\x1d\x77\x62\x41\x1c\x1c\xa3\x24\x8f\x12\xd3\xba\x36\x65\x9d\x01\x6d\xed\xf0\xa8\xaa\x75\x17\x70\xde\x76\x6b\xe4\x70\x42\x2b\x9c\x30\x7d\xd2\xb3\x2a\xa1\x2a\xb8\x68\xcf\xf7\x5e\x7b\xcc\xc2\xa4\x88\x82\xd1\x11\x88\x10\xbf\xdd\x7d\x2b\x8b\xa4\x3b\x1d\x30\xcf\x85\x3f\x95\xd1\xad\x49\x4f\xb6\x72\x5d\xbf\xd9\xc8\x2c\x55\x49\x88\x66\xbf\x30\x28\x29\x0b\x33\x5e\x6b\xfb\xf5\x32\x12\x14\x19\xbe\xbc\x2e\xd2\xe5\x10\xd2\xd2\x97\x77\x47\x1d\xb4\x92\xf1\x9f\xe4\x75\x9a\x4f\xee\x0d\xf5\x2d\xfe\x79\x84\xd3\x87\x8d\xde\x24\xa5\x65\x6f\xe5\x69\xe2\xe3\x5e\x69\x53\x7a\x8b\xb6\x9a\x6a\x9e\x78\x61\x43\x6f\x9d\x33\x03\xa9\x77\x18\x29\xb0\x9e\xa4\x0c\x3b\x94\x18\x32\x25\x96\x1a\x78\x95\x5f\x90\x89\xfc\x57\x23\x53\x8a\xf9\x50\xc5\xfd\x10\xff\x24\x6b\x3b\x08\xb8\x99\xb0\x07\x2f\xaa\xad\xb9\x9b\x0c\x50\x20\x2c\x3e\x4f\x81\x4d\x33\x07\x41\x9e\x58\x74\xc1\x88\x30\x2c\xd2\x71\x1e\xf4\xf3\xbe\xe7\xef\x9e\x71\xa4\x31\xa7\xc4\x56\x62\x62\x89\x65\x0b\xd3\x9a\xb8\x9b\x3d\xf7\x91\x54\x1d\xe2\x55\xc7\x1c\x83\xfc\x02\x1f\x67\x87\x05\xeb\x29\x6b\xf7\xb8\x2f\x64\x19\xbf\xb0\xd4\x4f\xa9\x15\xbf\xfd\x79\x3f\xbd\x28\xce\xe8\x44\x71\xae\x5e\x28\xdb\x3e\x8d\xc7\xab\x98\x32\x16\xf3\x3f\x63\x80\x8b\x7b\x3c\x4f\x88\x53\xc9\xa1\x71\x0a\xb7\x1b\x31\x5e\xb1\x15\x5b\x53\x60\xe9\x58\x23\x9d\xc8\x5f\xef\x00\x4b\xfe\x6f\x17\xfd\x3f\x00\x00\xff\xff\xe9\x88\xd4\x03\xa8\x06\x00\x00")

func privkeyPemBytes() ([]byte, error) {
	return bindataRead(
		_privkeyPem,
		"privkey.pem",
	)
}

func privkeyPem() (*asset, error) {
	bytes, err := privkeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "privkey.pem", size: 1704, mode: os.FileMode(420), modTime: time.Unix(1469485387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullchain.pem": fullchainPem,
	"privkey.pem": privkeyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fullchain.pem": &bintree{fullchainPem, map[string]*bintree{}},
	"privkey.pem": &bintree{privkeyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


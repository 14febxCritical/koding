// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x6e\xc3\x20\x10\x86\x77\x3f\x05\x62\x0e\x90\xb4\x43\x25\x8f\xed\x9a\xad\x4f\x40\xcc\x29\x41\xd8\x87\x05\x67\x1a\xb5\xca\xbb\x57\x60\x47\xc1\x8d\x5a\xa9\xed\x68\xf3\xf3\x7d\xc7\xdd\x7d\x34\x8c\xf1\xc3\xd4\x39\xa0\xc8\x5b\x96\x3f\x19\xe3\xe3\x74\xe8\x6d\xb7\xf7\xc7\xdb\x3f\xc6\x38\xea\x01\x78\xcb\xb8\xf3\xc6\xe2\xd1\x40\x12\x73\xae\xcf\xb9\xcd\x35\x15\xe0\x68\x3d\xe6\xdc\x14\x05\xe8\x48\x62\xc7\xcb\xd9\xa5\x61\xec\x92\x63\x1c\xd0\x8c\xde\x62\x6d\xb4\x63\x6d\x9a\xb9\x99\x71\x22\x1a\x63\xab\x54\xb1\xc9\xd9\x2c\x3b\x3f\x28\xa1\xec\xb8\x70\x37\x57\xc4\xcb\x09\x3a\xf7\x07\x4e\x57\xee\xad\x60\xce\xec\x35\x41\xa4\x9f\x69\x33\x47\x38\x23\xe3\xa3\xd4\x83\x7e\xf7\xa8\xdf\x62\xe1\x46\x8d\xe6\xe0\xcf\xaa\x2f\x18\x91\x20\x44\xeb\x51\xd2\x99\xbe\x88\x7a\x0b\x48\xbf\x91\x95\x0b\xff\x10\x16\xcc\xb3\x8e\xb0\xd2\x05\x9b\x34\xc1\xd5\xd7\x2a\xb5\x7b\x78\x92\x5b\xb9\x95\xbb\xdb\x68\xef\x6b\x5a\xa4\x55\x43\xd7\x32\x9a\x10\xa1\x7f\x85\x90\x20\x7c\xff\xba\x65\x2e\x54\xcf\xc5\x59\x82\xfb\xbd\x49\x36\x78\x1c\x00\x73\xab\xf8\x22\x2f\xf5\xf1\xe0\x27\x82\x6a\xa1\x0c\xa4\xba\xaa\x96\xf1\xdb\x83\x32\xb0\xb9\x34\x9f\x01\x00\x00\xff\xff\xb9\x97\x08\x53\xfc\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 764, mode: os.FileMode(420), modTime: time.Unix(1476710288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

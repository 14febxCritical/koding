package kloud

import (
	"fmt"
	"koding/kites/kloud/kloud/protocol"
	"koding/kites/kloud/sshutil"

	klientprotocol "koding/kites/klient/protocol"

	kiteprotocol "github.com/koding/kite/protocol"

	"github.com/nu7hatch/gouuid"
)

var (
	keyPath = "/opt/kite/klient/key/kite.key"
)

func (k *Kloud) DeployFunc(username, hostname, ipAddress string) (*protocol.DeployArtifact, error) {
	sshAddress := ipAddress + ":22"
	sshConfig, err := sshutil.SshConfig(protocol.PrivateKey)
	if err != nil {
		return nil, err
	}

	k.Log.Info("Connecting to SSH '%s'", sshAddress)
	client, err := sshutil.ConnectSSH(sshAddress, sshConfig)
	if err != nil {
		return nil, err
	}
	defer client.Close()

	tknID, err := uuid.NewV4()
	if err != nil {
		return nil, NewError(ErrSignGenerateToken)
	}

	kiteKey, err := k.createKey(username, tknID.String())
	if err != nil {
		return nil, err
	}

	k.Log.Info("Copying a Key to remote machine username '%s'", username)
	remoteFile, err := client.Create(keyPath)
	if err != nil {
		return nil, err
	}

	_, err = remoteFile.Write([]byte(kiteKey))
	if err != nil {
		return nil, err
	}

	hostFile, err := client.Create("/etc/hosts")
	if err != nil {
		return nil, err
	}

	if err := t.Execute(hostFile, hostname); err != nil {
		return nil, err
	}

	hostnameFile, err := client.Create("/etc/hostname")
	if err != nil {
		return nil, err
	}

	_, err = hostnameFile.Write([]byte(hostname))
	if err != nil {
		return nil, err
	}

	if err := client.StartCommand(fmt.Sprintf("hostname %s", hostname)); err != nil {
		return nil, err
	}

	if err := client.StartCommand("service networking restart"); err != nil {
		return nil, err
	}

	if err := client.StartCommand("service klient start"); err != nil {
		return nil, err
	}

	// arslan/public-host/klient/0.0.1/unknown/testkloud-1401755272229370184-0/393ff626-8fa5-4713-648c-4a51604f98c6
	query := kiteprotocol.Kite{
		Username:    username,       // kite.key is signed for this user
		ID:          tknID.String(), // id is generated by ourself
		Hostname:    hostname,       // hostname is the dropletName
		Name:        klientprotocol.Name,
		Environment: klientprotocol.Environment,
		Region:      klientprotocol.Region,
		Version:     "0.0.1",
	}

	k.Log.Info("Connecting to remote Klient instance")
	klient, err := k.Klient(query.String())
	if err != nil {
		k.Log.Warning("Connecting to remote Klient instance err: %s", err)
	} else {
		k.Log.Info("Sending a ping message")
		if err := klient.Ping(); err != nil {
			k.Log.Warning("Sending a ping message err:", err)
		}
	}

	return &protocol.DeployArtifact{
		KiteQuery: query.String(),
	}, nil
}

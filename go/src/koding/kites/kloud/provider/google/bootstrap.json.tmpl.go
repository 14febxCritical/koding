// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x95\x41\x8f\x9b\x3c\x10\x86\xef\xf9\x15\x96\xf5\x9d\x3e\x01\x8d\xd4\x3d\x44\xb9\xf7\x54\xa9\xea\xbd\x5a\x21\x2f\x4c\xa8\x1b\xc7\x63\x0d\x36\xd1\x2a\xe2\xbf\x57\xd8\x60\x0c\xa4\x55\x37\xed\x65\x77\x4f\xb6\xe7\x7d\x99\x79\x3c\x19\xdf\x76\x8c\x71\x43\xd8\xc9\x1a\x88\x1f\xd9\xb0\x66\x8c\x37\x88\x8d\x82\xb8\x66\x8c\x57\x04\x35\x68\x2b\x85\x6a\xf9\x91\xf1\xff\x6e\x9d\xa0\x22\x84\x95\xc9\x59\xcf\xb3\x49\x61\x08\x7f\x40\x65\x37\xd1\xe3\x7e\x12\x49\xd0\x48\xd4\x9b\xc0\xb0\xdd\x73\x1f\xd6\xef\x18\xeb\x07\x05\x47\x67\x8d\xb3\x73\xae\x95\x72\xad\x05\x2a\x45\x5d\x13\xb4\x6d\x9a\x74\x27\x94\x83\xe0\x3b\xa5\x8a\x17\xe3\x2c\x4c\xc1\xc5\x28\x2e\xc6\xf5\xf4\xb1\x6c\x69\xdd\x82\x3a\x95\x4a\xea\xf3\x63\xe6\x51\xbe\xa9\x85\xa0\x45\x47\x15\xac\xc9\xaf\xad\x16\x37\x11\x5c\x93\x2d\xc6\xb8\x16\x17\x9f\x4b\x53\x41\x1e\x20\x82\xee\x24\xa1\xbe\x80\xb6\xe5\x70\xda\xe7\xa3\x30\x9f\x3c\x47\x75\xbf\x28\x79\xf5\x7d\x2b\xa8\x01\x5b\x1a\x44\xf5\x4f\x72\x08\x7e\xb9\xf7\xcb\x66\xa9\xd4\xad\x15\xba\x82\xa1\xd0\x6f\x71\x9b\xdd\x61\x3b\x45\x46\xb8\xff\x6f\xf0\x0e\x7f\xcf\x7f\x52\xdc\x09\xe9\x2a\xa8\x96\xba\x29\xc9\x2d\xdb\xfd\xbb\xb5\xe6\x71\xc2\x83\x3a\x9f\xdd\x73\xef\x9e\x94\x1b\x28\xdc\xed\x9d\x04\xf8\xbd\xfe\x49\x99\x99\xa4\x3b\xde\xd0\xe1\x89\x85\x41\xb2\x25\x09\xdd\xf8\xca\x0e\xfb\xd8\x12\x59\xca\xa1\xfd\x3b\x10\xed\xfb\x23\xf1\xf4\xf4\x71\x8b\xe2\xac\xd0\xd5\x8f\xa3\xf0\xf2\xf7\x87\xe2\xb0\x4f\xda\xe2\xb7\x3f\x26\x49\x70\x15\x6a\x31\x26\xde\xc2\x27\xea\x23\x70\x0d\xf6\x8a\x34\xcc\x5c\x5e\xc3\x49\x38\x65\xe7\x33\xa1\x14\x5e\x97\x97\x61\x08\x2d\x56\x7e\x4e\x71\x5b\x99\x75\x49\x9b\xd1\x72\xd8\x27\x21\x2c\x5c\x7a\xb6\x0c\x98\x4b\x4f\x26\x4a\xcc\x21\x8c\xee\x80\x6a\xe9\xce\xf7\x85\xff\xff\x10\xf5\xcf\x51\x35\xde\xa5\x15\xcd\x4a\x33\x81\xd0\x58\x43\x94\xad\xde\x8b\x4e\x90\x14\x2f\xc9\xa8\xe2\x6b\xa0\x29\xfe\x89\xda\x91\xf1\xdb\xad\xf8\x34\x47\x7e\x19\xc8\xaf\xde\x3a\xe3\x5e\x94\xac\xca\x33\xbc\xfe\xda\xe2\xab\x8f\xf9\x0c\xaf\x7d\xfa\x92\xed\xfa\xdd\xcf\x00\x00\x00\xff\xff\xaf\xa5\xf8\xd7\x47\x08\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 2119, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xbd\xce\xdb\x30\x0c\xdc\xfd\x14\x02\xd1\xf1\xb3\xfb\x75\xe8\x5f\x5e\x21\x4b\x97\x4e\x45\x61\x30\x36\xe3\xaa\x51\x2c\x83\x92\x12\xa4\x81\xde\xbd\x90\x15\xdb\x4c\x9c\x16\x1f\xbc\x98\xd4\xf1\xc8\x3b\x51\xd7\x42\x29\x18\xd8\x9e\x74\x4b\x0c\x1b\x95\x62\xa5\xa0\xb3\xb6\x33\x34\xc7\x4a\x41\xc3\xd4\x52\xef\x35\x1a\x07\x1b\x05\xef\xae\x27\xe4\x2a\xc3\x6a\x71\x16\xe1\x65\xaa\x18\xd8\xfe\xa6\xc6\xaf\xd0\xb7\xbc\x40\x32\x75\xda\xf6\x2b\x60\x4e\x47\x18\x61\xb1\x50\x2a\xa6\x0a\xb0\xc1\x0f\xc1\x2f\xb3\x1e\x6c\xab\xfb\xae\xde\x6b\xa6\x33\x1a\x23\x87\x3e\xa1\x09\x94\x79\xa7\x51\xed\x71\x08\x9e\x66\x74\x95\xab\x2b\x47\x66\x5f\x1b\xdd\x1f\x56\xed\x98\x9c\x0d\xdc\xd0\xa3\x39\x2b\x2a\xd9\x38\xb3\x8a\x8c\x52\xd0\xe3\x71\x9c\xa5\x6b\xa8\xcc\xe7\xe5\x5c\xfa\x22\x60\xe4\xcf\x96\x0f\x09\xd9\xd2\x1e\x83\xf1\xf2\x14\x8d\xb1\xe7\x3b\xde\xec\xb4\xb7\x8d\x4d\x13\x80\x6f\x06\x81\x4f\x87\x96\x7d\xba\xb2\x1f\x22\xa9\x14\x7c\xfc\xf4\xf9\xcb\x57\x10\xb9\x9f\xf3\x7f\x14\xfd\xb2\xf6\x9a\xb1\xef\xe8\x91\x05\x5e\xab\xf1\x7b\xff\xba\xf0\x4c\x2c\xb1\x10\x4c\x8f\x8e\xdd\x36\xa0\x3e\x92\xc7\x16\x3d\x4a\xe7\x26\xcd\x77\xd6\xbd\x79\x95\x94\x82\x27\xa4\x59\x89\xfb\xb5\xa5\x8b\x58\xde\xe0\x88\xeb\x74\x29\x71\x93\x13\x43\xd8\x19\xdd\xd4\x07\xba\xc4\x45\x50\xbc\x17\x34\xaf\xc5\x09\x59\xe3\x4e\xbc\x11\xf8\x63\xfb\xd1\xa2\xff\x4b\x41\xa7\xb1\x24\x74\xfe\x43\x9a\x64\x89\x4a\x94\x22\x28\xb0\x1d\xa8\x3c\xd3\x0d\x27\xe3\x72\x27\x91\xc1\x95\x0d\xf5\x9e\xd1\x8c\x40\x11\xde\x33\x06\xb7\x74\x9d\xfe\x57\x4c\x73\xbf\xe9\xbf\x44\x78\x7a\xa1\xb3\x77\xcf\xf5\xc2\xf5\x5a\x7d\x77\xc4\xa3\xbb\xd3\x8b\xba\x95\x2e\x2e\xff\xbb\xf6\xdb\x88\xd9\xd2\x25\xca\xe7\x58\xc4\xe2\x6f\x00\x00\x00\xff\xff\xd9\x77\xe9\x9e\xaf\x04\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 1199, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

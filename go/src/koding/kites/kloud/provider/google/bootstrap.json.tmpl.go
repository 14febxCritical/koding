// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package google

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xcd\xd2\x9b\x30\x0c\xbc\xf3\x14\x1e\x4d\x8f\x1f\xf4\xeb\xa1\x7f\x79\x85\xef\xd2\x4b\x4f\x9d\x0e\xa3\x80\x42\xdd\x38\x98\x91\xed\x64\xd2\x8c\xdf\xbd\x63\x1c\x40\x84\xb4\xc3\xc5\x92\x57\xab\xd5\xca\xdc\x0a\xa5\x60\x60\x7b\xd6\x2d\x31\xec\x54\x8a\x95\x82\xce\xda\xce\xd0\x1c\x2b\x05\x0d\x53\x4b\xbd\xd7\x68\x1c\xec\x14\xbc\xbb\x9d\x91\xab\x0c\xab\xc5\x5d\x84\x97\xa9\x62\x60\xfb\x9b\x1a\xbf\x41\xdf\xf3\x02\xc9\xd4\x69\xdb\x6f\x80\x39\x1d\x61\x84\xc5\x42\xa9\x98\x2a\xc0\x06\x3f\x04\xbf\x68\x3d\xda\x56\xf7\x5d\x7d\xd0\x4c\x17\x34\x46\x8a\x3e\xa3\x09\x94\x79\x27\xa9\xf6\x34\x04\x4f\x33\xba\xca\xd5\x95\x23\x73\xa8\x8d\xee\x8f\x9b\x76\x4c\xce\x06\x6e\xe8\xd1\x9c\x0d\x95\x6c\x9c\x59\x45\x46\x29\xe8\xf1\x34\x6a\xe9\x1a\x2a\xf3\x7d\x39\x97\xbe\x08\x18\xf9\x8b\xe5\x63\x42\xb6\x74\xc0\x60\xbc\xbc\x45\x63\xec\x65\xc5\x9b\x9d\xf6\xb6\xb1\x49\x01\xf8\x66\x10\xf8\x74\x69\xd9\xa7\x95\xfd\x10\x49\xa5\xe0\xe3\xa7\xcf\x5f\xbe\x82\xc8\xfd\x9c\xcf\x51\xf4\xcb\xb3\xd7\x8c\x7d\x47\x8f\x2c\xf0\x5a\x8d\xdf\xfb\xd7\x85\x67\x62\x89\x85\x60\x7a\x74\xec\xfe\x02\xea\x13\x79\x6c\xd1\xa3\x74\x6e\x9a\x79\x65\xdd\x13\x60\x56\xe7\x7e\xbd\xd1\x55\x3c\xc8\xe0\x88\xeb\x64\x74\xdc\xe5\xc4\x10\xf6\x46\x37\xf5\x91\xae\x71\x11\x19\xd7\x22\xe7\x55\x9f\x91\x35\xee\xc5\xbb\x87\x3f\xb6\x1f\xc7\xfe\xbf\x3c\x74\x1a\x4b\x42\xe7\x3f\x24\x25\x4b\x54\xa2\x5c\x1d\x05\xb6\x03\x95\x17\xba\xe3\x64\x5c\xee\x25\x32\xb8\xb2\xa1\xde\x33\x9a\x11\x28\xc2\x35\x63\x70\x4b\xd7\xe9\xbc\x61\x9a\xfb\x4d\xe7\x12\xe1\xe9\x92\x66\xef\x9e\xcf\x0b\xb7\x5b\xf5\xdd\x11\x8f\xee\x4e\x7f\xc9\xbd\x74\x71\xf9\xdf\xb5\xdf\x46\xcc\x1b\x5d\xa3\xfc\xc5\x8a\x58\xfc\x0d\x00\x00\xff\xff\x6e\x2a\x75\x78\x83\x04\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 1155, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package do

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\x41\x6e\x83\x30\x10\x45\xf7\x9c\x62\x34\xea\x12\x71\x80\x5e\x21\x52\xd5\x1b\x20\x07\x4f\xe8\x08\xd7\x46\x83\x8d\x84\x90\xef\x5e\x99\x98\xe0\xb4\x69\x36\x59\x7a\x3c\xff\xfd\xaf\x3f\x6b\x05\x80\xa3\xb8\x99\x35\x09\xbe\x43\x7a\x03\xa0\xe6\x9e\xbd\x32\xae\x23\x65\x6f\x53\x00\xf4\x6e\xa0\x34\xc0\xb7\x75\x56\xd2\x68\xd7\x6e\x93\x88\xdb\x42\xac\x00\x62\x9d\x88\x2e\xf8\x31\xf8\x83\x37\xd0\xd2\x5a\xf5\x4d\x25\x6b\x56\x26\xd0\x95\x55\xda\xb5\xd3\xf4\xd5\x0e\xb4\x34\x83\xd3\x6c\xfb\xdb\x33\xc9\x77\x9f\xfa\xa0\x5e\xd8\xf6\x24\xa3\xb0\xf5\x2f\xc0\x0b\xca\x03\x0f\xd6\x2f\xa0\x59\xff\x69\x47\x68\x72\x41\x3a\x7a\xdc\xf7\xae\x2c\x3d\xef\x99\xc5\x0f\x00\xe6\x5e\xf3\x49\xf6\xa6\x23\xd6\xc7\xca\x18\xce\x86\xbb\x2c\xcd\x8b\xc7\x2c\xe7\xbb\x26\x2c\x73\xce\x4a\x58\x9d\x0d\x3d\xbf\xa3\xa6\x8b\x0a\x26\xb5\x8f\xeb\xda\x9c\x68\xf9\x48\xf6\xbf\x6a\xbc\x4b\xf0\x8f\xf4\x73\xdb\x39\xd1\x12\xcb\xc6\xaa\x58\xfd\x04\x00\x00\xff\xff\x07\xa7\xec\x80\xa5\x02\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 677, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

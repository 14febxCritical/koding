// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x7f\x6f\xdb\x36\x10\xfd\x5b\xfc\x14\x57\xa7\xd8\x5a\x6c\x14\x9d\x00\x41\x80\x0e\x33\x30\x24\x46\x11\xa4\x73\x81\x34\x05\x0a\x6c\x83\x41\x4b\x27\x8b\x33\xa5\x23\x8e\x94\xe3\x34\xcb\x77\x1f\xe8\x9f\x8a\xac\xb4\xc3\xf4\x9f\x78\xef\xde\x1d\xef\xbd\xe3\xc9\x2b\x35\x33\xb5\x9a\x69\x5f\x0a\x71\x02\x37\x94\x9b\x7a\x0e\x8e\x7c\x90\x8e\x69\x69\xbc\xa1\x1a\x7c\xc6\xc6\x05\x60\xf4\x8e\x6a\x6f\x66\x16\xa1\x20\x86\x1c\x9d\xa5\x87\x88\xd7\xb0\xb0\x06\xeb\x00\x1e\x79\x69\x32\x4c\xc5\x89\x38\x81\x4b\x72\x0f\x6c\xe6\x65\x80\x37\x97\x6f\xe1\x6c\x78\x7a\x26\xcf\x86\xa7\x17\xbb\x22\xd7\x75\x96\xfe\x0c\xda\x5a\x58\x83\x7c\xe4\x47\x5e\x62\x9e\x0a\xe1\x31\x80\xc4\x86\xc0\x19\x87\x85\x36\x36\x36\x77\x57\xc6\xba\xd6\xd2\x7d\x4c\x5f\x6a\x36\x7a\x66\xd1\x83\x66\x04\xa7\xbd\xc7\x1c\x96\x46\x43\x40\x66\x5d\x10\x57\x3f\xfa\x3d\x08\x66\x96\xb2\x45\x2a\x70\xe5\x88\x03\xdc\x7c\xbc\xba\x9e\xbc\x9f\x7e\xfe\x34\xbe\x9d\xfc\xf6\xfb\xf8\xd7\xc1\xeb\xd7\x8f\x9d\xb3\x77\xf2\xf5\xe3\x52\x73\xba\x58\x37\x3b\xd5\x59\x46\x4d\x1d\xa6\x8e\xa9\x30\x16\xa7\xb5\xc9\x16\xb5\xae\xf0\xe9\x69\xb0\x27\xfd\x70\x3d\x9e\xdc\x4d\x3f\xdf\x7e\xd8\xf0\xed\x7f\x3b\x54\x9b\x51\x4d\x1b\xb6\xad\xe4\x4f\x97\xb7\xe3\xf1\x64\x9f\x7c\xf8\xed\x24\xfb\x8c\x11\xeb\x5d\xb2\x08\xac\x1d\x0c\x30\x2b\x09\xa6\x37\x57\xd3\xab\x8f\x93\xf1\x14\xfe\x81\x80\x08\x52\x83\x5a\x6a\x56\x96\xe6\x2a\xb3\xd4\xe4\xd2\xd4\x26\x48\x6a\x82\x6b\x42\x6a\x69\x3e\x80\xf1\x97\xeb\x3b\x21\x4c\xed\x83\xb6\x76\x4b\xfd\xe6\x2d\x3c\x8a\x24\x6b\xd8\x82\x94\x96\x32\x1d\xa2\x03\xa4\xf4\xc6\x46\x81\xa5\xf4\x25\xdd\x4b\x64\x26\x06\x29\x19\x03\x3f\xc0\x39\x3c\xef\xf9\x69\x00\x72\x5b\x08\x54\xa8\x9c\xda\x50\xa7\x41\x73\x3a\xff\x2a\x92\xa0\x19\xe4\x25\x28\x90\xab\xa2\x0f\x20\x92\x39\x53\xe3\x74\x9e\x83\x94\x05\x71\x86\xb0\x01\x88\xa4\xf1\xc8\x15\xe5\xf1\x76\xf2\xfd\xf6\x14\x7a\xe4\x8b\xc3\x49\x4c\x01\x7f\xc0\x2b\x90\x2b\x50\x8d\xe7\xb5\xd1\xb7\x19\x7f\xfd\x02\xa1\x8c\x7c\x89\xad\x41\xfa\x02\x14\xb9\xa0\x16\x26\xa0\xda\xc8\xa3\xb0\x9a\x61\x9e\x63\xde\xce\xea\xb0\x88\xa4\x30\xad\x2a\xb8\x89\xfb\x52\x33\xaa\x80\x5c\x99\xba\xa0\x56\xa5\x6a\x91\x1b\x06\xe9\x5a\xb0\xff\x52\xbf\xc3\xd7\x53\xa3\xc5\x72\x1c\x54\x5f\x7a\x4f\x57\xc7\xcd\x47\xb3\x70\xd3\x33\xa2\x43\xe3\xcf\x21\x22\x49\xb2\x32\x8a\x31\xbc\x38\x3f\xef\x0d\xd2\x7d\x0d\x4c\x14\xde\xed\x06\xd8\xc5\x14\x46\x3c\x09\x51\x69\xb3\xf5\xdd\xda\xc9\x83\xd3\xb3\x8b\x74\x98\x0e\xd3\x53\xe8\x13\x16\x46\x23\x50\x18\x32\x55\x92\x0f\x5e\x88\x24\x50\x93\x95\x07\xb3\x6f\x06\x18\x1d\x0e\x7f\x8a\x04\xd6\xdf\xb7\x37\x21\xce\xe1\xd9\x12\x08\xd1\xba\x74\x47\x99\xff\xb7\x1c\x87\xd7\xe0\x68\x39\xb6\xfd\xc6\xc5\x98\x7f\x35\x0e\xa4\xcc\x31\xa3\xca\x31\x7a\xbf\xf7\xbf\x94\x3e\xe4\x74\x94\x02\xa3\x63\xe7\xec\xdb\x5c\x6b\xf3\xd3\xea\x45\x84\xd8\x2a\x24\x6f\xfb\x37\x28\x8e\x2f\xe9\x26\x6f\x0e\xfb\x67\x9d\x7c\x77\xcc\x2f\xb4\x02\xb2\xc2\xa0\x73\x1d\xb4\x8c\x0b\xfe\x42\x3b\x07\x50\x7c\x82\xb7\x9a\x9a\x99\xda\x3c\x8d\x6a\x17\x4d\xff\xf6\x54\x03\x37\xf5\xce\xde\x71\xff\x3b\xd8\x58\x45\xae\xc1\xbe\x6c\x39\xfd\x5b\xb0\xb6\x59\xe1\x87\xd1\xe8\x3b\x77\xfd\x37\x00\x00\xff\xff\x4c\xb6\xd8\x38\x59\x07\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1881, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

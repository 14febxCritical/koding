// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xed\x6a\xe3\x46\x14\xfd\xad\x79\x8a\x5b\x39\xb4\x09\xed\x48\xb6\xa1\x04\x5a\x6a\x28\x89\x29\x26\xa9\x03\x4e\x02\x0b\xbb\x8b\x18\x8f\xae\xad\x59\x8f\xe6\x0e\x77\x46\xce\xd7\xfa\xdd\x17\xd9\xb1\xbd\x1b\x27\x1b\xfd\x1b\xe9\x7c\xcd\xd1\xe9\xfc\x92\x4f\x8d\xcb\xa7\x2a\x54\x42\x74\xe0\x82\x4a\xe3\xe6\xe0\x29\x44\xe9\x99\x96\x26\x18\x72\x10\x34\x1b\x1f\x81\x31\x78\x72\xc1\x4c\x2d\xc2\x8c\x18\x4a\xf4\x96\x1e\x5a\xbc\x82\x85\x35\xe8\x22\x04\xe4\xa5\xd1\x98\x89\x8e\xe8\xc0\x19\xf9\x07\x36\xf3\x2a\xc2\xf1\xd9\x09\xf4\xbb\xbd\xbe\xec\x77\x7b\xa7\x5b\x93\x91\xd3\xd9\x1f\xa0\xac\x85\x35\x28\xb4\xfa\xc8\x4b\x2c\x33\x21\x02\x46\x90\xd8\x10\x78\xe3\x71\xa6\x8c\x6d\xc3\xdd\x54\xad\xaf\xb5\x74\xd7\xd2\x97\x8a\x8d\x9a\x5a\x0c\xa0\x18\xc1\xab\x10\xb0\x84\xa5\x51\x10\x91\x59\xcd\x88\xeb\xdf\xc2\x0e\x04\x53\x4b\x7a\x91\x09\xbc\xf7\xc4\x11\x2e\xae\xce\x47\xe3\xff\x8a\xdb\xeb\xe1\x64\xfc\xef\xff\xc3\x7f\xd2\xa3\xa3\xa7\x17\xef\xfe\x92\x47\x4f\x4b\xc5\xd9\x62\x1d\xb6\x50\x5a\x53\xe3\x62\xe1\x99\x66\xc6\x62\xe1\x8c\x5e\x38\x55\xe3\x6a\x95\xee\x44\x2f\x47\xc3\xf1\x4d\x71\x3b\xb9\xdc\xe8\xed\x8e\x2f\xa4\x36\x55\x15\x0d\xdb\xef\xc8\xd7\x67\x93\xe1\x70\xbc\x23\xef\x8f\x2f\xc8\x41\x33\xa2\xdb\x92\x45\x64\xe5\x21\x45\x5d\x11\x14\x17\xe7\xc5\xf9\xd5\x78\x58\xc0\x57\x88\x88\x20\x15\xe4\x4b\xc5\xb9\xa5\x79\xae\x2d\x35\xa5\x34\xce\x44\x49\x4d\xf4\x4d\xcc\x2c\xcd\x53\x18\x7e\x18\xdd\x08\x51\x2b\xe3\x8e\x4f\xe0\x49\x24\x6b\x9d\xb4\xd7\x3f\xcd\xba\x59\x37\xeb\xc1\x61\x2b\xab\x14\x06\x03\xc8\x31\xea\xbc\xa2\x10\x83\x10\x49\xa4\x46\x57\x7b\xab\xcd\xed\x5a\x7d\xf8\x24\x12\x58\x3f\x3f\xcf\x21\x44\x52\x2f\x4a\xc3\x20\x3d\xe4\xe4\x63\xbe\x30\x11\x9f\x75\x44\xa2\x1b\xb6\x20\xa5\x25\xad\x62\xbb\x45\x29\x83\xb1\xed\xd4\xa4\x0c\x15\xdd\x49\x64\x26\x06\x29\x19\x23\x3f\xc0\x9f\xf0\x63\xf5\xab\x14\xe4\xb3\x15\xe4\xb1\xf6\xdb\x78\xf3\x47\x91\xcc\x1f\x8d\x07\x29\x4b\xd4\x54\x7b\xc6\x10\x40\xca\x19\xb1\xc6\x56\x3a\x96\x74\x40\x81\xc1\x41\xbe\x7d\xcc\xaa\xa6\x12\x7e\xbf\x7f\x13\xd1\x42\xe8\xce\x81\x9c\xc0\x2b\x6b\x5b\xa5\x6d\x5b\xc9\x8e\xbc\x39\xbd\xde\x69\xf2\x6e\x9d\x6f\x64\x00\x59\x63\x54\xa5\x8a\x4a\x36\x01\xf9\x8d\x1c\x7b\x50\x3b\xf4\xe7\x7f\x67\xa6\xf9\x66\x80\xf9\xf6\x6b\xf6\x25\x90\x03\x6e\x9c\x10\x89\x99\xc1\x47\x90\xf7\x07\xd8\xd6\x45\xae\xc1\xa1\x82\xcf\x7f\x43\xac\xd0\xed\xf2\xbf\x0e\x13\xc9\xcc\x88\xd5\x66\x94\xf0\xeb\x60\xf0\xce\x5d\xbf\x05\x00\x00\xff\xff\x6e\xef\xc8\xab\xbf\x04\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1215, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

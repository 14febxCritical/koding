// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x6b\xe3\x46\x10\xfd\x5b\xfb\x29\x26\x4e\x68\xef\x68\x57\x6b\x07\x42\xe0\x4a\x03\x6d\x2c\x8e\x90\x3b\x1f\xe4\x07\x1c\xb4\x45\xac\xa5\x91\xb5\xf5\x4a\xbb\xdd\x5d\x39\x76\x52\x7f\xf7\xb2\x92\x6c\x2b\xb2\x72\x2d\xd5\x7f\xda\x79\xef\xcd\x68\xf6\xcd\xe8\xf4\x84\xcd\x45\xc9\xe6\xdc\xe6\x84\x9c\xc2\xad\x4a\x45\xb9\x00\xad\xac\xa3\xda\xa8\x95\xb0\x42\x95\x60\x13\x23\xb4\x03\x83\x56\xab\xd2\x8a\xb9\x44\xc8\x94\x81\x14\xb5\x54\x1b\x8f\xe7\xb0\x94\x02\x4b\x07\x16\xcd\x4a\x24\x18\x92\x53\x72\x0a\xd7\x4a\x6f\x8c\x58\xe4\x0e\xde\x5d\xbf\x87\xf3\xf1\xe4\x9c\x9e\x8f\x27\x97\xbb\x24\x37\x65\x12\xfe\x08\x5c\x4a\xa8\x41\xd6\xeb\xa3\x59\x61\x1a\x12\x62\xd1\x01\xc5\x4a\x81\x16\x1a\x33\x2e\xa4\x2f\xee\x21\xf7\x79\xa5\x54\x4f\x9e\xbe\xe2\x46\xf0\xb9\x44\x0b\xdc\x20\x68\x6e\x2d\xa6\xb0\x12\x1c\x1c\x1a\xc3\x33\x65\x8a\xef\xed\x1e\x04\x73\xa9\x92\x65\x48\x70\xad\x95\x71\x70\xfb\x65\x7a\x33\xfb\x18\x3f\xde\x47\x77\xb3\x5f\x3e\x47\x3f\x8f\xce\xce\x5e\x7a\x67\x1f\xe8\xd9\xcb\x8a\x9b\x70\x59\x17\x1b\xf3\x24\x51\x55\xe9\x62\x6d\x54\x26\x24\xc6\xa5\x48\x96\x25\x2f\x70\xbb\x1d\xed\x45\x3f\xdd\x44\xb3\x87\xf8\xf1\xee\x53\xa3\xb7\x7f\xed\x49\x35\xad\x8a\x2b\x23\x3b\xe4\xfb\xeb\xbb\x28\x9a\xed\xc9\x87\xd7\x1e\xd9\x26\x06\xb1\xec\x91\x1f\xef\xa3\x38\xfa\xfc\x6b\x34\x9d\x46\xd3\x9a\xde\x3d\xe8\x09\x54\x16\x63\x2c\xe6\x98\xa6\x98\x7a\x09\xe2\x0c\xd7\x30\xc2\x24\x57\x10\xdf\x4e\xe3\xe9\x97\x59\x14\xc3\xdf\xe0\x10\x81\x72\x60\x2b\x6e\x98\x54\x0b\x96\x48\x55\xa5\x54\x94\xc2\x51\x55\x39\x5d\xb9\x50\xaa\xc5\x08\xa2\xaf\x37\x0f\x84\x88\xd2\x3a\x2e\x65\x5b\xdd\xbb\xf7\xf0\x42\x82\xa4\x32\x12\x28\x95\x2a\xe1\xce\x9b\x88\x52\x2b\xa4\xf7\x08\xa5\x36\x57\x4f\x14\x8d\x51\x06\x28\x35\xe8\xcc\x06\x2e\xe0\xf5\x67\x6f\x47\x40\xdb\x44\xc0\x5c\xa1\x59\x23\x1d\x3a\x6e\xc2\xc5\x33\x01\x00\x70\xdc\x00\xbd\x06\x06\x74\x9d\x0d\x61\x48\xb0\x30\xaa\xd2\x3c\x4d\x81\xd2\x4c\x99\x04\xa1\x01\x90\xa0\xb2\x68\x0a\x95\xfa\x0f\xa4\x1f\xdb\x53\x18\x30\x81\xef\x4f\x20\x32\xf8\x0d\x4e\x80\xae\x81\x55\xd6\xd4\xe3\xd2\x32\xfe\xf8\x09\x5c\xee\xf5\x02\x59\x02\xb5\x19\x30\xa5\x1d\x5b\x0a\x87\xac\xb9\x64\xb6\xeb\x74\x97\xd5\x53\x21\x41\x26\x3a\x59\xb0\x89\xdb\x9c\x1b\x64\x0e\x4d\x21\xca\x4c\x75\x32\x15\xcb\x54\x18\xa0\xba\x03\xfb\x2f\xf9\x7b\x7a\x03\x39\x3a\x2a\xc7\x41\xf6\x75\xf0\x74\x7d\x5c\xbc\xf7\x8b\xa9\x06\x5a\x74\x28\xfc\x35\x84\x04\x41\x92\xfb\xcb\x18\x5f\x5e\x5c\x0c\x06\xd5\x53\x09\x46\x29\xf7\x61\xd7\xc0\x3e\x26\x13\x64\x4b\x48\xc1\x45\x6b\xbd\xda\xcc\xa3\xc9\xf9\x65\x38\x0e\xc7\xe1\x04\x86\x2e\x16\xae\xae\x80\xa1\x4b\x58\xae\xac\xb3\x84\x04\x4e\x55\x49\x7e\xf0\x7b\xd3\x40\x6f\x72\xf8\x9d\x04\x50\x3f\xdf\x1e\x86\xa6\x0f\x27\xe0\x36\x7a\xe7\x34\xf8\xee\x8a\xa5\xb8\x62\x65\x25\xe5\xbe\x11\x75\xb3\x7a\x43\xba\x05\x8a\x7f\xc1\xa4\xd3\xae\xe0\xf5\x4c\x91\x20\x40\x29\xb2\x46\x7c\x53\x15\x83\xca\x81\x0f\xb4\x3c\xa0\x94\x5b\x5b\x15\xb8\x41\x0b\x03\x1a\x5c\x3b\xba\x40\x37\xac\xb3\x0b\xee\xb5\x36\x5d\x09\x8b\x83\xf5\x65\xa2\x75\xc3\xe1\xa6\x7b\x76\xfc\x7f\x4b\xe1\xb0\x48\x8f\x96\x42\x7b\x49\x8b\x67\x12\x2c\x9e\x85\x06\x4a\x53\x4c\x54\xa1\x0d\x5a\xbb\x1f\x7a\x4a\xad\x4b\xd5\x11\x05\xae\x8e\xc7\x65\x5f\x66\x6d\xc8\x1f\xd6\x6f\x22\x48\x6b\x4b\x7a\x37\xbc\x36\xbc\x67\x82\x3e\xb9\x39\x1c\x36\x58\xf0\xaf\xde\x7a\xa3\x14\xa0\x05\x3a\x9e\x72\xc7\xa9\xdf\x6a\x6f\x94\x73\x00\xf9\xbf\x57\x6b\x64\x31\x67\xcd\x4f\x81\xed\xa2\xe1\x9f\x56\x95\x60\xaa\x72\x37\xd3\x7e\xe9\xf5\xb0\x3e\x0b\xad\xc1\x36\xef\xf8\xf5\x5b\xb0\xee\x84\x92\x7f\x02\x00\x00\xff\xff\xed\x56\x6f\xc9\x72\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2162, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x6d\x6b\xe3\x46\x10\xc7\x5f\xdf\x7e\x8a\x39\x3b\xd0\x84\x76\xb5\x4e\x20\x04\x52\x1a\x28\x89\x29\x21\x77\x0e\xe4\x72\x70\x50\x8a\x58\xaf\x46\xd6\x9e\x57\x3b\xcb\xec\xca\x76\x72\xf5\x77\x2f\x8a\x62\x3b\x67\xb9\xa5\xdc\x4b\x69\xfe\xf3\x9b\x87\x9d\x99\xe1\x7b\x35\xb5\x5e\x4d\x75\xac\x84\x18\xc2\x1d\x15\xd6\xcf\x20\x50\x4c\x32\x30\x2d\x6c\xb4\xe4\x21\x1a\xb6\x21\x01\x63\x0c\xe4\xa3\x9d\x3a\x84\x92\x18\x0a\x0c\x8e\x9e\x5a\xbd\x86\xb9\xb3\xe8\x13\x44\xe4\x85\x35\x98\x89\xa1\x18\xc2\x35\x85\x27\xb6\xb3\x2a\xc1\xf1\xf5\x09\x9c\x8d\x4e\xcf\xe4\xd9\xe8\xf4\x62\x13\xe4\xd6\x9b\xec\x17\xd0\xce\xc1\x8b\x28\xb6\x7c\xe4\x05\x16\x99\x10\x11\x13\x48\x6c\x08\x82\x0d\x58\x6a\xeb\x44\x62\x1d\x60\x80\xa6\x22\xc8\xef\x6e\xf2\x9b\xfb\xc9\x38\x87\xbf\x21\x21\x82\xd4\xa0\x16\x9a\x95\xa3\x99\x32\x8e\x9a\x42\x5a\x6f\x93\xa4\x26\x85\x26\x65\x8e\x66\x03\x18\x7f\xb9\x7d\x6c\xeb\x7b\xac\xda\xd4\x9d\xa3\x65\x9b\xc1\x42\xb3\xd5\x53\x87\x11\x34\x23\x04\x1d\x23\x16\xb0\xb0\x1a\x12\x32\xeb\x92\xb8\xfe\x29\x6e\x45\x30\x75\x64\xe6\x99\xc0\x55\x20\x4e\x70\x77\x7f\x73\x3b\xf9\x23\xff\xfc\x69\xfc\x30\xf9\xfd\xe3\xf8\xb7\xc1\xd1\xd1\xb7\xbd\x7f\x97\xf2\xe8\xdb\x42\x73\x36\x7f\xa9\x37\xd7\xc6\x50\xe3\x53\x1e\x98\x4a\xeb\x30\xf7\xd6\xcc\xbd\xae\x71\xbd\x1e\x6c\xa1\x1f\x6e\xc7\x93\xc7\xfc\xf3\xc3\x87\x8e\xb7\xfd\xdc\x43\x75\xdd\xce\x1b\x76\x6f\x9c\x3f\x5d\x3f\x8c\xc7\x93\xad\xf3\xee\x73\xcf\x39\x1a\x46\xf4\x1b\x67\xf1\xd2\xd2\xc1\xe9\xd9\x45\x36\xca\x46\xd9\x29\xf4\xeb\x58\x0f\xe0\xea\x0a\x14\x26\xa3\x2a\x8a\x29\x0a\x51\xcf\x0b\xcb\x20\x03\x28\x0a\x49\xcd\x6d\x42\xd5\xa5\x24\x84\x69\xd8\x81\x94\x8e\x8c\x4e\xed\xec\x48\x19\xad\x6b\x47\x43\xca\x58\xd1\x52\x22\x33\x31\x48\xc9\x98\xf8\x09\xce\xe1\xfb\x3a\xd7\x03\x90\xaf\x0f\x07\x2a\xd5\xe1\x15\x9b\xcd\x9e\x7f\x08\xbc\xeb\x41\x0f\xdc\x75\x21\x4b\x9a\x5b\xb8\x48\x9a\x41\x5e\x83\x02\xb9\x2a\x0f\x0a\x86\xf0\x78\x7f\x73\x7f\xcc\x5f\xd1\x3c\x6b\x67\xe7\x27\x97\xf0\x91\x16\x08\xa9\x42\x98\xa2\xa3\x25\x24\xda\x6c\xc1\xb1\x76\x89\x66\x98\x2a\x64\x58\xda\x54\x81\xf5\x31\x69\xe7\xda\x99\xeb\xb0\x27\x99\x10\xb6\x84\x3f\xe1\x3d\xc8\x15\xa8\x26\xf2\xcb\x1a\x76\x46\xf8\xeb\xd7\x16\xeb\xc5\x3b\xe7\x41\xc6\xb2\xd7\x65\x85\xf5\x14\x8b\x02\x8b\xb7\x4e\x7b\x10\x51\xda\x5d\x08\xec\xac\xb1\xd2\x8c\x2a\x21\xd7\xd6\x97\xb4\x0b\xb3\x7b\xce\xad\xea\x7f\xc4\xde\xa3\x1d\x88\xb0\x83\xf4\x6d\xea\xcb\xc1\xbf\xab\xfd\xbc\xdb\xc5\xe6\xa6\xdf\x9a\x5d\xce\xdf\x2b\xc4\x3b\x53\xd5\x54\xc0\xe8\xe2\xfc\xbc\x67\x6b\xd9\xb3\x67\x1b\x40\xca\x02\x0d\xd5\x81\x31\x46\x90\xb2\x24\x36\xd8\x0e\x52\x2a\xa8\x37\x79\x70\xd5\x6f\xc2\xeb\xb4\x77\xa1\x7e\x5e\xfd\x87\x80\x96\x1e\xe4\x03\x1c\x38\x0f\xeb\xcb\x83\xab\xd6\x5f\xa9\x7f\x81\x83\xac\x31\xe9\x42\x27\x2d\x9b\x88\x7c\x30\xc4\xe0\x8d\xa8\x3d\x3a\xaf\x87\xd2\x4e\x55\x77\x0c\xd4\xc6\x9a\x7d\x8d\xe4\x81\x1b\x2f\xfe\x09\x00\x00\xff\xff\x55\x3a\xaa\x3c\x12\x06\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1554, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xd1\x4e\xdb\x4c\x10\x85\xaf\xd9\xa7\x18\x9c\x9b\xff\x57\x3b\xde\x24\x12\x42\x6a\x25\x6e\x00\xa9\x88\xaa\x48\xb4\x48\x48\x08\xa1\x8d\x3d\xb6\xb7\xb1\x77\x57\xb3\xe3\x10\x48\x79\xf7\xca\x4e\x20\x90\xa4\xa8\xbd\xcc\xce\x99\xef\xec\x9e\x1c\x0f\xf6\xf5\xc4\x3a\x3d\x31\xb1\x52\x6a\x00\xe7\x3e\xb7\xae\x84\xe0\xa3\x60\x60\x3f\xb3\xd1\x7a\x07\x31\x63\x1b\x04\x98\x62\xf0\x2e\xda\x49\x4d\x50\x78\x86\x9c\x42\xed\x1f\x3a\xbd\x81\x69\x6d\xc9\x09\x44\xe2\x99\xcd\x28\x55\x03\x35\x80\x63\x1f\x1e\xd8\x96\x95\xc0\x7f\xc7\xff\xc3\x78\x38\x1a\xe3\x78\x38\x3a\x7c\x36\x39\x73\x59\xfa\x11\x4c\x5d\x43\x2f\x8a\x1d\x9f\x78\x46\x79\xaa\x54\x24\x01\xa4\xd6\x43\xb0\x81\x0a\x63\x6b\x25\x6c\x02\x24\x94\x55\x1e\xee\xce\x4f\xee\x4e\x2e\xbe\x9d\xde\xc1\x2f\x10\x22\x40\x03\x7a\x66\x58\xd7\xbe\xd4\x59\xed\xdb\x1c\xad\xb3\x82\xbe\x95\xd0\x4a\x5a\xfb\x32\x81\xd3\xeb\xb3\x1f\x4a\xf5\xdb\xc9\x68\x7c\x98\x0e\xd3\x61\x3a\x82\xc5\x22\xfd\xe2\xa3\x38\xd3\xd0\xd3\x53\x02\x47\x47\xa0\x49\x32\x5d\xf9\x28\x51\xa9\x66\x9a\x5b\x06\x0c\xa0\x7d\x10\x3d\xb5\x42\x7a\xf9\x4a\xa5\xee\x4b\x12\x48\x16\x8b\xf4\xbc\x3f\xb8\xba\xfc\xda\xed\x23\x32\x09\x3f\x60\xe6\x9d\x63\x2a\xda\x48\x39\x20\x0a\x5b\x8a\x70\x00\x78\x01\x5a\x9a\xb0\x62\xa4\xe5\xe3\x9a\xf2\x3d\x63\x22\xf7\x4f\x94\xd8\xaf\xa4\x62\xb8\x23\x29\x31\x0c\x78\x0c\x1a\x70\x5e\xec\x14\xd8\x02\x6e\x60\x1f\x70\x0e\xba\x8d\xdc\xff\xe7\x4b\x05\xdc\x7e\x06\xa9\xc8\xa9\xbd\xda\x01\xc6\x62\xeb\xb5\x9a\x9a\x09\xe5\x39\xe5\xaf\x97\x36\x20\xaa\xb0\x6b\x0b\x5a\x4e\x63\x65\x98\xb4\x10\x37\xd6\x15\x7e\x6d\xb3\x8e\xf5\x45\xf5\x17\xde\x1b\xb4\x1d\x0e\x6b\xc8\xf6\x4c\x5f\xef\x3c\x9d\x6f\xde\xbb\x6b\x11\xb7\xdb\xd1\xac\xef\xfc\x56\xa1\xf6\xb2\xaa\xf1\x39\x0c\x0f\x0f\x0e\xb6\x66\x1d\xbb\x7c\xb4\x01\x10\x73\xca\x7c\x13\x98\x62\x04\xc4\xc2\x73\x46\x80\x18\x25\xf7\xad\x6c\x94\x02\x8e\xb6\x43\x58\xb5\x6e\x69\xf5\x61\xfe\x8e\xc0\xdf\x3b\xc0\xcb\xbe\x53\x57\x91\x78\x59\xec\x4f\x6f\x7e\x25\x3b\xea\xfc\x07\x20\x60\x43\x62\x72\x23\x06\xdb\x48\xbc\x81\x4d\x5e\x8d\x0b\x5b\xaf\xd2\xab\xed\x44\x4f\xfb\xef\x5b\x3f\x4f\xd3\x9f\xd1\x3b\xe0\xd6\x2d\xa3\xbe\xe9\x4b\xb8\xa1\xed\xf8\xd8\x8b\x63\x05\xb7\x2f\xb9\xbf\x27\xeb\xf2\xfd\x1d\x00\x00\xff\xff\xe9\x6a\xa8\xa2\xbe\x04\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1214, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

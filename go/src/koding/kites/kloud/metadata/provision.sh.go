// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x6f\xdb\x36\x10\xfd\x5b\xfc\x14\x57\x27\xd8\x5a\x6c\x14\x13\x03\x59\x80\x0e\x0b\x30\x24\x46\x11\xa4\x73\x81\x34\x05\x0a\x6c\x83\x41\x4b\x27\x8b\x33\xa5\x23\x8e\x94\xe3\x34\xcb\x77\x1f\xe8\x9f\x8a\xa2\xa4\x5d\xf3\x57\x44\xbe\x7b\xf7\xee\xc7\xa3\x0f\x5e\xa9\xa9\xa9\xd5\x54\xfb\x52\x88\x03\xb8\xa2\xdc\xd4\x33\x70\xe4\x83\x74\x4c\x0b\xe3\x0d\xd5\xe0\x33\x36\x2e\x00\xa3\x77\x54\x7b\x33\xb5\x08\x05\x31\xe4\xe8\x2c\xdd\x45\xbc\x86\xb9\x35\x58\x07\xf0\xc8\x0b\x93\x61\x2a\x0e\xc4\x01\x9c\x93\xbb\x63\x33\x2b\x03\xbc\x3e\x7f\x03\xc3\xa3\xe3\xa1\x1c\x1e\x1d\x9f\x6e\x93\x5c\xd6\x59\xfa\x33\x68\x6b\x61\x05\xf2\x91\x1f\x79\x81\x79\x2a\x84\xc7\x00\x12\x1b\x02\x67\x1c\x16\xda\xd8\x28\xee\xa6\x8c\x79\xad\xa5\xdb\x18\xbe\xd0\x6c\xf4\xd4\xa2\x07\xcd\x08\x4e\x7b\x8f\x39\x2c\x8c\x86\x80\xcc\xba\x20\xae\x7e\xf4\x3b\x10\x4c\x2d\x65\xf3\x54\xe0\xd2\x11\x07\xb8\xfa\x70\x71\x39\x7e\x37\xf9\xf4\x71\x74\x3d\xfe\xfd\x8f\xd1\x6f\x83\xc3\xc3\xfb\xce\xd9\x5b\x79\x78\xbf\xd0\x9c\xce\x57\x62\x27\x3a\xcb\xa8\xa9\xc3\xc4\x31\x15\xc6\xe2\xa4\x36\xd9\xbc\xd6\x15\x3e\x3c\x0c\x76\xa4\xef\x2f\x47\xe3\x9b\xc9\xa7\xeb\xf7\x6b\xbe\xdd\x67\x87\x6a\xdd\xaa\x49\xc3\xb6\x15\xfc\xf1\xfc\x7a\x34\x1a\xef\x82\xf7\x9f\x9d\x60\x9f\x31\x62\xbd\x0d\x16\x81\xb5\x83\x01\x66\x25\xc1\xe4\xea\x62\x72\xf1\x61\x3c\x9a\xc0\xbf\x10\x10\x41\x6a\x50\x0b\xcd\xca\xd2\x4c\x65\x96\x9a\x5c\x9a\xda\x04\x49\x4d\x70\x4d\x48\x2d\xcd\x06\x30\xfa\x7c\x79\x23\x84\xa9\x7d\xd0\xd6\x6e\xa8\x5f\xbf\x81\x7b\x91\x64\x0d\x5b\x90\xd2\x52\xa6\x43\xdc\x00\x29\xbd\xb1\x71\xc0\x52\xfa\x92\x6e\x25\x32\x13\x83\x94\x8c\x81\xef\xe0\x04\x1e\x6b\x7e\x18\x80\xdc\x24\x02\x15\x2a\xa7\xd6\xd4\x69\xd0\x9c\xce\xbe\x88\x24\x68\x06\x79\x0e\x0a\xe4\xb2\xe8\x03\x88\x64\xc6\xd4\x38\x9d\xe7\x20\x65\x41\x9c\x21\xac\x01\x22\x69\x3c\x72\x45\x79\xac\x4e\xbe\xdb\x9c\x42\xcf\xf8\x62\x73\x12\x53\xc0\x9f\xf0\x0a\xe4\x12\x54\xe3\x79\xb5\xe8\x9b\x88\xbf\x7f\x85\x50\x46\xbe\xc4\xd6\x20\x7d\x01\x8a\x5c\x50\x73\x13\x50\xad\xc7\xa3\xb0\x9a\x62\x9e\x63\xde\x8e\xea\xb0\x88\xa4\x30\xad\x2c\xb8\xbe\xf7\xa5\x66\x54\x01\xb9\x32\x75\x41\xad\x4c\xd5\x3c\x37\x0c\xd2\xb5\x60\xdf\x92\xbf\xc3\xd7\x93\xa3\xc5\xf2\xf4\x52\x7d\xee\x3d\x5d\x8a\x04\xed\x4a\x79\xbf\x6e\xb5\x54\xcb\xf8\xbf\x1c\x9e\xfc\x92\x91\x25\x6e\x15\xc2\x15\x48\xfe\x76\xc9\x2f\xca\xfb\x1f\x2c\xdd\x66\xc7\xe5\xe6\xa6\x67\xa4\xfb\x46\x3f\x86\x88\x24\xc9\xca\xb8\x3c\x47\xa7\x27\x27\xbd\x97\x74\x5b\x03\x13\x85\xb7\xdb\x81\x77\x31\x85\x11\x0f\x42\x54\xda\x6c\x7c\xb2\x72\xde\xe0\x78\x78\x9a\x1e\xa5\x47\xe9\x31\xf4\x2d\x22\x9c\x9d\x81\xc2\x90\xa9\x92\x7c\xf0\x42\x24\x81\x9a\xac\xdc\x9b\x73\x5d\x77\x74\x24\xfc\x25\x12\x58\xfd\xbd\xec\xdc\xd8\x87\x47\xa6\x15\xa2\x55\x74\xa7\xa1\xdf\x67\xe6\xfd\xeb\xf5\xc4\xcc\x1b\xbd\xd1\xc8\xb3\x2f\xc6\x81\x94\x39\x66\x54\x39\x46\xef\x77\x7e\x95\xd2\x87\x9c\x9e\x84\xc0\xd9\xd3\x81\xef\x64\xae\x66\xf3\xd3\xf2\x59\x84\xd8\x4c\x48\x5e\xf7\x3b\x3e\xb6\x2f\xe9\x06\xaf\x0f\xfb\x7b\x9d\x7c\xb5\xcd\xcf\x48\x01\x59\x61\xd0\xb9\x0e\x5a\xc6\x07\xe9\x19\x39\x7b\x50\xfc\xc9\xd8\xcc\xd4\x4c\xd5\xfa\x29\x57\xdb\xdb\xf4\x1f\x4f\x35\x70\x53\x6f\xd7\x3b\xbe\x57\x1d\x6c\xcc\x22\x57\x60\x5f\xb6\x36\xfd\x25\x58\x7b\x59\xe1\x87\xb3\xaf\x94\xfa\x5f\x00\x00\x00\xff\xff\x77\xaa\xbd\x0b\x08\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2056, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

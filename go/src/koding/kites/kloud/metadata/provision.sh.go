// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x6b\x1b\x39\x10\xfd\x5c\xfd\x8a\xa9\x1d\xb8\x84\x3b\xad\x9c\x40\x08\xe4\xb8\xc0\x91\x98\x23\xa4\xb5\x21\x4d\xa1\x50\x8a\x91\x77\x67\xbd\xaa\x65\x8d\x18\xcd\xda\x4e\x7a\xfe\xef\xc7\x7a\x13\x3b\xb5\x7d\x25\x1f\xa5\x79\xf3\xde\xcc\xd3\x8c\xba\xef\xcd\xd8\x05\x33\xb6\xa9\x52\xaa\x0b\x77\x54\xb8\x30\x81\x48\x49\x74\x64\x9a\xbb\xe4\x28\x40\xca\xd9\x45\x01\xc6\x14\x29\x24\x37\xf6\x08\x25\x31\x14\x18\x3d\x3d\x36\x78\x0b\x53\xef\x30\x08\x24\xe4\xb9\xcb\x31\x53\x5d\xd5\x85\x6b\x8a\x8f\xec\x26\x95\xc0\xf1\xf5\x09\x9c\xf5\x4e\xcf\xf4\x59\xef\xf4\xe2\x45\xe4\x36\xe4\xd9\x1f\x60\xbd\x87\x35\x28\x35\xfc\xc8\x73\x2c\x32\xa5\x12\x0a\x68\xac\x09\xa2\x8b\x58\x5a\xe7\x95\xb0\x8d\xd0\xc1\xbc\x22\x18\xdd\xdd\x8c\x6e\x86\x83\xfe\x08\xfe\x05\x41\x04\x6d\xc1\xcc\x2d\x1b\x4f\x13\x93\x7b\xaa\x0b\xed\x82\x13\x4d\xb5\xc4\x5a\x32\x4f\x93\x0e\xf4\xbf\xdc\x3e\x34\xfd\x3d\x54\x4d\xe9\xde\xd3\xa2\xa9\x60\x6e\xd9\xd9\xb1\xc7\x04\x96\x11\xa2\x4d\x09\x0b\x98\x3b\x0b\x82\xcc\xb6\x24\x9e\xfd\x96\x36\x20\x18\x7b\xca\xa7\x99\xc2\x65\x24\x16\xb8\x1b\xde\xdc\x0e\xfe\x19\x7d\xfe\xd4\xbf\x1f\xfc\xfd\xb1\xff\x57\xe7\xe8\xe8\xc7\xce\xdd\xa5\x3e\xfa\x31\xb7\x9c\x4d\xd7\xfd\x8e\x6c\x9e\x53\x1d\x64\x14\x99\x4a\xe7\x71\x14\x5c\x3e\x0d\x76\x86\xab\x55\x67\x43\xfa\xe1\xb6\x3f\x78\x18\x7d\xbe\xff\xd0\xf2\x6d\x8e\x3b\x54\xad\xdb\xa3\x9a\xfd\xab\xe4\x4f\xd7\xf7\xfd\xfe\x60\x93\xbc\x3d\xee\x24\xa7\x9c\x11\xc3\x4b\xb2\x5a\x5b\xda\x39\x3d\xbb\xc8\x7a\x59\x2f\x3b\x85\xfd\x3e\x56\x1d\xb8\xba\x02\x83\x92\x9b\x8a\x92\x24\xa5\x66\xd3\xc2\x31\xe8\x08\x86\xa2\x98\xa9\x13\x34\x6d\x49\x4a\x2d\x26\x28\xf0\x73\xf1\xab\x0e\x68\xcd\x28\xfc\xa8\x73\x0a\x81\xb1\xac\x1b\xa3\xb5\x16\x76\x98\xe0\x1c\xf4\x10\x8c\xcc\xe2\x33\x47\x36\x79\xda\xb2\x6c\xbb\x78\x33\x4b\xdb\x5f\x26\x96\x1b\x26\x25\x96\x41\x5f\x83\x01\xbd\x2c\x0f\x02\xba\xf0\x30\xbc\x19\x1e\xf3\x77\xcc\x9f\xac\x77\xd3\x93\x4b\xf8\x48\x73\x04\xa9\x10\xc6\xe8\x69\x01\x42\x2f\xf3\x7d\x6c\xbd\xd0\x04\xa5\x42\x86\x85\x93\x0a\x5c\x48\x62\xbd\x6f\xa6\xa9\xa5\x3d\xc9\x94\x72\x25\x7c\x85\xf7\xa0\x97\x60\xea\xc4\xeb\x05\x6b\x83\xf0\xed\xcf\x86\x36\xa8\x77\x3e\x80\x4e\xe5\x9e\x7f\x06\x67\x63\x2c\x0a\x2c\x5e\x27\xed\x90\xa8\xd2\x6d\x25\xb0\x8d\xa6\xca\x32\x1a\x41\x9e\xb9\x50\xd2\x56\x66\xfb\x50\x1b\xd4\x1b\xb4\x77\xd8\x0e\x28\x6c\x49\xf6\x63\xe6\xcb\xc1\xdb\xe5\x6e\xdd\xcd\xca\x72\xbd\x6f\xcd\xb6\xe6\x9f\x11\xea\x5d\x5e\xcd\xa8\x80\xde\xc5\xf9\xf9\x5e\xac\xe1\x9e\x3c\xb9\x08\x5a\x17\x98\xd3\x2c\x32\xa6\x04\x5a\x97\xc4\x39\x82\xd6\x49\x0a\xaa\x65\x67\xcc\xe0\x6a\xdf\x84\xe7\x39\x6e\xa5\x7e\x5f\xfe\x02\x40\x8b\x00\xfa\x1e\x0e\x2c\xfe\xea\xf2\xe0\x12\xed\x2f\xcb\xff\x90\x83\x9e\xa1\xd8\xc2\x8a\xd5\x75\x42\x3e\x28\xd1\x79\x05\x6a\xbe\x93\xe7\x2f\xd0\x8d\x4d\xbb\xe6\xe6\x25\x9a\x7d\x4f\x14\x80\xeb\xd0\x9a\xff\x75\x3d\x96\x3b\xd8\x46\x45\xaf\xc1\xa9\x82\x6f\x9b\x97\xf8\x15\xac\x71\xfc\xbf\x00\x00\x00\xff\xff\xc0\x06\x94\x99\x3d\x06\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1597, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xfb\x6b\x23\x37\x10\xc7\x7f\xb6\xfe\x8a\x39\x3b\xb4\x09\xad\x76\xed\x40\x09\xa4\x34\xd0\xc6\xa6\x84\xbb\x24\x90\x07\x14\x7a\xc5\xc8\xda\x59\xaf\xce\x5a\x8d\x3a\xd2\xfa\x91\xc3\xff\x7b\x59\xbf\x6f\xed\x40\x39\xff\xb6\x9a\xef\x7c\x66\x34\x0f\xb9\xf3\x21\x1d\x19\x97\x8e\x54\x28\x84\xe8\xc0\x47\xca\x8c\x1b\x83\xa7\x10\xa5\x67\x9a\x9a\x60\xc8\x41\xd0\x6c\x7c\x04\xc6\xe0\xc9\x05\x33\xb2\x08\x39\x31\x64\xe8\x2d\x2d\x6a\xbd\x82\x89\x35\xe8\x22\x04\xe4\xa9\xd1\x98\x88\x8e\xe8\xc0\x2d\xf9\x05\x9b\x71\x11\xe1\xfc\xf6\x02\x2e\xbb\xbd\x4b\x79\xd9\xed\x5d\x6d\x83\xdc\x39\x9d\xfc\x0c\xca\x5a\x58\x89\x42\xcd\x47\x9e\x62\x96\x08\x11\x30\x82\xc4\x8a\xc0\x1b\x8f\xb9\x32\xb6\x4e\xee\xa5\xa8\xe3\x5a\x4b\xb3\xda\x7d\xaa\xd8\xa8\x91\xc5\x00\x8a\x11\xbc\x0a\x01\x33\x98\x1a\x05\x11\x99\x55\x4e\x5c\xfe\x18\x76\x22\x18\x59\xd2\x93\x44\xe0\xdc\x13\x47\xf8\xf8\xd8\xbf\x7b\xf8\x73\xf8\xfa\x3c\x78\x7a\xf8\xfd\x7e\xf0\x5b\xfb\xec\xec\x6b\xe3\xec\x5a\x9e\x7d\x9d\x2a\x4e\x26\xab\x64\x87\x4a\x6b\xaa\x5c\x1c\x7a\xa6\xdc\x58\x1c\x3a\xa3\x27\x4e\x95\xb8\x5c\xb6\x77\xd0\x4f\x77\x83\x87\x97\xe1\xeb\xd3\xa7\x35\x6f\xf7\xd9\x40\xad\x4b\x35\xac\xd8\x1e\x38\x3f\xdf\x3e\x0d\x06\x0f\x3b\xe7\xfd\x67\xc3\x39\x68\x46\x74\x0d\xe7\xd7\xe7\xc1\x70\x70\xff\xc7\xa0\xdf\x1f\xf4\x57\xee\x87\x07\x0d\x40\x15\x70\x88\xe5\x08\xb3\x0c\xb3\x1a\x21\x50\x17\x04\xed\xde\xe5\x55\xd2\x4d\xba\x49\x0f\x8e\x4b\xb1\x6c\xc3\xcd\x0d\xa4\x18\x75\x5a\x50\x88\x41\x88\x72\x92\x19\x06\xe9\x21\x25\x1f\xd3\x89\x89\x98\xae\x6f\x25\x84\xae\xd8\x82\x94\x96\xb4\x8a\xf5\xec\x48\x19\x8c\xad\x47\x43\xca\x50\xd0\x4c\x22\x33\x31\x48\xc9\x18\x79\x01\xbf\xc0\xb7\xa5\x5a\xb6\x41\x4a\xaa\xa2\xaf\x22\xa4\xb1\xf4\x1b\x6c\x32\x7e\xfb\x2e\xf0\xbe\x8c\x47\xe0\x75\x21\x93\xa8\xb8\x86\x8b\x48\x95\x2e\x20\x9d\x2a\x4e\x2d\x8d\xb7\x61\x2d\x8d\xe1\xb3\x80\xd5\x6f\x67\xd3\x96\xaa\x4c\x1a\x67\xe2\x06\x58\xcb\x84\x88\x8a\x41\xde\x42\x0a\x72\x9e\x9f\x0c\xd1\x81\x97\xc7\xfe\xe3\x39\x7f\x41\xfd\xa6\xac\x99\x5c\x5c\xc3\x3d\x4d\x11\x62\x81\x30\x42\x4b\x33\x88\xb4\xdd\xa3\x73\x65\x23\x8d\x31\x16\xc8\x30\x33\xb1\x00\xe3\x42\x54\xd6\xd6\x83\xbf\xc6\x5e\x24\x42\x98\x1c\xfe\x86\x46\xbb\x97\x20\xf1\x5f\xe8\xc1\x3f\xbf\xd6\x60\x27\x5a\x2b\xd1\x07\x90\x73\x48\xab\xc0\xab\x6d\x5f\x13\xf6\x92\x96\x75\x20\x43\x7e\xd4\xcd\x74\x3b\x28\x87\x5e\x0d\x8a\x68\xe5\x46\xec\xa3\xe0\xda\x1e\x0a\xc5\x98\x46\xe4\xd2\xb8\x9c\x0e\x22\xed\x27\x67\x27\xfb\x3f\xf1\x1b\xbc\x13\x31\x0e\x28\xc7\xc6\xf4\xaf\x93\xa7\xf3\xe3\xe4\xeb\x26\x73\x75\xa2\x44\xfb\xc4\xbf\x95\x88\x56\x4b\x17\x25\x65\xd0\xbd\xea\x76\x8f\x8d\xb9\x11\x68\x03\xae\x62\xc4\x85\x47\x58\x54\x25\xfc\x70\x93\x66\x38\x4d\x5d\x65\xed\x8e\x5f\x9f\x6f\x9a\x0c\x52\xaa\x10\xaa\x12\x17\x18\x60\x0b\x42\xbb\x25\x28\x1f\xe5\x18\xe3\x49\xca\xd6\xb6\x23\x2d\xe0\x20\x93\xfa\xb2\xe3\x37\xe3\x41\xca\x0c\x35\x95\x9e\x31\x04\x90\x32\x27\xd6\x58\xef\x51\xcc\xe8\x68\xf1\xe0\xe6\xb8\x2f\x9b\x65\x5f\x5f\xfc\xa7\xf9\xbb\x02\xa1\x0b\x9a\x39\x90\x4f\x70\xe2\x85\x5d\x5e\x9f\x7c\x6a\x3e\x8b\x56\x13\xb7\x3a\x3b\xb9\x9a\xad\x66\xc3\x0e\x95\xef\x2c\xea\x3b\xc9\x82\x2c\x31\xaa\x4c\x45\x25\xab\x80\x7c\x32\xe3\xf6\x81\xa8\xfe\x1b\xd8\x3c\x0a\x66\x94\xae\x5f\xd7\x74\x6b\x4d\xbe\x04\x72\xc0\x95\x13\xff\x05\x00\x00\xff\xff\xb2\xc6\x4e\x8a\x61\x07\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1889, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

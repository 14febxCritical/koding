// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x6f\xdb\x36\x10\xfd\x5b\xfc\x14\x57\x27\xd8\x5a\x6c\x14\x93\x00\x59\x80\x0e\x33\x30\x24\x46\x11\xa4\x73\x81\x34\x05\x0a\x6c\x83\x41\x4b\x27\x8b\x33\xa5\x23\x8e\x94\xe3\x34\xcb\x77\x1f\xe8\x9f\x8a\xa2\xa4\x5d\xf3\x57\x44\xbe\x7b\xf7\xee\xc7\xa3\x0f\x5e\xa9\xa9\xa9\xd5\x54\xfb\x52\x88\x03\xb8\xa2\xdc\xd4\x33\x70\xe4\x83\x74\x4c\x0b\xe3\x0d\xd5\xe0\x33\x36\x2e\x00\xa3\x77\x54\x7b\x33\xb5\x08\x05\x31\xe4\xe8\x2c\xdd\x45\xbc\x86\xb9\x35\x58\x07\xf0\xc8\x0b\x93\x61\x2a\x0e\xc4\x01\x9c\x93\xbb\x63\x33\x2b\x03\xbc\x3e\x7f\x03\x27\x47\xc7\x27\xf2\xe4\xe8\xf8\x6c\x9b\xe4\xb2\xce\xd2\x9f\x41\x5b\x0b\x2b\x90\x8f\xfc\xc8\x0b\xcc\x53\x21\x3c\x06\x90\xd8\x10\x38\xe3\xb0\xd0\xc6\x46\x71\x37\x65\xcc\x6b\x2d\xdd\xc6\xf0\x85\x66\xa3\xa7\x16\x3d\x68\x46\x70\xda\x7b\xcc\x61\x61\x34\x04\x64\xd6\x05\x71\xf5\xa3\xdf\x81\x60\x6a\x29\x9b\xa7\x02\x97\x8e\x38\xc0\xd5\x87\x8b\xcb\xf1\xbb\xc9\xa7\x8f\xa3\xeb\xf1\xef\x7f\x8c\x7e\x1b\x1c\x1e\xde\x77\xce\xde\xca\xc3\xfb\x85\xe6\x74\xbe\x12\x3b\xd1\x59\x46\x4d\x1d\x26\x8e\xa9\x30\x16\x27\xb5\xc9\xe6\xb5\xae\xf0\xe1\x61\xb0\x23\x7d\x7f\x39\x1a\xdf\x4c\x3e\x5d\xbf\x5f\xf3\xed\x3e\x3b\x54\xeb\x56\x4d\x1a\xb6\xad\xe0\x8f\xe7\xd7\xa3\xd1\x78\x17\xbc\xff\xec\x04\xfb\x8c\x11\xeb\x6d\xb0\x08\xac\x1d\x0c\x30\x2b\x09\x26\x57\x17\x93\x8b\x0f\xe3\xd1\x04\xfe\x85\x80\x08\x52\x83\x5a\x68\x56\x96\x66\x2a\xb3\xd4\xe4\xd2\xd4\x26\x48\x6a\x82\x6b\x42\x6a\x69\x36\x80\xd1\xe7\xcb\x1b\x21\x4c\xed\x83\xb6\x76\x43\xfd\xfa\x0d\xdc\x8b\x24\x6b\xd8\x82\x94\x96\x32\x1d\xe2\x06\x48\xe9\x8d\x8d\x03\x96\xd2\x97\x74\x2b\x91\x99\x18\xa4\x64\x0c\x7c\x07\xa7\xf0\x58\xf3\xc3\x00\xe4\x26\x11\xa8\x50\x39\xb5\xa6\x4e\x83\xe6\x74\xf6\x45\x24\x41\x33\xc8\x73\x50\x20\x97\x45\x1f\x40\x24\x33\xa6\xc6\xe9\x3c\x07\x29\x0b\xe2\x0c\x61\x0d\x10\x49\xe3\x91\x2b\xca\x63\x75\xf2\xdd\xe6\x14\x7a\xc6\x17\x9b\x93\x98\x02\xfe\x84\x57\x20\x97\xa0\x1a\xcf\xab\x45\xdf\x44\xfc\xfd\x2b\x84\x32\xf2\x25\xb6\x06\xe9\x0b\x50\xe4\x82\x9a\x9b\x80\x6a\x3d\x1e\x85\xd5\x14\xf3\x1c\xf3\x76\x54\x87\x45\x24\x85\x69\x65\xc1\xf5\xbd\x2f\x35\xa3\x0a\xc8\x95\xa9\x0b\x6a\x65\xaa\xe6\xb9\x61\x90\xae\x05\xfb\x96\xfc\x1d\xbe\x9e\x1c\x2d\x96\xa7\x97\xea\x73\xef\xe9\x52\x24\x68\x57\xca\xfb\x75\xab\xa5\x5a\xc6\xff\xe5\xc9\xe9\x2f\x19\x59\xe2\x56\x21\x5c\x81\xe4\x6f\x97\xfc\xa2\xbc\xff\xc1\xd2\x6d\x76\x5c\x6e\x6e\x7a\x46\xba\x6f\xf4\x63\x88\x48\x92\xac\x8c\xcb\x73\x74\x76\x7a\xda\x7b\x49\xb7\x35\x30\x51\x78\xbb\x1d\x78\x17\x53\x18\xf1\x20\x44\xa5\xcd\xc6\x27\x2b\xe7\x0d\x8e\x4f\xce\xd2\xa3\xf4\x28\x3d\x86\xbe\x45\x84\xe1\x10\x14\x86\x4c\x95\xe4\x83\x17\x22\x09\xd4\x64\xe5\xde\x9c\xeb\xba\xa3\x23\xe1\x2f\x91\xc0\xea\xef\x65\xe7\xc6\x3e\x3c\x32\xad\x10\xad\xa2\x3b\x0d\xfd\x3e\x33\xef\x5f\xaf\x27\x66\xde\xe8\x8d\x46\x9e\x7d\x31\x0e\xa4\xcc\x31\xa3\xca\x31\x7a\xbf\xf3\xab\x94\x3e\xe4\xf4\x24\x04\x86\x4f\x07\xbe\x93\xb9\x9a\xcd\x4f\xcb\x67\x11\x62\x33\x21\x79\xdd\xef\xf8\xd8\xbe\xa4\x1b\xbc\x3e\xec\xef\x75\xf2\xd5\x36\x3f\x23\x05\x64\x85\x41\xe7\x3a\x68\x19\x1f\xa4\x67\xe4\xec\x41\xf1\x27\x63\x33\x53\x33\x55\xeb\xa7\x5c\x6d\x6f\xd3\x7f\x3c\xd5\xc0\x4d\xbd\x5d\xef\xf8\x5e\x75\xb0\x31\x8b\x5c\x81\x7d\xd9\xda\xf4\x97\x60\xed\x65\x85\x1f\x86\xc3\xaf\xd4\xfa\x5f\x00\x00\x00\xff\xff\x60\x29\x05\x22\x09\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2057, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

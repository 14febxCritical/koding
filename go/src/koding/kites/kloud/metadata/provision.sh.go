// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x61\x6b\xe3\x46\x10\x86\x3f\xdf\xfe\x8a\x39\x3b\xd0\x84\x76\xb5\x4e\x20\x04\x52\x1a\x28\x89\x29\x21\x77\x36\xe4\x72\x70\x50\x8a\x59\x4b\x23\x6b\xcf\xab\x9d\x65\x76\x64\x3b\xb9\xfa\xbf\x17\x45\x89\x9d\xb3\xdd\xe3\x3e\x4a\xf3\xce\xf3\xce\x8c\x66\xd4\x7f\x6f\xa6\x2e\x98\xa9\x4d\x95\x52\x7d\xb8\xa3\xc2\x85\x19\x44\x4a\xa2\x23\xd3\xc2\x25\x47\x01\x52\xce\x2e\x0a\x30\xa6\x48\x21\xb9\xa9\x47\x28\x89\xa1\xc0\xe8\xe9\xb1\xd5\x5b\x98\x7b\x87\x41\x20\x21\x2f\x5c\x8e\x99\xea\xab\x3e\x5c\x53\x7c\x64\x37\xab\x04\x8e\xaf\x4f\xe0\x6c\x70\x7a\xa6\xcf\x06\xa7\x17\xaf\x26\xb7\x21\xcf\x7e\x03\xeb\x3d\x3c\x8b\x52\xcb\x47\x5e\x60\x91\x29\x95\x50\x40\x63\x43\x10\x5d\xc4\xd2\x3a\xaf\x84\x6d\x84\x1e\xe6\x15\xc1\xe4\xee\x66\x72\x33\x1e\x0d\x27\xf0\x2f\x08\x22\x68\x0b\x66\x61\xd9\x78\x9a\x99\xdc\x53\x53\x68\x17\x9c\x68\x6a\x24\x36\x92\x79\x9a\xf5\x60\xf8\xe5\xf6\xa1\xed\xef\xa1\x6a\x4b\xf7\x9e\x96\x6d\x05\x0b\xcb\xce\x4e\x3d\x26\xb0\x8c\x10\x6d\x4a\x58\xc0\xc2\x59\x10\x64\xb6\x25\x71\xfd\x4b\xda\x88\x60\xea\x29\x9f\x67\x0a\x57\x91\x58\xe0\x6e\x7c\x73\x3b\xfa\x6b\xf2\xf9\xd3\xf0\x7e\xf4\xe7\xc7\xe1\x1f\xbd\xa3\xa3\x6f\x3b\xef\x2e\xf5\xd1\xb7\x85\xe5\x6c\xfe\xdc\xef\xc4\xe6\x39\x35\x41\x26\x91\xa9\x74\x1e\x27\xc1\xe5\xf3\x60\x6b\x5c\xaf\x7b\x1b\xe8\x87\xdb\xe1\xe8\x61\xf2\xf9\xfe\x43\xc7\xdb\x3c\xee\xa0\xba\x69\x4f\x1a\xf6\x6f\x92\x3f\x5d\xdf\x0f\x87\xa3\x4d\xf2\xf6\x71\x27\x39\xe5\x8c\x18\x5e\x93\xd5\xf3\x48\x7b\xa7\x67\x17\xd9\x20\x1b\x64\xa7\xb0\xdf\xc7\xba\x07\x57\x57\x60\x50\x72\x53\x51\x92\xa4\x54\x3d\x2f\x1c\x83\x8e\x60\x28\x8a\x99\x3b\x41\xd3\x95\xa4\xd4\x72\x86\x02\xdf\x17\xbf\xee\x81\xd6\x8c\xc2\x8f\x3a\xa7\x10\x18\xcb\xa6\x1d\xb4\xd6\xc2\x0e\x13\x9c\x83\x1e\x83\x91\x3a\xbe\x30\xb2\xd9\xd3\x96\xb2\xed\xe2\xa7\x29\x5d\x7f\x99\x58\x6e\x49\x4a\x2c\x83\xbe\x06\x03\x7a\x55\x1e\x14\xf4\xe1\x61\x7c\x33\x3e\xe6\xaf\x98\x3f\x59\xef\xe6\x27\x97\xf0\x91\x16\x08\x52\x21\x4c\xd1\xd3\x12\x84\x5e\xf7\xfb\xd8\x7a\xa1\x19\x4a\x85\x0c\x4b\x27\x15\xb8\x90\xc4\x7a\xdf\x6e\x53\x87\x3d\xc9\x94\x72\x25\xfc\x0d\xef\x41\xaf\xc0\x34\x89\x9f\x0f\xac\x0b\xc2\x3f\xbf\xb7\xd8\xa0\xde\xf9\x00\x3a\x95\x7b\xf3\x33\x58\x4f\xb1\x28\xb0\x78\x9b\xb4\x03\x51\xa5\xdb\x5a\x60\x17\x4d\x95\x65\x34\x82\x5c\xbb\x50\xd2\xd6\x66\xfb\xa1\x36\xaa\x9f\xf0\xde\xa1\x1d\x70\xd8\x42\xf6\x63\xe6\xcb\xc1\xb7\xab\xdd\xba\xdb\x93\xe5\x66\x7f\x34\xdb\x9a\xbf\x57\xa8\x77\x79\x55\x53\x01\x83\x8b\xf3\xf3\xbd\x58\xcb\x9e\x3d\xb9\x08\x5a\x17\x98\x53\x1d\x19\x53\x02\xad\x4b\xe2\x1c\x41\xeb\x24\x05\x35\xb2\xb3\x66\x70\xb5\x3f\x84\x97\x3d\xee\xac\x7e\x5d\xfd\x40\x40\xcb\x00\xfa\x1e\x0e\x1c\xfe\xfa\xf2\xe0\x11\xed\x1f\xcb\xff\xc0\x41\xd7\x28\xb6\xb0\x62\x75\x93\x90\x0f\x5a\xf4\xde\x88\xda\xdf\xc9\xcb\x2f\xd0\x4d\x4d\x77\xe6\xe6\x35\x9a\x7d\x4d\x14\x80\x9b\xa0\xfe\x0b\x00\x00\xff\xff\xcc\x45\xf6\x7e\xec\x05\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1516, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

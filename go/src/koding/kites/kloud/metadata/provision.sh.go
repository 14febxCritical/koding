// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xfb\x6b\x23\x37\x10\xc7\x7f\xb6\xfe\x8a\x39\x27\xb4\x09\xad\x56\x76\xa0\x04\x52\x1a\x68\xe3\xa5\x84\x5c\x1c\xc8\x03\x0e\x7a\x65\x91\x77\x67\xbd\x3a\x6b\x57\xea\x48\xeb\x47\xae\xfe\xdf\x8b\xd6\xcf\x5b\x3b\xa1\x9c\x7f\x5b\xe9\x3b\x9f\x19\xcd\xcb\x27\x1f\xc4\x48\x55\x62\x24\x5d\xc1\xd8\x09\xdc\x99\x4c\x55\x63\xb0\xc6\x79\x6e\xc9\x4c\x95\x53\xa6\x02\x97\x92\xb2\x1e\x08\x9d\x35\x95\x53\x23\x8d\x90\x1b\x82\x0c\xad\x36\x8b\xa0\x97\x30\xd1\x0a\x2b\x0f\x0e\x69\xaa\x52\x8c\xd8\x09\x3b\x81\x1b\x63\x17\xa4\xc6\x85\x87\xb3\x9b\x73\xb8\xe8\xf5\x2f\xf8\x45\xaf\x7f\xb9\x71\x72\x5b\xa5\xd1\xcf\x20\xb5\x86\x46\xe4\x02\x1f\x69\x8a\x59\xc4\x98\x43\x0f\x1c\x6b\x03\x56\x59\xcc\xa5\xd2\x21\xb8\xe7\x22\xf8\xd5\xda\xcc\x82\xf9\x54\x92\x92\x23\x8d\x0e\x24\x21\x58\xe9\x1c\x66\x30\x55\x12\x3c\x12\xc9\xdc\x50\xf9\xa3\xdb\x8a\x60\xa4\x4d\x3a\x89\x18\xce\xad\x21\x0f\x77\x0f\x83\xdb\xe1\x9f\xc9\xcb\x53\xfc\x38\xfc\xfd\x3e\xfe\xad\x7b\x7a\xfa\xb5\x75\x76\xc5\x4f\xbf\x4e\x25\x45\x93\x26\xd8\x44\xa6\xa9\xa9\x2b\x9f\x58\x32\xb9\xd2\x98\x54\x2a\x9d\x54\xb2\xc4\xe5\xb2\xbb\x85\x7e\xbc\x8d\x87\xcf\xc9\xcb\xe3\xc7\x15\x6f\xfb\xd9\x42\xad\x52\x95\xd4\xa4\xf7\x8c\x9f\x6e\x1e\xe3\x78\xb8\x35\xde\x7d\xb6\x8c\x5d\x4a\x88\x55\xcb\xf8\xe5\x29\x4e\xe2\xfb\x3f\xe2\xc1\x20\x1e\x34\xe6\xfb\x07\x2d\x40\xed\x30\xc1\x72\x84\x59\x86\x59\x40\x30\x4f\xd2\x42\x17\xd3\xc2\x40\x72\x37\x48\x06\x0f\xc3\x38\x81\x7f\xc1\x23\x02\x97\x20\xa6\x92\x84\x36\x63\x91\x6a\x53\x67\x5c\x55\xca\x73\x53\x7b\x5b\xfb\x48\x9b\x71\x17\xe2\x4f\xb7\xcf\x8c\x35\xd6\xdd\xfe\xc5\x65\xd4\x8b\x7a\x51\x1f\x0e\xd3\xb9\xec\xc2\xf5\x35\x08\xf4\xa9\x28\x8c\xf3\x8e\xb1\x72\x92\x29\x02\x6e\x41\x18\xeb\xc5\x44\x79\x14\xab\xcc\x30\x96\xd6\xa4\x81\x73\x6d\x52\xe9\x43\xff\x71\xee\x94\x0e\xed\xc5\xb9\x2b\xcc\x8c\x23\x91\x21\xe0\x9c\xd0\xd3\x02\x7e\x81\x6f\xd3\xbd\xec\x02\x5f\xc7\x08\xc2\x97\x76\x8d\x8d\xc6\xaf\xdf\x05\xde\x95\xe2\x00\xbc\x2a\x46\xe4\x25\x05\x38\xf3\xa6\x4e\x8b\x5d\xc6\xd6\x6e\xb5\x19\xc3\x67\x06\xcd\xef\xfd\x6c\x36\x3d\xfe\x30\x78\x38\xa3\x2f\x98\xbe\x4a\xad\x26\xe7\x57\x70\x6f\xa6\x08\xbe\x40\x18\xa1\x36\x33\xf0\x66\x33\x6a\x67\x52\x7b\x33\x46\x5f\x20\xc1\x4c\xf9\x02\x54\xe5\xbc\xd4\x3a\xcc\xc6\x2a\xb0\xf3\x88\x31\x95\xc3\x5f\xd0\xea\x88\x25\x70\xfc\x07\xfa\xf0\xf7\xaf\x01\x5c\x35\xb1\x79\x49\xc0\x6f\x40\x00\x9f\xe7\x47\x1f\xd7\x69\x48\x1f\x80\xcf\x41\xd4\x8e\x9a\xad\xb1\x92\x6c\x39\x9d\x8e\xae\x80\xbb\xfc\xa0\xa2\x62\xd3\x70\xfb\x56\x2d\x0a\xeb\xe4\x6a\xcf\x0b\xae\xee\x5d\x21\x09\x85\x47\x2a\x55\x95\x9b\x3d\x4f\xbb\xee\xd9\xca\xfe\x8f\xff\x16\xef\x88\x8f\x3d\xca\xe1\xa5\xf8\x74\xf4\x74\x7e\x18\x7c\x28\x34\xd5\x47\x52\xb4\x0b\xfc\x5b\x09\xeb\x74\xd2\xa2\x34\x19\xf4\x2e\x7b\xbd\xc3\xcb\x5c\x31\xd4\x0e\x1b\x1f\x7e\x61\x11\x16\x75\x09\x3f\x5c\x8b\x0c\xa7\xa2\xaa\xb5\xde\xf2\xc3\xf9\xba\x13\x80\x73\xe9\x5c\x5d\xe2\x02\x1d\x6c\x40\xa8\x37\x04\x69\x3d\x1f\xa3\x3f\x4a\xd9\xdc\x6d\x49\x0b\xd8\x8b\x24\x3c\x76\xfc\xaa\x2c\x70\x9e\x61\x6a\x4a\x4b\xe8\x1c\x70\x9e\x1b\x4a\x31\xcc\x92\xcf\xcc\xc1\xf0\xc1\xf5\x61\x5d\xd6\x03\xbf\x7a\xf8\x4f\xf3\x37\x05\x2c\x2d\xcc\xac\x02\xfe\x08\x47\x36\xf5\xf2\xea\xe8\xba\xf9\xcc\x3a\x6d\x5c\x73\x76\x74\x3c\x3b\xed\x82\xed\x2b\xdf\x18\xd6\x37\x82\x05\x5e\xa2\x97\x99\xf4\x92\xd7\x0e\xe9\x68\xc4\xdd\x3d\x51\xf8\x3b\x59\x2f\x06\x35\x12\xab\x2d\x2d\x36\xb7\xd1\x17\x67\x2a\xa0\xba\x5a\x4f\x72\x98\xbe\x96\x34\x38\xe1\x8d\xd6\x15\xbb\x3e\x7b\x4f\x15\xea\xf7\x5f\x00\x00\x00\xff\xff\x42\x35\xd1\x50\xf8\x07\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2040, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xfb\x6b\xe3\x46\x10\xc7\x7f\xf6\xfe\x15\x73\x76\x68\x13\xda\xd5\xda\x81\x12\x48\x69\xa0\x8d\x4d\x09\x77\x49\x20\x0f\x28\x94\x62\xd6\xd2\xc8\xda\xf3\x6a\x67\x3b\xbb\xf2\x23\x87\xff\xf7\x22\x2b\x7e\x9c\xe5\x96\xb6\x3f\x6a\x67\xe6\xf3\x1d\xcd\xab\xf7\x41\x4d\x8c\x53\x13\x1d\x0a\x21\x7a\xf0\x91\x32\xe3\xa6\xe0\x29\x44\xe9\x99\xe6\x26\x18\x72\x10\x52\x36\x3e\x02\x63\xf0\xe4\x82\x99\x58\x84\x9c\x18\x32\xf4\x96\x56\xb5\xbf\x86\x99\x35\xe8\x22\x04\xe4\xb9\x49\x31\x11\x3d\xd1\x83\x5b\xf2\x2b\x36\xd3\x22\xc2\xf9\xed\x05\x5c\xf6\x07\x97\xf2\xb2\x3f\xb8\xda\x8a\xdc\xb9\x34\xf9\x1e\xb4\xb5\xb0\x71\x0a\x35\x1f\x79\x8e\x59\x22\x44\xc0\x08\x12\x2b\x02\x6f\x3c\xe6\xda\xd8\x3a\xb9\x97\xa2\xd6\xb5\x96\x16\x75\xf8\x5c\xb3\xd1\x13\x8b\x01\x34\x23\x78\x1d\x02\x66\x30\x37\x1a\x22\x32\xeb\x9c\xb8\xfc\x36\xec\x9c\x60\x62\x29\x9d\x25\x02\x97\x9e\x38\xc2\xc7\xc7\xe1\xdd\xc3\xaf\xe3\xd7\xe7\xd1\xd3\xc3\xcf\xf7\xa3\x9f\xba\x67\x67\x5f\x8e\xde\xae\xe5\xd9\x97\xb9\xe6\x64\xb6\x49\x76\xac\xd3\x94\x2a\x17\xc7\x9e\x29\x37\x16\xc7\xce\xa4\x33\xa7\x4b\x5c\xaf\xbb\x3b\xe8\xa7\xbb\xd1\xc3\xcb\xf8\xf5\xe9\x53\xc3\xdb\x7d\x1e\xa1\x9a\x52\x8d\x2b\xb6\x07\xc1\xcf\xb7\x4f\xa3\xd1\xc3\x2e\x78\xff\x79\x14\x1c\x52\x46\x74\x47\xc1\xaf\xcf\xa3\xf1\xe8\xfe\x97\xd1\x70\x38\x1a\x6e\xc2\x0f\x1f\x8e\x00\x55\xc0\x31\x96\x13\xcc\x32\xcc\x6a\x84\xc0\xb4\x20\xe8\x0e\x2e\xaf\x92\x7e\xd2\x4f\x06\xd0\x2e\xc5\xba\x0b\x37\x37\xa0\x30\xa6\xaa\xa0\x10\x83\x10\xe5\x2c\x33\x0c\xd2\x83\x22\x1f\xd5\xcc\x44\x54\xcd\x5f\x09\x91\x56\x6c\x41\x4a\x4b\xa9\x8e\xf5\xec\x48\x19\x8c\xad\x47\x43\xca\x50\xd0\x42\x22\x33\x31\x48\xc9\x18\x79\x05\x3f\xc0\xd7\xa5\x5a\x77\x41\x4a\xaa\xa2\xaf\x22\xa8\x58\xfa\x77\x6c\x32\x7d\xfb\x5f\xe0\x7d\x19\x5b\xe0\xa6\x90\x49\xd4\x5c\xc3\x45\xa4\x2a\x2d\x40\xcd\x35\x2b\x4b\xd3\xad\xac\xa5\xa9\x88\x9a\x41\xde\x82\x02\xb9\xcc\x4f\x86\xf6\xe0\xe5\x71\xf8\x78\xce\x9f\x31\x7d\xd3\xd6\xcc\x2e\xae\xe1\x9e\xe6\x08\xb1\x40\x98\xa0\xa5\x05\x44\xda\xee\xc7\xb9\xb6\x91\xa6\x18\x0b\x64\x58\x98\x58\x80\x71\x21\x6a\x6b\xeb\x81\x6e\xb0\x17\x89\x10\x26\x87\xdf\xe1\xa8\x8d\x6b\x90\xf8\x27\x0c\xe0\x8f\x1f\x6b\xb0\x13\x9d\x8d\xd3\x07\x90\x4b\x50\x55\xe0\xcd\x16\x37\x84\xbd\x4b\xc7\x3a\x90\x21\x6f\x75\x49\x6d\x07\xe0\x30\xea\x88\x22\x3a\xb9\x11\x7b\x15\x6c\xec\xa1\xd0\x8c\x2a\x22\x97\xc6\xe5\x74\xa0\xb4\x9f\x88\x9d\xdb\xbf\xd1\x3f\xe2\x9d\xd0\x38\xa0\xb4\x8d\xea\xb7\x93\xaf\xcb\x76\xf2\x75\x63\xb9\x3a\x51\xa2\x7d\xe2\x5f\xbb\x88\x4e\x27\x2d\x4a\xca\xa0\x7f\xd5\xef\xb7\x8d\xb9\x11\x68\x03\x6e\x34\xe2\xca\x23\xac\xaa\x12\xbe\xb9\x51\x19\xce\x95\xab\xac\xdd\xf1\xeb\xf7\xf7\x26\x83\x94\x3a\x84\xaa\xc4\x15\x06\xd8\x82\xd0\x6e\x09\xda\x47\x39\xc5\x78\x92\xb2\xb5\xed\x48\x2b\x38\xc8\xa4\xfe\xd9\xe9\x9b\xf1\x20\x65\x86\x29\x95\x9e\x31\x04\x90\x32\x27\x4e\xb1\xde\x8f\x98\x51\x6b\xa1\xe0\xa6\xdd\x97\xf7\x25\x6e\x7e\xfc\xbb\xe5\x3f\x38\xd0\xc2\x81\x7c\x82\x13\x87\x73\x7d\x7d\xf2\x82\xb4\x2e\x45\xc3\xf8\x0f\x80\xf6\x6e\xb6\xda\x22\xfe\x26\x61\x90\x25\x46\x9d\xe9\xa8\x65\x15\x90\x4f\xaa\x76\x0f\x9c\xea\x13\xff\x2e\x68\x26\xaa\xb9\x9c\x6a\x6b\x4d\x3e\x07\x72\xc0\x95\x13\x7f\x05\x00\x00\xff\xff\x32\x08\xe0\xc1\x3d\x07\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1853, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

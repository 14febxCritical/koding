// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xe1\x6a\x23\x37\x10\xc7\x3f\x9f\x9e\x62\xce\x0e\x34\xa1\xd5\xca\x09\x84\x40\x4a\x03\x25\x31\x25\xe4\xce\x81\x5c\x0e\x0e\x4a\x59\x64\xed\xac\x57\x67\xad\x46\x8c\xb4\xb6\x93\xab\xdf\xbd\x6c\xd6\xb1\x73\x5e\xb7\xb4\xfd\x28\xcd\xcc\xef\x3f\x33\x9a\xd1\xf0\xbd\x9a\x5a\xaf\xa6\x3a\x56\x42\x0c\xe1\x8e\x0a\xeb\x67\x10\x28\x26\x19\x98\x16\x36\x5a\xf2\x10\x0d\xdb\x90\x80\x31\x06\xf2\xd1\x4e\x1d\x42\x49\x0c\x05\x06\x47\x4f\xad\xbf\x86\xb9\xb3\xe8\x13\x44\xe4\x85\x35\x98\x89\xa1\x18\xc2\x35\x85\x27\xb6\xb3\x2a\xc1\xf1\xf5\x09\x9c\x8d\x4e\xcf\xe4\xd9\xe8\xf4\xe2\x55\xe4\xd6\x9b\xec\x27\xd0\xce\xc1\x8b\x53\x6c\xf9\xc8\x0b\x2c\x32\x21\x22\x26\x90\xd8\x10\x04\x1b\xb0\xd4\xd6\x89\xc4\x3a\xc0\x00\x4d\x45\x90\xdf\xdd\xe4\x37\xf7\x93\x71\x0e\x7f\x42\x42\x04\xa9\x41\x2d\x34\x2b\x47\x33\x65\x1c\x35\x85\xb4\xde\x26\x49\x4d\x0a\x4d\xca\x1c\xcd\x06\x30\xfe\x72\xfb\xd8\xd6\xf7\x58\xb5\xa9\x3b\x47\xcb\x36\x83\x85\x66\xab\xa7\x0e\x23\x68\x46\x08\x3a\x46\x2c\x60\x61\x35\x24\x64\xd6\x25\x71\xfd\x43\xdc\x3a\xc1\xd4\x91\x99\x67\x02\x57\x81\x38\xc1\xdd\xfd\xcd\xed\xe4\xb7\xfc\xf3\xa7\xf1\xc3\xe4\xd7\x8f\xe3\x5f\x06\x47\x47\xdf\xf6\xee\x2e\xe5\xd1\xb7\x85\xe6\x6c\xfe\x52\x6f\xae\x8d\xa1\xc6\xa7\x3c\x30\x95\xd6\x61\xee\xad\x99\x7b\x5d\xe3\x7a\x3d\xd8\x42\x3f\xdc\x8e\x27\x8f\xf9\xe7\x87\x0f\x1d\x6f\x7b\xdc\x43\x75\xdd\xce\x1b\x76\x6f\x82\x3f\x5d\x3f\x8c\xc7\x93\x6d\xf0\xee\xb8\x17\x1c\x0d\x23\xfa\xd7\x60\xf1\xd2\xd2\xc1\xe9\xd9\x45\x36\xca\x46\xd9\x29\xf4\xeb\x58\x0f\xe0\xea\x0a\x14\x26\xa3\x2a\x8a\x29\x0a\x51\xcf\x0b\xcb\x20\x03\x28\x0a\x49\xcd\x6d\x42\xd5\xa5\x24\x84\x69\xd8\x81\x94\x8e\x8c\x4e\xed\xec\x48\x19\xad\x6b\x47\x43\xca\x58\xd1\x52\x22\x33\x31\x48\xc9\x98\xf8\x09\xce\xe1\xfb\x3a\xd7\x03\x90\x9b\x87\x03\x95\xea\xb0\xc1\x66\xb3\xe7\xff\x05\xde\xf5\xa0\x07\xee\xba\x90\x25\xcd\x2d\x5c\x24\x6a\x4c\xb5\x1b\xa3\x8d\xac\xa3\x99\x48\x9a\x41\x5e\x83\x02\xb9\x2a\x0f\x86\x0e\xe1\xf1\xfe\xe6\xfe\x98\xbf\xa2\x79\xd6\xce\xce\x4f\x2e\xe1\x23\x2d\x10\x52\x85\x30\x45\x47\x4b\x48\xf4\xba\x1f\xc7\xda\x25\x9a\x61\xaa\x90\x61\x69\x53\x05\xd6\xc7\xa4\x9d\x6b\xa7\xb1\xc3\x9e\x64\x42\xd8\x12\x7e\x87\xf7\x20\x57\xa0\x9a\xc8\x2f\x0b\xda\x19\xe1\x8f\x9f\x5b\xac\x17\xef\x9c\x07\x19\xcb\x5e\xff\x15\xd6\x53\x2c\x0a\x2c\xde\x06\xed\x41\x44\x69\x77\x12\xd8\x59\x63\xa5\x19\x55\x42\xae\xad\x2f\x69\x27\xb3\x7b\xe8\xad\xd7\xbf\xd0\xde\xa3\x1d\x50\xd8\x41\xfa\x36\xf5\xe5\xe0\xed\x6a\x3f\xef\xf6\xad\xb8\xe9\xb7\x66\x97\xf3\xf7\x1e\xe2\x9d\xa9\x6a\x2a\x60\x74\x71\x7e\xde\xb3\xb5\xec\xd9\xb3\x0d\x20\x65\x81\x86\xea\xc0\x18\x23\x48\x59\x12\x1b\x6c\x47\x2c\x15\xd4\x9b\x49\xb8\xea\x37\x61\xb3\x07\x9d\xd4\x8f\xab\x7f\x70\xa0\xa5\x07\xf9\x00\x07\x3e\x8e\xf5\xe5\xc1\x25\xec\x2d\x5b\xc7\xf8\x0f\x80\x03\xe3\x2d\xfe\x26\x41\x90\x35\x26\x5d\xe8\xa4\x65\x13\x91\x0f\xaa\x0c\xde\x38\xb5\x5f\xda\x46\xc0\x4e\x55\xf7\xd5\xa8\x57\x6b\xf6\x35\x92\x07\x6e\xbc\xf8\x2b\x00\x00\xff\xff\xf7\x8e\xf1\x4c\x70\x06\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1648, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

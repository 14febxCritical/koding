// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x61\x6b\x23\x37\x10\x86\x3f\x9f\x7e\xc5\x9c\x1d\x68\x42\xab\x95\x13\x28\x81\x94\x06\x4a\x62\x4a\xc8\x9d\x03\xb9\x1c\x1c\x94\xb2\xc8\xda\x59\xaf\xce\x5a\x8d\x18\x69\x6d\x27\x57\xff\xf7\xb2\x59\xc7\x4e\xbc\x6e\x69\xef\xe3\xee\xcc\x3c\xef\xe8\xd5\x8c\x86\xef\xd5\xd4\x7a\x35\xd5\xb1\x12\x62\x08\xb7\x54\x58\x3f\x83\x40\x31\xc9\xc0\xb4\xb0\xd1\x92\x87\x68\xd8\x86\x04\x8c\x31\x90\x8f\x76\xea\x10\x4a\x62\x28\x30\x38\x7a\x6c\xf3\x35\xcc\x9d\x45\x9f\x20\x22\x2f\xac\xc1\x4c\x0c\xc5\x10\xae\x28\x3c\xb2\x9d\x55\x09\x8e\xaf\x4e\xe0\x6c\x74\x7a\x26\xcf\x46\xa7\xe7\x2f\x22\x37\xde\x64\x3f\x81\x76\x0e\x9e\x93\x62\xcb\x47\x5e\x60\x91\x09\x11\x31\x81\xc4\x86\x20\xd8\x80\xa5\xb6\x4e\x24\xd6\x01\x06\x68\x2a\x82\xfc\xf6\x3a\xbf\xbe\x9b\x8c\x73\xf8\x0b\x12\x22\x48\x0d\x6a\xa1\x59\x39\x9a\x29\xe3\xa8\x29\xa4\xf5\x36\x49\x6a\x52\x68\x52\xe6\x68\x36\x80\xf1\x97\x9b\x87\xf6\x7c\x0f\x55\xdb\xba\x73\xb4\x6c\x3b\x58\x68\xb6\x7a\xea\x30\x82\x66\x84\xa0\x63\xc4\x02\x16\x56\x43\x42\x66\x5d\x12\xd7\x3f\xc4\x6d\x12\x4c\x1d\x99\x79\x26\x70\x15\x88\x13\xdc\xde\x5d\xdf\x4c\x7e\xcf\x3f\x7f\x1a\xdf\x4f\x7e\xfb\x38\xfe\x75\x70\x74\xf4\x6d\xef\xdf\x85\x3c\xfa\xb6\xd0\x9c\xcd\x9f\xcf\x9b\x6b\x63\xa8\xf1\x29\x0f\x4c\xa5\x75\x98\x7b\x6b\xe6\x5e\xd7\xb8\x5e\x0f\xb6\xd0\x0f\x37\xe3\xc9\x43\xfe\xf9\xfe\x43\xc7\xdb\x7e\xee\xa1\x3a\xb7\xf3\x86\xdd\xab\xe2\x4f\x57\xf7\xe3\xf1\x64\x5b\xbc\xfb\xdc\x2b\x8e\x86\x11\xfd\x4b\xb1\x78\xb6\x74\x70\x7a\x76\x9e\x8d\xb2\x51\x76\x0a\xfd\x73\xac\x07\x70\x79\x09\x0a\x93\x51\x15\xc5\x14\x85\xa8\xe7\x85\x65\x90\x01\x14\x85\xa4\xe6\x36\xa1\xea\x5a\x12\xc2\x34\xec\x40\x4a\x47\x46\xa7\x76\x76\xa4\x8c\xd6\xb5\xa3\x21\x65\xac\x68\x29\x91\x99\x18\xa4\x64\x4c\xfc\x08\x3f\xc3\xdb\x73\xae\x07\x20\x37\x17\x07\x2a\xd5\x61\x83\xcd\x66\x4f\xdf\x05\xde\x79\xd0\x03\x77\x2e\x64\x49\x73\x0b\x17\x89\x1a\x53\xed\xc6\x68\x23\xeb\x68\x26\x92\x66\x90\x57\xa0\x40\xae\xca\x83\xa5\x43\x78\xb8\xbb\xbe\x3b\xe6\xaf\x68\x9e\xb4\xb3\xf3\x93\x0b\xf8\x48\x0b\x84\x54\x21\x4c\xd1\xd1\x12\x12\xbd\xec\xc7\xb1\x76\x89\x66\x98\x2a\x64\x58\xda\x54\x81\xf5\x31\x69\xe7\xda\x69\xec\xb0\x27\x99\x10\xb6\x84\x3f\xe0\x3d\xc8\x15\xa8\x26\xf2\xf3\x82\x76\x41\xf8\xf3\x97\x16\xeb\xc5\x3b\xe7\x41\xc6\xb2\xe7\xbf\xc2\x7a\x8a\x45\x81\xc5\xeb\xa2\x3d\x88\x28\xed\x4e\x02\xbb\x68\xac\x34\xa3\x4a\xc8\xb5\xf5\x25\xed\x64\x76\x17\xbd\xcd\xfa\x0f\xda\x7b\xb4\x03\x0a\x3b\x48\x3f\xa6\xbe\x1c\xfc\xbb\xda\xef\xbb\xbd\x2b\x6e\xfa\xd6\xec\x7a\x7e\x9b\x21\xde\x99\xaa\xa6\x02\x46\xe7\xa3\x51\x2f\xd6\xb2\x67\x4f\x36\x80\x94\x05\x1a\xaa\x03\x63\x8c\x20\x65\x49\x6c\xb0\x1d\xb1\x54\x50\x6f\x26\xe1\xb2\x6f\xc2\x66\x0f\x3a\xa9\x1f\x57\xff\x92\x40\x4b\x0f\xf2\x1e\x0e\x3c\x1c\xeb\x8b\x83\x4b\xd8\x5b\xb6\x8e\xf1\x3f\x00\xfd\xf1\xee\x19\x21\xfe\xa1\x61\x90\x35\x26\x5d\xe8\xa4\x65\x13\x91\x0f\xaa\x0e\x5e\x25\xb5\x4f\xdc\x46\xd0\x4e\x55\xf7\xf4\xa8\x97\x68\xf6\x35\x92\x07\x6e\xbc\xf8\x3b\x00\x00\xff\xff\xb1\x73\xc4\x00\x80\x06\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 1664, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

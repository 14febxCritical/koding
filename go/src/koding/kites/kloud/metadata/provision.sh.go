// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\x2c\xfe\x8a\xab\x13\x74\xed\x36\x8a\x49\x80\x20\x40\x87\x19\x18\x12\xa3\x08\xd2\xb9\x40\x9a\x02\x05\xb6\xc1\xa0\xa5\x93\xc5\x99\xd2\x11\x47\xca\x71\x9a\xe5\xbf\x0f\xf4\xab\xa2\x28\x69\x37\x7f\x32\x79\xcf\x3d\xf7\xfa\x50\x07\xaf\xd4\xd4\xd4\x6a\xaa\x7d\x29\xc4\x01\x5c\x51\x6e\xea\x19\x38\xf2\x41\x3a\xa6\x85\xf1\x86\x6a\xf0\x19\x1b\x17\x80\xd1\x3b\xaa\xbd\x99\x5a\x84\x82\x18\x72\x74\x96\xee\x22\x5e\xc3\xdc\x1a\xac\x03\x78\xe4\x85\xc9\x30\x15\x07\xe2\x00\xce\xc9\xdd\xb1\x99\x95\x01\xde\x9c\xbf\x85\x93\xa3\xe3\x13\x79\x72\x74\x7c\xb6\x0d\x72\x59\x67\xe9\xcf\xa0\xad\x85\x15\xc8\x47\x7e\xe4\x05\xe6\xa9\x10\x1e\x03\x48\x6c\x08\x9c\x71\x58\x68\x63\x63\x72\x37\x65\x8c\x6b\x2d\xdd\x46\xf7\x85\x66\xa3\xa7\x16\x3d\x68\x46\x70\xda\x7b\xcc\x61\x61\x34\x04\x64\xd6\x05\x71\xf5\x83\xdf\x81\x60\x6a\x29\x9b\xa7\x02\x97\x8e\x38\xc0\xd5\xc7\x8b\xcb\xf1\xfb\xc9\xe7\x4f\xa3\xeb\xf1\x6f\xbf\x8f\x7e\x1d\x1c\x1e\xde\x77\xee\xde\xc9\xc3\xfb\x85\xe6\x74\xbe\x4a\x76\xa2\xb3\x8c\x9a\x3a\x4c\x1c\x53\x61\x2c\x4e\x6a\x93\xcd\x6b\x5d\xe1\xc3\xc3\x60\x47\xfa\xe1\x72\x34\xbe\x99\x7c\xbe\xfe\xb0\xe6\xdb\x1d\x3b\x54\xeb\x56\x4d\x1a\xb6\x2d\xe7\x4f\xe7\xd7\xa3\xd1\x78\xe7\xbc\x3f\x76\x9c\x7d\xc6\x88\xf5\xd6\x59\x04\xd6\x0e\x06\x98\x95\x04\x93\xab\x8b\xc9\xc5\xc7\xf1\x68\x02\xff\x40\x40\x04\xa9\x41\x2d\x34\x2b\x4b\x33\x95\x59\x6a\x72\x69\x6a\x13\x24\x35\xc1\x35\x21\xb5\x34\x1b\xc0\xe8\xcb\xe5\x8d\x10\xa6\xf6\x41\x5b\xbb\xa1\x7e\xf3\x16\xee\x45\x92\x35\x6c\x41\x4a\x4b\x99\x0e\x71\x03\xa4\xf4\xc6\xc6\x01\x4b\xe9\x4b\xba\x95\xc8\x4c\x0c\x52\x32\x06\xbe\x83\x53\x78\x9c\xf3\xc3\x00\xe4\x26\x10\xa8\x50\x39\xb5\xa6\x4e\x83\xe6\x74\xf6\x55\x24\x41\x33\xc8\x73\x50\x20\x97\x45\x1f\x40\x24\x33\xa6\xc6\xe9\x3c\x07\x29\x0b\xe2\x0c\x61\x0d\x10\x49\xe3\x91\x2b\xca\x63\x75\xf2\xfd\xe6\x16\x7a\xc6\x17\x9b\x93\x98\x02\xfe\x80\x57\x20\x97\xa0\x1a\xcf\xab\x45\xdf\x78\xfc\xf5\x0b\x84\x32\xf2\x25\xb6\x06\xe9\x0b\x50\xe4\x82\x9a\x9b\x80\x6a\x3d\x1e\x85\xd5\x14\xf3\x1c\xf3\xb6\x57\x87\x45\x24\x85\x69\x45\xc1\xb5\xdd\x97\x9a\x51\x05\xe4\xca\xd4\x05\xb5\x22\x55\xf3\xdc\x30\x48\xd7\x82\x7d\x4f\xfc\x0e\x5f\x4f\x8c\x16\xcb\x53\xa3\xfa\xd2\x7b\xbb\x14\x09\x5a\x53\x80\xf5\xfd\x66\xb5\x8c\xff\x7f\x84\xd7\x43\x95\xe3\x42\xd5\x8d\xb5\xbb\x42\xb8\x02\xc9\xdf\x9f\xf2\x8b\xe9\xfd\x07\x96\x6e\xb3\xe3\x72\x73\xd3\x33\xd2\x7d\xa3\x1f\x43\x44\x92\x64\x65\x5c\x9e\xa3\xb3\xd3\xd3\x5e\x23\xdd\xd6\xc0\x44\xe1\xdd\x76\xe0\x5d\x4c\x61\xc4\x83\x10\x95\x36\x1b\x9d\xac\x94\x37\x38\x3e\x39\x4b\x8f\xd2\xa3\xf4\x18\xfa\x16\x11\x86\x43\x50\x18\x32\x55\x92\x0f\x5e\x88\x24\x50\x93\x95\x7b\x71\xae\xeb\x8e\x8a\x84\x3f\x45\x02\xab\xdf\xcb\xca\x8d\x7d\x78\x24\x5a\x21\x5a\x45\x77\x1a\xfa\xff\xc4\xbc\x7f\xbd\x9e\x88\x79\x93\x6f\x14\xf2\xec\xab\x71\x20\x65\x8e\x19\x55\x8e\xd1\xfb\x9d\x5e\xa5\xf4\x21\xa7\x27\x2e\x30\x7c\x3a\xf0\x5d\x9a\xab\xd9\xfc\xb4\x7c\x16\x21\x36\x13\x92\xd7\xfd\x8a\x8f\xed\x4b\xba\xce\xeb\xcb\xfe\x5e\x27\xdf\x6c\xf3\x33\xa9\x80\xac\x30\xe8\x5c\x07\x2d\xe3\x83\xf4\x4c\x3a\x7b\x50\xfc\x64\x6c\x66\x6a\xa6\x6a\xfd\x94\xab\xad\x35\xfd\xdb\x53\x0d\xdc\xd4\xdb\xf5\x8e\xef\x55\x07\x1b\xa3\xc8\x15\xd8\x97\xad\x4d\x7f\x09\xd6\x5e\x56\x78\x3d\x1c\x7e\xa3\xd6\x7f\x03\x00\x00\xff\xff\x87\x68\xe5\xab\x09\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2057, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

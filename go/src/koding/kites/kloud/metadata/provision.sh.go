// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xff\x6b\xe3\xc6\x13\xfd\x59\xfb\x57\x4c\x9c\xf0\xf9\xdc\xd1\xae\x36\x09\x84\x40\x4a\x03\x6d\x2c\x8e\x90\x3b\x1f\xe4\x0b\x1c\xf4\x8a\x58\x4b\x23\x6b\xeb\x95\x76\x3b\xbb\x72\xec\xa4\xfe\xdf\x8b\x2c\xd9\x56\x64\xdd\xb5\x54\xbf\x69\xe7\xcd\x9b\xd1\xdb\x37\xa3\xe3\x23\x31\x55\xa5\x98\x4a\x97\x33\x76\x0c\x77\x26\x55\xe5\x0c\xac\x71\x9e\x5b\x32\x0b\xe5\x94\x29\xc1\x25\xa4\xac\x07\x42\x67\x4d\xe9\xd4\x54\x23\x64\x86\x20\x45\xab\xcd\xaa\xc6\x4b\x98\x6b\x85\xa5\x07\x87\xb4\x50\x09\x86\xec\x98\x1d\xc3\x8d\xb1\x2b\x52\xb3\xdc\xc3\xbb\x9b\xf7\x70\x7e\x7a\x76\xce\xcf\x4f\xcf\x2e\xb7\x45\x6e\xcb\x24\xfc\x11\xa4\xd6\xb0\x01\xb9\x9a\x1f\x69\x81\x69\xc8\x98\x43\x0f\x1c\x2b\x03\x56\x59\xcc\xa4\xd2\x75\x73\x8f\x79\x5d\x57\x6b\xf3\x5c\xa7\x2f\x24\x29\x39\xd5\xe8\x40\x12\x82\x95\xce\x61\x0a\x0b\x25\xc1\x23\x91\xcc\x0c\x15\xff\x77\x3b\x10\x4c\xb5\x49\xe6\x21\xc3\xa5\x35\xe4\xe1\xee\xf3\xf8\x76\xf2\x21\x7e\x7a\x88\xee\x27\xbf\x7c\x8a\x7e\x1e\x9d\x9c\xbc\xf6\xce\xae\xf8\xc9\xeb\x42\x52\x38\xdf\x34\x1b\xcb\x24\x31\x55\xe9\x63\x4b\x26\x53\x1a\xe3\x52\x25\xf3\x52\x16\xb8\x5e\x8f\x76\xa4\x1f\x6f\xa3\xc9\x63\xfc\x74\xff\xb1\xe1\xdb\xbd\xf6\xa8\x1a\xa9\xe2\x8a\x74\x27\xf9\xe1\xe6\x3e\x8a\x26\xbb\xe4\xfd\x6b\x2f\xd9\x25\x84\x58\xf6\x92\x9f\x1e\xa2\x38\xfa\xf4\x6b\x34\x1e\x47\xe3\x4d\x7a\xf7\xa0\x47\x50\x39\x8c\xb1\x98\x62\x9a\x62\x5a\x53\x30\x4f\xd2\xc2\x08\x93\xdc\x40\x7c\x37\x8e\xc7\x9f\x27\x51\x0c\x7f\x81\x47\x04\x2e\x41\x2c\x24\x09\x6d\x66\x22\xd1\xa6\x4a\xb9\x2a\x95\xe7\xa6\xf2\xb6\xf2\xa1\x36\xb3\x11\x44\x5f\x6e\x1f\x19\x53\xa5\xf3\x52\xeb\xb6\xbb\x77\xef\xe1\x95\x05\x49\x45\x1a\x38\xd7\x26\x91\xbe\x36\x11\xe7\x4e\xe9\xda\x23\x9c\xbb\xdc\x3c\x73\x24\x32\x04\x9c\x13\x7a\x5a\xc1\x05\xbc\xfd\xec\xf5\x08\x78\x5b\x08\x84\x2f\xac\x68\xa8\x43\x2f\x29\x9c\xbd\x30\x00\x00\x2f\x09\xf8\x0d\x08\xe0\xcb\x6c\x08\xc3\x82\x19\x99\xca\xca\x34\x05\xce\x33\x43\x09\x42\x03\x60\x41\xe5\x90\x0a\x93\xd6\x1f\xc8\x3f\xb4\xa7\x30\x60\x82\x5a\x9f\x40\x65\xf0\x1b\x1c\x01\x5f\x82\xa8\x1c\x6d\xc6\xa5\xcd\xf8\xfd\x27\xf0\x79\xcd\x17\xe8\x12\xb8\xcb\x40\x18\xeb\xc5\x5c\x79\x14\xcd\x25\x8b\xad\xd2\xdd\xac\x1e\x0b\x0b\x32\xd5\xa9\x82\x4d\xdc\xe5\x92\x50\x78\xa4\x42\x95\x99\xe9\x54\x2a\xe6\xa9\x22\xe0\xb6\x03\xfb\x37\xf5\x7b\x7c\x03\x35\x3a\x2c\x87\x41\xf1\x65\xf0\x74\x79\xd8\x7c\xed\x17\xaa\x06\x24\xda\x37\xfe\x16\xc2\x82\x20\xc9\xeb\xcb\x38\xbd\xbc\xb8\x18\x0c\x9a\xe7\x12\xc8\x18\x7f\xb5\x15\xb0\x8f\xc9\x14\x5b\x33\x56\x48\xd5\x5a\x6f\x63\xe6\xd1\xd9\xf9\x65\x78\x1a\x9e\x86\x67\x30\x74\xb1\x70\x7d\x0d\x02\x7d\x22\x72\xe3\xbc\x63\x2c\xf0\xa6\x4a\xf2\xbd\xdf\x1b\x01\x6b\x93\xc3\x57\x16\xc0\xe6\xf9\xfe\x30\x34\x3a\x1c\x81\x5f\xd9\xad\xd3\xe0\x7f\xd7\x22\xc5\x85\x28\x2b\xad\x77\x42\x6c\xc4\xea\x0d\xe9\x1a\x38\xfe\x09\x67\x1d\xb9\x82\xb7\x33\xc5\x82\x00\xb5\xca\x1a\xf2\x55\x55\x0c\x32\x07\x75\xa0\xcd\x03\xce\xa5\x73\x55\x81\x2b\x74\x30\xc0\x21\xad\xe7\x33\xf4\xc3\x3c\xdb\xe0\x8e\x6b\xd5\xa5\x70\x38\xd8\x5f\xa6\x5a\x37\xec\x6f\xba\x67\xc7\xff\xb6\x14\xf6\x8b\xf4\x60\x29\xb4\x97\x34\x7b\x61\xc1\xec\x45\x59\xe0\x3c\xc5\xc4\x14\x96\xd0\xb9\xdd\xd0\x73\xee\x7c\x6a\x0e\x52\xe0\xfa\x70\x5c\x76\x6d\x6e\x0c\xf9\xc3\xf2\x9b\x08\xd6\xda\x92\xdf\x0f\xae\x8d\xab\x41\xc7\x7d\x65\x41\xd0\x27\x6c\x0e\x87\x4d\x17\xfc\xa3\xdf\xbe\xd1\x1e\xf0\x02\xbd\x4c\xa5\x97\xbc\xde\x74\xc3\x9b\xad\x03\xaa\xff\x68\xad\xb9\xd5\x54\x34\x3f\x0a\xb1\x8d\x86\x7f\x38\x53\x02\x55\xe5\x76\xce\xeb\x45\xd8\xc3\xd6\x55\xf8\x06\xec\xf2\x8e\x87\xbf\x07\xeb\x4e\x2d\xfb\x3b\x00\x00\xff\xff\x22\xda\x24\x6e\x86\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2182, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

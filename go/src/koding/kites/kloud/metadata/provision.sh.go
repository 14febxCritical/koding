// Code generated by go-bindata.
// sources:
// provision.sh
// DO NOT EDIT!

package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _provisionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6b\x6f\xdb\x36\x14\xfd\x2c\xfe\x8a\x5b\x27\xd8\x5a\x6c\x14\x1d\x03\x59\x80\x0e\x0b\xb0\xc5\x42\x11\xa4\x75\x81\x3c\x80\x02\xdb\x20\xd0\xd2\x95\xc5\x99\x12\x89\x4b\xca\x71\x9a\xe5\xbf\x0f\xf4\x53\x51\x94\x34\x6b\x3e\x45\xe4\xb9\xe7\x9e\xfb\x38\xf4\xc1\x1b\x31\x55\xb5\x98\x4a\x57\x32\x76\x00\x17\x26\x57\xf5\x0c\xac\x71\x9e\x5b\x32\x0b\xe5\x94\xa9\xc1\x65\xa4\xac\x07\x42\x67\x4d\xed\xd4\x54\x23\x14\x86\x20\x47\xab\xcd\x5d\xc0\x4b\x98\x6b\x85\xb5\x07\x87\xb4\x50\x19\xc6\xec\x80\x1d\xc0\x99\xb1\x77\xa4\x66\xa5\x87\xb7\x67\xef\x60\x34\x3c\x1a\xf1\xd1\xf0\xe8\x64\x9b\xe4\xbc\xce\xe2\x9f\x41\x6a\x0d\x2b\x90\x0b\xfc\x48\x0b\xcc\x63\xc6\x1c\x7a\xe0\xd8\x18\xb0\xca\x62\x21\x95\x0e\xe2\xae\xcb\x90\x57\x6b\x73\x1b\xc2\x17\x92\x94\x9c\x6a\x74\x20\x09\xc1\x4a\xe7\x30\x87\x85\x92\xe0\x91\x48\x16\x86\xaa\x1f\xdd\x0e\x04\x53\x6d\xb2\x79\xcc\x70\x69\x0d\x79\xb8\xf8\x3c\x3e\x9f\x7c\x48\x6f\xae\x92\xcb\xc9\xef\x9f\x92\xdf\x06\x87\x87\xf7\x9d\xb3\xf7\xfc\xf0\x7e\x21\x29\x9e\xaf\xc4\xa6\x32\xcb\x4c\x53\xfb\xd4\x92\x29\x94\xc6\xb4\x56\xd9\xbc\x96\x15\x3e\x3c\x0c\x76\xa4\x1f\xcf\x93\xc9\x75\x7a\x73\xf9\x71\xcd\xb7\xfb\xec\x50\xad\x5b\x95\x36\xa4\x5b\xc1\x57\x67\x97\x49\x32\xd9\x05\xef\x3f\x3b\xc1\x2e\x23\xc4\xba\x13\x7c\x73\x95\xa4\xc9\xa7\x3f\x92\xf1\x38\x19\xaf\xc2\xdb\x07\x1d\x82\xc6\x61\x8a\xd5\x14\xf3\x1c\xf3\x40\xc1\x3c\x49\x0b\x03\xcc\x4a\x03\xe9\xc5\x38\x1d\x7f\x9e\x24\x29\xfc\x0b\x1e\x11\xb8\x04\xb1\x90\x24\xb4\x99\x89\x4c\x9b\x26\xe7\xaa\x56\x9e\x9b\xc6\xdb\xc6\xc7\xda\xcc\x06\x90\x7c\x39\xbf\x66\x4c\xd5\xce\x4b\xad\x37\xea\xde\xbe\x83\x7b\x16\x65\x0d\x69\xe0\x5c\x9b\x4c\xfa\xb0\x44\x9c\x3b\xa5\xc3\x8e\x70\xee\x4a\x73\xcb\x91\xc8\x10\x70\x4e\xe8\xe9\x0e\x8e\xe1\x71\xd9\x0f\x03\xe0\x9b\x44\x20\x7c\x65\xc5\x9a\x3a\xf6\x92\xe2\xd9\x57\x16\x79\x49\xc0\xcf\x40\x00\x5f\x16\x7d\x00\x16\xcd\xc8\x34\x56\xe6\x39\x70\x5e\x18\xca\x10\xd6\x00\x16\x35\x0e\xa9\x32\x79\xa8\x8e\x7f\xd8\x9c\x42\xcf\x06\x84\xe6\x44\xaa\x80\x3f\xe1\x0d\xf0\x25\x88\xc6\xd1\xca\x2b\x9b\x88\xbf\x7f\x05\x5f\x06\xbe\x48\xd7\xc0\x5d\x01\xc2\x58\x2f\xe6\xca\xa3\x58\x4f\x58\x6c\xdb\xdc\x8e\xea\xb0\xb0\xa8\x50\xad\x2c\xb8\xbe\x77\xa5\x24\x14\x1e\xa9\x52\x75\x61\x5a\x99\xaa\x79\xae\x08\xb8\x6d\xc1\x5e\x93\xbf\xc3\xd7\x93\xa3\xc5\xf2\xf4\x52\x7c\xe9\x3d\x5d\xb2\x08\xf5\x4a\x79\xbf\x6e\xb1\x14\xcb\xf0\x3f\x1f\x1d\xff\x92\x19\x6d\xa8\x55\x08\x55\xc0\xe9\xf5\x92\x5f\x94\xf7\x3f\x58\xba\xcd\x0e\xcb\x4d\x4d\xcf\x48\xf7\x8d\x7e\x0c\x61\x51\x94\x95\x61\x79\x86\x27\xc7\xc7\xbd\x97\xe6\xb6\x06\x32\xc6\xbf\xdf\x0e\xbc\x8b\x29\x14\x7b\x60\xac\x92\x6a\xe3\x93\x95\xf3\x06\x47\xa3\x93\x78\x18\x0f\xe3\x23\xe8\x5b\x44\x38\x3d\x05\x81\x3e\x13\xa5\x71\xde\x31\x16\x79\xd3\x64\xe5\xde\x9c\xeb\xba\x83\x23\xe1\x2f\x16\xc1\xea\xef\x65\xe7\x86\x3e\x3c\x32\x2d\x63\xad\xa2\x3b\x0d\xfd\x3e\x33\xef\x1f\xc0\x27\x66\xde\xe8\x0d\x46\x9e\x7d\x55\x16\x38\xcf\x31\x33\x95\x25\x74\x6e\xe7\x57\xce\x9d\xcf\xcd\x93\x10\x38\x7d\x3a\xf0\x9d\xcc\xd5\x6c\x7e\x5a\x3e\x8b\x60\x9b\x09\xf1\xcb\x7e\xc7\x87\xf6\x45\xdd\xe0\xf5\x61\x7f\xaf\xa3\x6f\xb6\xf9\x19\x29\xc0\x2b\xf4\x32\x97\x5e\xf2\xf0\x20\x3d\x23\x67\x0f\x0a\xbf\x3a\x9b\x99\xaa\xa9\x58\x3f\xe6\x62\x7b\x1b\xff\xe3\x4c\x0d\xd4\xd4\xdb\xf5\x0e\xef\x55\x07\x1b\xb2\xf0\x15\xd8\x95\xad\x4d\x7f\x09\xd6\x5e\x56\xf8\xe1\xf4\x1b\xa5\xfe\x17\x00\x00\xff\xff\x90\x31\xb8\x37\x4b\x08\x00\x00")

func provisionShBytes() ([]byte, error) {
	return bindataRead(
		_provisionSh,
		"provision.sh",
	)
}

func provisionSh() (*asset, error) {
	bytes, err := provisionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "provision.sh", size: 2123, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"provision.sh": provisionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"provision.sh": {provisionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

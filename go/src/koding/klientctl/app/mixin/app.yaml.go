// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4f\x6f\xd4\x3e\x10\xbd\xe7\x53\xcc\x6f\x7f\xa8\x3d\xb9\xd9\x4b\x45\x15\x89\x33\xe2\x04\xaa\x38\x22\x45\x13\x67\x76\x33\xc4\xb1\xad\xb1\xbd\xab\x16\xf8\xee\xc8\x4e\x52\xb6\x68\x41\xe1\x92\xb5\x9f\xdf\xbc\x79\xf3\x67\x27\xd4\x03\x5b\x6a\x2a\x80\xd1\xf5\x6c\x8f\x2d\x9a\x33\x3e\x85\xd6\xd9\x06\xa2\x24\xfa\xf5\x30\xb9\x64\x63\xc8\x4c\x80\x9e\x0e\x98\x4c\x6c\x60\x57\x9f\x50\x6a\xc3\x5d\x3d\xb3\x6a\xf4\x7e\x57\x9d\x50\x18\x3b\x43\x4d\xa5\xc0\xe2\x44\x0d\x9c\xa9\x6b\xbd\x93\x58\x5d\xc4\x3e\xec\x1f\xf6\x95\x36\x2e\xf5\x6c\x39\x66\xe1\x14\x48\x4a\x86\x35\x6c\xf7\xe6\xdb\x09\xe5\x6e\xb5\xa6\x75\xf6\xd0\x7a\x71\x07\x36\xd4\x5a\xd6\x63\xe6\xfd\xd8\x15\x53\x21\x0c\x2d\xa6\x38\x38\xe1\x67\xea\xdb\x91\x9e\x16\xb7\x6a\xd5\xc9\xfa\x1f\xac\x4f\xb1\xcd\x5c\x9f\x3a\xc3\x3a\xf3\x8a\xc0\x59\x38\x52\x9b\x85\x17\x0b\x1e\xe3\x70\xa5\x42\x49\x76\xce\xe7\x49\x26\x0e\x81\x9d\x0d\x0d\xec\xdf\xde\xdf\x17\xd4\x9d\x2d\xc9\x66\xe7\xcd\xbf\x14\xa8\x9d\x8d\x64\x63\x03\xdf\x55\xb9\x03\xfc\xff\x5f\xdd\xb1\xad\x3b\x0c\xc3\x82\x04\x8a\xa0\x28\x39\xf0\xec\xe9\x80\x6c\x16\xbc\x77\x7a\x24\x01\x49\xb6\x5c\xbf\x2c\x30\x80\x52\x32\xad\xe7\x57\x70\x4e\x0c\xe8\xfd\x6b\xd8\xc3\xef\xad\x5c\x47\xbb\xd6\x72\xe5\xe5\x52\x80\xe0\xd3\xc7\xc7\xcf\xef\x36\x71\x4f\x70\x65\xbd\x9a\xfc\xb9\x60\xc9\x57\xd2\xcf\x68\x78\xac\xbb\xc4\xa6\x0f\x91\x7c\x63\x30\x52\x88\x97\xc6\x5f\xfa\x04\x4a\xc3\xed\x4c\x9d\xbf\x24\x70\x73\x03\x75\x88\x28\x31\xef\xe9\x6d\x05\xe0\x51\x8f\x78\xa4\x36\xf9\x1e\x23\xbd\xfc\x13\x16\x78\xd9\x8f\xb9\xa5\x17\xc7\x3b\x76\xe5\x76\xe4\xb8\xfe\x2a\xed\x24\x47\x4a\xb2\x7a\xea\xe7\xb8\x5c\xf4\xe4\x7a\x50\x08\xea\xfd\x3a\x98\x6d\x7b\x50\xe2\xa7\xb1\x67\xc9\x93\xb8\xd2\x9c\x42\xd0\x83\x3b\x5b\x50\x8f\x1b\x45\x37\xee\x60\x69\xe5\x9f\x52\x2e\x55\xf8\x64\xcc\x5f\x06\x52\xfd\x0c\x00\x00\xff\xff\xfb\x01\x8e\x7c\x6f\x04\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1135, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


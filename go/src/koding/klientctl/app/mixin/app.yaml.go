// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4f\x8f\xd3\x3e\x10\xbd\xf7\x53\xcc\xaf\x3f\xb4\x7b\xf2\x86\xcb\x0a\x29\x12\x67\x84\x38\xb0\x5a\x71\x44\x8a\x26\xce\xb4\x1d\xe2\xd8\xd6\x78\xdc\xa8\x0b\x7c\x77\xe4\xfc\x59\xba\x50\x50\xb9\x24\xf6\xf3\x7b\xf3\xe6\x1f\xfb\xa4\xe8\x2d\xd5\x1b\x80\x3e\x74\xec\xf7\x0d\xba\x11\x4f\xa9\x09\xbe\x06\x95\x4c\x3f\x1f\x86\x90\xbd\xa6\xc2\x04\xe8\x68\x87\xd9\x69\x0d\xdb\xea\x88\x52\x39\x6e\xab\x99\x55\x61\x8c\xdb\x8d\x75\x21\x77\xec\x59\x0b\x3b\x27\x92\x49\x66\xc0\xe3\x40\x35\x6c\x5f\x7d\x3d\xa2\xdc\xad\x7e\xd6\x96\xc0\x4d\x94\xb0\x63\x47\x8d\x67\xdb\x17\xde\xf7\xed\xe4\x94\xd2\xa1\xc1\xac\x87\x20\xfc\x44\x5d\xd3\xd3\x69\x49\xc1\xac\x71\x4a\xfc\xf7\x3e\x66\x6d\x62\x6e\x1d\xdb\x0f\x74\x9a\xb4\xa3\xb0\x52\x53\x62\x2e\xee\x11\xf5\x70\x21\x63\xc9\x7e\xb6\x8a\x24\x03\xa7\xc4\xc1\xa7\x1a\x5e\xbf\xb9\xbf\x9f\xd0\x30\x7a\x92\xab\x93\xae\xff\xa5\x36\x1b\xbc\x92\xd7\x1a\xbe\x99\xe9\x0e\xf0\xff\x7f\x55\xcb\xbe\x6a\x31\x1d\x16\x24\x91\x82\xa1\x1c\x20\x72\xa4\x1d\xb2\x5b\xf0\x2e\xd8\x9e\x04\x24\xfb\xe9\xfa\x79\x81\x01\x8c\x91\x61\x3d\xbf\x80\x8b\x31\x60\x8c\x2f\xe1\x08\xbf\x76\x71\xa4\xf6\x21\x88\xae\xa5\xfc\xfe\x70\x2e\x27\x78\xf8\xf8\xf8\xe9\xed\x35\xd4\x23\x5c\xd8\x95\xba\x7c\xce\x58\xf2\x85\xec\x13\x3a\xee\xab\x36\xb3\xeb\x92\x52\xac\x1d\x2a\x25\x3d\xcf\xfa\xb9\x49\x60\x2c\xdc\xce\xd4\xf9\x4b\x02\x37\x37\x50\x25\x45\x51\x18\xa9\xbd\xdd\x00\x44\xb4\x3d\xee\xa9\xc9\xb1\x43\xa5\xe7\xb5\x5e\xe0\x65\x39\xe6\x7e\x9e\x1d\xef\x38\x4c\xb7\x3d\xeb\xfa\x37\x36\x48\x51\x4a\xf6\x76\xe8\x66\x5d\xa9\x79\x08\x1d\x18\x04\xf3\x6e\x9d\xca\x75\x4b\x30\xe9\x87\xbe\x63\x29\x63\xb8\xd0\x9c\x89\x60\x0f\x61\xf4\x60\x1e\xaf\x0c\x7a\xe5\x02\x4e\xad\xfc\x93\xe5\x52\x45\xcc\xce\xfd\x65\x20\x9b\x1f\x01\x00\x00\xff\xff\x98\xcd\x20\x09\x3d\x04\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


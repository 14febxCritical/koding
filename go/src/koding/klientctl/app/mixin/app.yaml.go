// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6f\xd4\x30\x10\xbd\xef\xaf\x18\x16\xd4\x9e\xdc\x70\xa9\x90\x22\x71\x46\x9c\x40\x15\x47\xa4\x68\x62\xcf\x6e\x86\x38\xb6\x35\xb6\x37\x6a\x81\xff\x8e\xec\x24\x65\x8b\x16\xb4\x5c\x6c\xcf\xf3\x9b\x37\x9f\x13\xea\x81\x1d\xb5\x3b\x80\xd1\x1b\x76\xc7\x0e\xed\x8c\x8f\xb1\xf3\xae\x85\x24\x99\x7e\x7f\x4c\x3e\xbb\x14\x0b\x13\xc0\xd0\x01\xb3\x4d\x2d\xec\x9b\x13\x4a\x63\xb9\x6f\x16\x56\x83\x21\xec\x77\xda\xfa\x6c\xd8\x71\x2a\xec\x1c\x49\xaa\x9b\x02\x87\x13\xb5\xb0\x7f\xf3\xfd\x84\x72\xb7\xc5\xd3\xba\x08\x77\x41\xfc\x81\x2d\x75\x8e\xf5\x58\x78\x3f\xf7\x35\x52\x8c\x43\x87\x39\x0d\x5e\xf8\x89\x4c\x37\xd2\xe3\x9a\x82\xda\x74\x8a\xfe\x47\x17\x72\xea\x0a\x37\xe4\xde\xb2\x2e\xbc\x2a\x30\x0b\x27\xea\x8a\xf0\x9a\x42\xc0\x34\x5c\x48\x5b\xb2\x5b\xe2\x05\x92\x89\x63\x64\xef\x62\x0b\x6f\xdf\xdd\xdf\x57\xd4\xcf\x8e\xe4\xea\xcc\xdb\xff\x29\x50\x7b\x97\xc8\xa5\x16\x7e\xa8\x6a\x03\xbc\x7e\xd5\xf4\xec\x9a\x1e\xe3\xb0\x22\x91\x12\x28\xca\x1e\x02\x07\x3a\x20\xdb\x15\x37\x5e\x8f\x24\x20\xd9\x55\xf3\xeb\x0a\x03\x28\x25\xd3\xf6\x7e\x01\x97\xc0\x80\x21\xbc\x84\x03\xfc\xd9\xca\x99\xfa\x2e\x78\x49\x5b\x2d\x17\x7e\xce\x05\x08\x3e\x7f\x7a\xf8\xf2\xfe\x2a\xee\x09\x2e\xec\x4c\x5b\x8e\x33\x96\x7c\x23\xfd\x84\x96\xc7\xa6\xcf\x6c\x4d\x4c\x14\x5a\x8b\x89\x62\x3a\x4f\xfc\xb9\x4f\xa0\x34\xdc\x2e\xd4\xe5\x24\x81\x9b\x1b\x68\x62\x42\x49\x30\x53\x7f\xbb\x03\x08\xa8\x47\x3c\x52\x97\x83\xc1\x44\xcf\xeb\xbd\xc2\xeb\x7e\x2c\x2d\x3d\x7b\xde\xb1\xaf\xd6\x91\xd3\x76\x2b\xed\xa5\x78\x4a\x76\x7a\x32\x8b\x5f\x29\x7a\xf2\x06\x14\x82\xfa\xb0\x0d\xe6\xba\x3d\xa8\xfe\xd3\x68\x58\xca\x24\x2e\x34\xa7\x12\xf4\xe0\x67\x07\xea\xe1\x4a\xd1\x2b\x77\xb0\xb6\xf2\x6f\x21\xd7\x2a\x42\xb6\xf6\x1f\x03\xd9\xfd\x0a\x00\x00\xff\xff\x41\x7d\x3b\xdb\x44\x04\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1092, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// app.yaml
// DO NOT EDIT!

package mixin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x8a\xdc\x3a\x10\xdd\xfb\x2b\xea\xf6\x0d\x33\x2b\x8d\x7b\x33\x64\x10\x64\x1d\xb2\x4a\x18\xb2\x0c\x98\xb2\x5c\xdd\x5d\xb1\x2c\x89\x92\xd4\x26\xaf\x7f\x0f\xf2\x63\xe2\x81\x4e\xf0\x46\x52\x1d\x9d\xaa\x53\xaf\x01\xcd\x85\x1d\xe9\x0a\xa0\xf7\x1d\xbb\x73\x83\x76\xc4\x6f\xb1\xf1\x4e\x43\x92\x4c\x7f\x3e\x06\x9f\x5d\x8a\x85\x09\xd0\xd1\x09\xb3\x4d\x1a\x0e\xf5\x15\xa5\xb6\xdc\xd6\x33\xab\xc6\x10\x0e\xd5\x15\x85\xb1\xb5\xa4\x2b\x05\x0e\x07\xd2\x30\x52\xdb\x04\x2f\xa9\xda\xf8\x3e\x1d\x9f\x8e\x95\xb1\x3e\x77\xec\x38\x95\xc0\xa3\x70\xa2\xe6\xc4\x96\x26\x1d\x05\x01\xd3\xe5\x86\x88\x64\x77\x98\xf2\x08\x24\x03\xc7\xc8\xde\x45\x0d\xc7\xb7\x8f\x8f\x13\xea\x47\x47\xa2\xe1\xf0\xe6\xc7\x15\xe5\x61\xad\xcb\x98\x52\x40\x13\xc4\x17\x81\xc6\xb1\xe9\x4b\x6e\xbf\xf4\x3e\xda\x2c\x68\xbc\x4b\xe4\x92\x86\x9f\x6a\xb2\x01\xfe\xff\xaf\x6e\xd9\xd5\x2d\xc6\xcb\x82\x44\x4a\xa0\x28\x7b\x08\x1c\xe8\x84\x6c\x17\xbc\xf3\xa6\x27\x01\xc9\x6e\x32\xbf\x2c\x30\x80\x52\x32\xac\xef\x57\x70\x11\x06\x0c\xe1\x35\x1c\x60\xce\x38\x47\x92\x0f\x2e\xe4\xd4\xac\xdd\x5d\x6b\xb9\xf1\xb3\x0d\x40\xf0\xe9\xe3\xf3\xe7\x77\xbb\xb8\x57\xb8\x31\x61\x5d\x8e\x0d\x4b\xbe\x92\xf9\x8e\x96\xfb\xba\xcd\x6c\xbb\x98\x28\x68\x8b\x89\x62\xda\x26\xfe\xd2\x27\x50\x06\xee\x67\xea\x7c\x92\xc0\xdd\x1d\xd4\x31\xa1\xa4\xb2\x2a\xf7\x15\x40\x40\xd3\xe3\x99\x9a\x1c\x3a\x4c\xf4\xb2\x8c\x0b\xbc\xec\xc7\xdc\xd2\xcd\xf3\x81\xfd\x64\x9d\x39\xad\xb7\x32\x5e\x8a\xa7\x64\x67\x86\x6e\xf6\x2b\x45\x0f\xbe\x03\x85\xa0\xde\xaf\x83\xd9\xb7\x07\x93\xff\xd0\x77\x2c\x65\x12\x37\x9a\x33\x11\xcc\xc5\x8f\x0e\xd4\xf3\xce\xa0\x3b\x77\x70\x6a\xe5\xdf\x24\x97\x2a\x42\xb6\xf6\x1f\x03\xa9\x7e\x07\x00\x00\xff\xff\xe5\x9e\x55\xbb\xf2\x03\x00\x00")

func appYamlBytes() ([]byte, error) {
	return bindataRead(
		_appYaml,
		"app.yaml",
	)
}

func appYaml() (*asset, error) {
	bytes, err := appYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.yaml", size: 1010, mode: os.FileMode(420), modTime: time.Unix(1475345133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.yaml": appYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.yaml": &bintree{appYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

